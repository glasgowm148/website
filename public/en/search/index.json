[{"contents":"Intro SigmaUSD.io is the worlds first UTxO-based stable coin. The foundation on which a new era of digital finance will be built. A 100% cryptocurrency pegged decentralised stable coin that has no forced liquidation. (but is not without risk - as we’re about to find out).\nIt is an instantiation of the AgeUSD protocol designed in partnership by IOHK, Ergo, and Emurgo.\nIt maintains the conservative settings for collateral reserves, avoiding the need for liquidations. Along with that, it supports a fully decentralised stablecoin emission setup. Thus, SigmaUSD offers the world a stable, simple, and decentralised stablecoin.\n SigmaUSD vs the competition. SigmaUSD on Ergo - Privacy, Stability and Governance  SigmaUSD is a complex beast, but you need to know for this article the following. SigmaUSD\n Stable to $1 If you buy SigmaUSD, and the price of Erg dips - you can claim more Erg for the same dollar value.  SigmaRSV\n SigmaRSV is similar to book value per share. Its value depends on both the size of the reserve and how it is utilised. When the price dips, SigUSD holders who exit at a lower point than they entered must be rewarded extra Erg to make their SigUSD up to $1 SigRSV profits depend on these accumulated transaction fees plus any losses SigUSD holders experienced when exiting.  The 2% fee taken during minting goes back into the reserve. This fee accumulates in the reserve, appreciating the value of SigRSV and helping to prevent speculative orders.\nAdditionally, the contract locks at certain ratios, this is to ensure both that there is always enough reserve to meet the needs of the stablecoin under market conditions, and that the SigRSV position doesn’t suffer from significant dilution. SigmaUSD V1 Shortly after the contract was live, we noticed a large player was jumping in and out of SigUSD at a semi-regular schedule. After some research, we identified that the Bearwhale was frontrunning the oracle price in an attempt to profit at the expense of reserve holders (SigRSV).\nThis type of oracle frontrunning is not uncommon and has happened before in the Ethereum DeFi ecosystem. It is a factor at play because oracle there must always be some amount of delay before a data point is accepted into a block, which opens up the ability for frontrunning to exist.\nIn our scenario, the Bearwhale was taking advantage of this by minting SigUSD early during the \u0026ldquo;Live Epoch\u0026rdquo; period of the oracle pool, once it was reasonably clear what the upcoming new Erg/USD datapoint would be—profiting on the price difference once the oracle pool finalised the datapoint. You can take a look at the whale\u0026rsquo;s address here (who appears to be an early miner in the Ergo ecosystem.\nWe decided at this stage to freeze the oracle price to allow people to redeem. The contract would then be relaunched with a higher fee, and governance tokens enabled.\nRead the full blog post regarding this on the blog: Finding The Right Balance.\nSigmaUSD V2 As soon as we launched V2, the Bearwhale was back with several attacks on different fronts. Thankfully, this led to some minor issues with the protocol coming to light and quickly being patched - improving the resiliency going forward. Don\u0026rsquo;t you love free stress tests?\nThey initially purchased a significant stake in SigRSV - which most took as a sign of hope and that the Bearwhale was instead backing the protocol going forward. Unfortunately, ultimately, they discovered a loophole that allowed a mimicking of the SigmaUSD treasury, interjecting when someone was making a transaction, selling SigRSV to users while pocketing the fee.\nWhen this was blocked, next was spamming the proxy addresses that ERG move through while being swapped for Sigma. This prevented the redemption of SigmaRSV and allowed the cycle into a short position, and keep the reserve ratio locked at 400%. Scripts from community members to counter his attempts, and subsequently, we rolled out a patch to prevent the attack.\nIndeed, there were likely many other efforts to misuse and manipulate the oracle pools and the protocol itself, which were unsuccessful and we are not aware of.\nWhile we cannot say for sure that the dumping on the open market was connected, 150,000 ERG sell-walls appearing shortly after the short positioned was entered was telling.\nDuring the BTC-flash crash, the price of Erg fluctuated sharply to under $2; however, the robustness and smoothness of Oracle Pools came into play. They are limited to an update of 0.5% every 30minutes - up or down. The markets slowly recovered throughout the day, and the power of the Oracle Pools power was demonstrated. The Bearwhale had the chance to exit at a minimal loss during this period, but they did not. Maybe they were looking for lower prices of Erg.\nUnfortunately, for his sake, the marketing machine is well-greased and roaring, and when we finally broke through $4, the whale exited his position with a loss of around 170,000 ERG, compared to his starting position at the beginning of V2. The exact amount made during V1 is hard to quantity, as the first transactions we see are withdrawals from the SigmaUSD bank (presumably, deposits made with another wallet). The Bearwhale\u0026rsquo;s main address can be found here, and this second one appeared later on. He likely has many others or friends helping him. Those who minted SigRSV at the start of the contract and cashed out here made a healthy profit.\nAt the moment, SigRSV holders might want to consider an exit. The size of the reserve compared to SigUSD utilisation is unbalanced and is high-risk for reserve holders. The Bearwhale is continuously rotating back into a short at a higher price point and try to redeem some of those ERGs. This is a risky gamble for him, and while he\u0026rsquo;s a proficient hacker. He appears to be terrible at trading.\nIs the game finished? No, we do not think so. But, from now on, the game is changed, and it is a fair game. Now, anyone can Mint/Redeem whatever they wish; the RR and SigRSV price are moving up and down as usual. No individual is preventing you from minting/redeeming USD/RSV, and it is ultimately you that decides on your position.\nWe must keep in mind that this protocol is not to benefit only the RSV holders; The war declared on the Bearwhale was because they were not playing fair. From now, lots of individuals and whales may enter into both positions and take profits or losses; that\u0026rsquo;s fair. So, let us leave the bearwhale story behind and use the protocol wisely. I think all of us learned a lot from the battle and got more familiar with the risks/rewards of the protocol and the chaotic nature and wars waged behind the scenes in decentralised finance.\nThe Future The success of the SigmaUSD stablecoin depends not only on the price of Erg but also on the utilisation of SigUSD itself. anon_2020s has already integrated the mixing of SigmaUSD/RSV into the ErgoMixer. The first working non-custodial, programmable, non-interactive mixer in the cryptocurrency space. Both ERG and SigUSD are now accepted on Cryptocurrency Checkout. This is a Non-Custodial Payment Gateway that provides plugins that make accepting multiple cryptocurrencies for your products and services as easy as entering your wallet addresses and copying some code into your website or application. The team is also working on SigUSD/USDx stablecoin pairs which would enable robust off-ramps; we have support upcoming for Auction House, the tip bot for Telegram, and, more significantly - ErgoDex on the horizon, which will likely be another serious test for autonomous contracts and the DeFi space as a whole. Discussions are already budding on the forums of how we can improve these contracts so that we can ensure the robustness and resilience of the protocol going forward. If you\u0026rsquo;ve made it this far, check out The Ergo Manifesto to see what Ergo is really about. Head over to ergonaut.space/en/SigmaUSD for more information on the protocol, or r/ergonauts/faq for a comprehensive overview of all the components that make up Erg. We\u0026rsquo;re not sure who minted the graphic above (a developer working on an NFT gallery stumbled on it). But it\u0026rsquo;s up for sale on the auction house.\nFinally, join the fight and help bring crypto back to its roots. There\u0026rsquo;s a SigmaUSD group on Telegram, a dedicated channel on Discord, or head over to our rapidly growing community at /r/ergonauts/.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-13-bearwhale-saga/","subtitle":null,"title":"Bearwhale Saga"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/","subtitle":null,"title":"Ergo"},{"contents":"The Ergomixer is the first non-interactive, non-custodial mixer in the cryptocurrency space. There have been requests from the community to understand the mixer, why it is an important piece of tech, and why people would choose to use it. It is my hope that I can cover these questions in a way that a novice to the crypto space can understand and comprehend.    A non-interactive application is permissionless. Everyone has the ability to use it without initiating a request. Imagine you came across someone who gave non-interactive high fives. They just walked about with their hand outstretched offering a high five to everyone they passed. This type of application empowers the user, it treats everyone the same. There are no special privileges, no compliance requirements, non-interactive applications are simply free and open to all. The ergo mixer is non-custodial meaning at no point does another party hold an individual’s tokens. Originally mixing cryptocurrency was a service. A user had to send their tokens to a custodial party, who would then provide the service of mixing. Hopefully, the tokens that were sent were returned. As many of you know, there are often grifters who float about on social media offering all kinds of wonderful services without any intention of returning whatever you send them. Giving custody of your tokens to another party does come with risk. The Ergomixer eliminates that risk. These are two principles of true decentralization that I would recommend to everyone in the cryptocurrency come to recognize, understand and use. Why? Because these types of applications protect you, the user. Flexibility/Fungibility In time any token on the Ergo blockchain will have the ability to be mixed. The first token that was mixed through the mixer beyond Ergo’s native token was SigmaUSD. This is really an exciting accomplishment, especially given there is a Dex in the process of being developed on the Ergo Blockchain. Any coin that will be listed on Ergo’s decentralized exchange will have the capability of being mixable. I am sure the development of that will take some time, however, it suddenly gives privacy capabilities to tokens that have no privacy features. Suddenly users may be able to mix a variety of stablecoins and assets.\nWhy Might I Want to Mix Tokens? The UTXO model of account is similar to cash register accounting. Simply stated, a deposit is made, amounts are combined, and change is returned. If you go to a local shop and pay in paper currency, the cashier does not have the ability to look into your wallet. Perhaps they may peek inside from a distance and try to gauge the amount that you are carrying, however, you have a certain element of privacy in the transaction. In the basic UTXO model of accounting, this transaction is not private. While it may be extremely difficult to connect the wallet and the user, the amount held is stored. This information is not simply available as if a cashier is trying to catch a momentary glance, that transaction is stored for all to see and is auditable at any point in the future if someone has the transaction information.\nThe Ergomixer is a way to send tokens and potentially conceal both sides of a transaction. Practical Example for Senders Imagine a user wants to place a bid on the latest NFT at the Ergo Auction House. A bidder may want to conceal their wallet information for a variety of reasons, for example, they may have a limited budget and not want that information broadcast to their competitors. They may be transferring money into the future Decentralized Exchange and want to conceal their total balance from other traders. Perhaps they have a large position and believe other traders may try to take advantage of knowing a large sum is inbound. There are many practical reasons why parties making an exchange may want to conceal their financial decisions. We do this all the time. In truth, this is no different than the privacy features of cash. You can go into a store, take out a 10, and ask for two 5’s\u0026hellip; You have just mixed money. There is a reason why people do not go about in their daily life with all of their net worth on their person. In reality, it is common sense. On a blockchain, it is often associated with some nefarious intent.\nCash is fungible, interchangeable, mixable. We have accepted that as normal. I hope that in time the perception of mixing on a blockchain is as acceptable as the same properties we see with physical currency. The truth is the majority of criminal and illicit activities occur in physical fiat currency. However, this has never been a legitimate justification to outright ban the use of fiat currencies. ","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-12-ergomixer/","subtitle":null,"title":"ErgoMixer"},{"contents":"Ergo Blockchain is Layer 1 Protocol for powerful Decentralized Finance Contracts that builds advanced cryptographic features and radically new DeFi functionality on the rock-solid foundations laid by a decade of blockchain theory and development. The Proof of Work consensus algorithm and underlying UTxO model enable robust scalability and security. Ergo is also partnered with EMURGO , the commercial arm of Cardano, to improve research on blockchain and zero-knowledge ecosystems. To check out some smart contract deployments, see our GitHub repositories here and here. Stablecoin Blockchain assets can be extremely volatile. That’s why investors often seek digital assets which are pegged to national currencies. A Stablecoin is the most primitive integration of cryptocurrencies with the off-chain world. Until DAI, fiat custody services were provided by centralized services. The first example of a stable coin, USDT, is backed by actual dollars held in banks. However, for a decentralized financial system, we need other means of fiat-pegged currencies. Launched in February, Ergo’s native stablecoin SigUSD is based on AgeUSD protocol to provide a robust Reserve/Mint contract. Providing a truly decentralized finance experience. It’s collateralized with its own native cryptocurrency reserves ERG using SigRSV as the trust component which gives SigUSD’s $1 value. SigRSV collateral ratio is set to a minimum of a 400% ratio with SigUSD. This design prohibits liquidations such as we saw in 2020 March crash. As Emurgo states, \u0026ldquo;Black Thursday,\u0026rdquo; when MakerDAO CDPs were triggered for liquidation due to volatility and then sold for $0 due to blockchain congestion that prevented others from bidding, demonstrated that a new design is needed. For SigmaUSD, this scenario is not possible.\nOracle Oracles are the backbone of a decentralized financial system. It connects off-chain data with the on-chain world. Normally, ETH has no info about the current market price. During a swap order in a decentralized exchange, a swap contract needs to call the data from various data sources to obtain market price. Thus, oracles are the messengers of the crypto ecosystem. Not only in atomic swaps but also in more complex interactions such as lending/borrowing assets or dynamic market-making need the data feeds provided by oracles. DeFi ecosystem suffered from Flash Loan attacks, caused by misinformation from centralized price oracles.\nErgo developed Oracle Pools to maintain a robust DeFi ecosystem. Because of the eUTXO design and its rich programming language ErgoScript, oracle networks can be more decentralized. In the extended UTXO model, we have a lot of flexibility and power available to build new protocols. This can be utilized to construct oracle datapoint hierarchies of confidence. In short, they are an abstraction above oracle pools which allows us to scale the benefits of oracle pools as much as we desire, at the cost of price and speed. ERG/USD oracle pool is running on Ergo Blockchain.\nNFT Blockchains aren’t only about cryptocurrencies. Audio or visual artworks can also be deployed on immutable smart contracts of blockchains. These artworks are represented by Non-Fungible Tokens. Furthermore, artworks can be traded in decentralized auction houses. This would help artists to reach the world without any restriction of governments or without any need for centralized licensing firms. It means the democratization of art markets with the help of public blockchain.\nSome examples like Rarible or Opensea are auction markets running on Ethereum Network. Any artist can create and sell their artwork in there, however, gas prices to mint an NFT can take up to $100. Ergo’s scalable and faster design would reduce the gas costs to almost zero, without giving up security or speed. Ergo NFT Auctionhouse is open for months and it allows listings for a picture, audio, or any other kind of non-fungible tokens.\nDEX Until 2020 DeFi Summer, Value Locked in DeFi (TVL) was too low to use the platforms effectively. After an increasing interest and new token issuance every day, Decentralized Exchanges (DEX) came into the sunlight. Their benefits are for people who don’t want to give up the custody of their funds. DEXes democratized the exchange experience for both blockchain developers and crypto investors. ErgoDEX can provide more functions than Ethereum based DEXes. ErgoDEX has more properties such as limit orders, partial filling, and buy-back supports. Ergo’s Multi-Stage Contracts allows for timed release payments, so a code implemented in the contract can help investors to cancel their order with a minimal loss if the developers of the project don’t deliver their promises. With the implementation of NIPoPoWS, DEX will be interoperable in both PoS and PoW blockchains. Users can enjoy the freedom of exchanges with self-custodial wallets.\nDAO DAO stands for Decentral Autonomous Organizations. Cryptocurrencies are decentralized (not all of them!), and so their platforms. The governance of these platforms is run by decentralized entities. Every decision is made by pseudo-anonym individuals of DeFi platforms for prohibiting the centralization of power. Therefore, certain tokens are used for voting or making enhancements to these DeFi platforms. New coin issuances, redefinition of purposes etc. are all very vital features and can’t be left to a small group of individuals if the crypto ecosystem is for the masses. Zero-Knowledge Treasury Vaults with multi-key signature are the first example of a DAO in Ergo Blockchain.\nLending - Borrowing Lending and borrowing are two components that increase liquidity flow in financial systems. For example, you have Bitcoins but you want to leverage your holding without selling your BTC. So, you can stake your BTC (you can also use your house as collateral in this sense) as collateral to borrow SigUSD and use it in exchanges or yield farming protocols. On the other side of your interaction, another user can leverage her unused SigUSD by staking in the lending protocol. Traditional banks have very low-interest rates and they might suck up a lot of revenue from your deposits. With decentral lending protocols such as Compound, users will be able to use lend/borrow services and move their funds across all crypto ecosystems without any need for centralized platforms such as banks or exchanges. Crypto lending protocols are open to more experimental designs such as interest-free loans, innovating even more use cases on blockchains.\nDerivatives Besides buying and selling the tokens of a protocol, traders also want to monetize via various strategies such as options or leveraged future contracts. In traditional finance, these tools are provided by brokerage firms and in the crypto world by centralized exchanges. However, this can turn out to be very harmful towards traders by making exchanges big casinos who can see the player’s hands. That’s why in decentralized finance, there is also an alternative as options or derivatives trading smart contract platform. Synthetix is an example of leveraged assets trading platform. The platform token creates liquidity for the traders who want to take leveraged positions. Hegic on the other hand provides an options trading platform for traders who wants to bet on call-put options via smart contracts. These are just two examples of derivatives protocols on Ethereum. Ergo Blockchain’s Multi-Stage Contracts can also provide these protocols on top of it.\nInsurance Another big sector of the finance industry is Insurance. Every exchangeable asset carries a risk of losing it, whether by unprecedented risks such as taking a bullet to your Ledger Wallet or foreseeable risks such as rug pulls. New protocols emerged such as Nexus Mutual to tackle the decentral insurance problem. If you think about insurance, it pays a premium to risk bearers in case a bad event happens, exchanging your money for security. In a Decentralized Insurance platform: Your participation, risk bearers’ participation and validation of the trade by oracles can all be governed by smart contracts to create a smoothly functioning DeFi ecosystem.\nYield Aggregation So after an expansion of new decentralized exchanges such as Bancor, Balancer, Uniswap, Sushiswap, and Curve, people are started to look for easier ways to move capital around those exchanges to create the best yields. Yield Aggregators are helping users to automate the liquidity farming actions. The first example of a yield aggregation protocol is Yearn Finance. In the protocol, users can choose different yield farming strategies among the vaults deployed. Not only users but also developers can leverage yield farming platforms by creating their unique yield farming strategies and deploying them on protocols. Such examples will be very useful for market-making algorithms in the future by supporting deep liquidity all across DeFi.\nIndex Coins Not all crypto investors are conscient about different blockchain use cases. Some of the investors may want to benefit from indexed tokens to invest in various cryptocurrencies. For such an innovation dynamic market-making(DMM) algorithms would be necessary to adjust the funds after price changes. Besides, people who will release index tokens must have the market knowledge to decide which tokens must be involved in the indexed and for how many percentage. Some examples of index coins running on Ethereum are ASSY, YETI, PIPT, YLA issued by Powerpool Protocol. Asset Tokenization Asset Tokenization is meeting traditional financial assets with crypto. A centralized exchange FTX provides US stocks in exchange for cryptocurrencies. This phenomenon, however, is very new due to regulation problems. Stock tokens are not yet traded on decentralized exchanges. Another example of tokenization of real-world assets would be real estate tokenization. With the help of cryptocurrencies, houses can be fractionated into thousands of tokens representing real estate. These kinds of implementations will help retail investors to invest in houses all around the world with minimal savings.\nAll the utilities of traditional banks are becoming decentralized applications on smart contract platforms. Ergo is providing robust and rich infrastructure with ErgoScript language to support a complex DeFi ecosystem powered by Multi-Stage Contracts.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-10-defi-ecosystem/","subtitle":null,"title":"DeFi Ecosystem"},{"contents":"","link":"https://bpsaa.vision/the-opolo-hardware-wallet-is-the-new-bpsaa-partner","permalink":"https://ergoplatform.org/en/news/2021-05-10-the-opolo-hardware-wallet-becomes-the-new-bpsaa-partner/","subtitle":"The BPSAA is excited to officially announce it’s newest partner, Opolo. It is the latest and one of the most exciting partnerships for the BPSAA. Not least because of the interoperability opportunities it brings.  Opolo is primed to be the most secure hardware wallet in crypto, allowing users to safely store their funds on their custom hardware.","title":"The Opolo Hardware Wallet Becomes The New BPSAA Partner"},{"contents":"Ergo Platform is boiling with updates! Recent updates are: Ledger integration is announced in collaboration with tesseract.one\nWrap Assets announced integration with ErgoDEX Plutus Port for Cardano.\nOur partner BPSAA announced partnership with the new Opolo Hardware Wallet.\nNative stable coin SigmaUSD is purchasable/redeemable on Ergo Blockchain.\nMerchants and buyers can use ERG and SigUSD for shopping on online platforms.\nHackathon will take place at 28-30th of May.\n*** Ongoing Developments  -Introduction to Ergo.Meta and L2 Scaling Solutions\n-ErgoMixer Tokenization\n-Node Updates \u0026amp; Faster Validation for Smart Contracts\n-Gravity Code Integration with Waves Ecosystem\n-Yoroi dApp connector update that enables a Metamask experience on Ergo and Cardano\nStay tuned! Also check The Ergo Manifesto and Ergo dApp marketplace SigmaVerse if you haven\u0026rsquo;t check already.\nSee you soon Ergonauts!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-09-ergo-platform-roadmap/","subtitle":null,"title":"Ergo Platform Roadmap"},{"contents":"","link":"https://ergoplatform.org/en/blog/2021-05-07-ledger-network-integrates-ergo-network/","permalink":"https://ergoplatform.org/en/news/2021-05-07-ledger-network-integrates-ergo-network/","subtitle":"We’re happy to announce our collaboration with Tesseract Systems through our grants program that is going to provide full integration with the  Ledger hardware wallet. This integration will allow Ergonauts to safely store their ERG tokens with the world’s most secure hardware wallet.","title":"Ledger Network integrates Ergo Network"},{"contents":"","link":"https://twitter.com/crypto_checkout/status/1389972682561638409?s=20","permalink":"https://ergoplatform.org/en/news/2021-05-07-use-erg-to-make-receive-payments-worldwide/","subtitle":"Now you can accept $ERG #cryptocurrency on your website \u0026 store platforms like #Shopify #Bigcommerce #WHMCS #Woocommerce, #Wordpress, \u0026 as donations on #Streamlabs #Twitch #Twitter \u0026 more!","title":"Use ERG To Make/Receive Payments Worldwide"},{"contents":"","link":"https://cryptocurrencycheckout.com/coin/sigmausd","permalink":"https://ergoplatform.org/en/news/2021-05-07-use-sigusd-to-make-receive-payments-worldwide/","subtitle":"Running a business is a matter of managing costs.   Accepting ERG as payment is great… but isn’t crypto volatile?   If you want to run a crypto gateway and require predictability, we now have you covered.  ","title":"Use SigUSD To Make/Receive Payments Worldwide"},{"contents":"We’re happy to announce our collaboration with Tesseract Systems through our grants program that is going to provide full integration with the Ledger hardware wallet. This integration will allow Ergonauts to safely store their ERG tokens with the world\u0026rsquo;s most secure hardware wallet.\nWhile there are many other ways users can store and interact with their ERG and tokens, the ledger provides a fully secure way to do this, ensuring that the private keys are never exposed to the internet directly when making a transaction. This ongoing collaboration will be a continuation of our constant search for better compatibility features, allowing users to access, store and manage ERG tokens on their Ledger devices.\nThe ledger hardware wallet, along with the live app, enables users to secure and control their portfolios fully. The two main wallets introduced by the company are the base model Nano S, for everyday crypto enthusiasts who are looking to secure their assets from home, or the upgraded Nano X model that allows them to manage it on the go from their smartphone. Ledger Benefits and security Ledger is pioneering hardware wallet technology, providing unprecedented levels of security for crypto assets by creating devices that are secure by design.\nAll hardware wallets created by the company possess a certified chip built to hold off any attacks. Aptly named the “Secure element”. This provides an extra layer of security through cryptography. These chips are similar to the ones used in likes of passports and SIM cards. Nano wallets also have a unique and customized OS called “Bolos” explicitly designed to protect crypto assets which grant the higher protection against attacks possible.\nLedger wallets are the first and only certified hardware wallets on the market, approved by ANSSI, the french independent cybersecurity agency.\nAbout ERGO Founded by some of the leading technologists in the sector. ERGO is a Proof of Work blockchain platform featuring smart contract capabilities that allow for full integration with the decentralized finance (DeFi) sector.\nERGOs Sigma protocols and blockchain architecture allow for what otherwise would be very difficult in conventional smart contract platforms. The use cases for financial contracts are endless, including the issuance of decentralized stablecoins, NFTs, Oracle pools, and decentralized mixers, among many other things.\nYou can read Ergo’s Manifesto here\nAbout Tesseract Tesseract is a protocol that allows dApps to run without having access to the user\u0026rsquo;s private key. Instead, it facilitates communication with the Wallets to request transaction and data signatures.\nThe main goal of the Tesseract protocol is to enable dApp developers to provide a secure but at the same time smooth and easy-to-understand user experience without compromising privacy and decentralization. In contrast to the case-specific solutions, Tesseract protocol can work in various environments: on the smartphone, desktop, or even crossing the border of a single device (i.e. a dApp runs on the computer, and the wallet is on the smartphone).\nYou can test the demo dApp that utilizes Tesseract to work on iPhone here: https://tesseract.one/#demo\nAbout Ledger The renowned leader in the industry of security solutions for crypto assets was founded in 2014. With its headquarters in San Francisco and Paris, Ledger has more than 200 employees developing a wide variety of products and services to shield assets either for companies or individuals. Their wallets support more than 1500 cryptocurrencies and can now be sold worldwide, making security reachable and affordable to all.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-07-ledger-network-integrates-ergo-network/","subtitle":null,"title":"Ledger Network integrates Ergo Network"},{"contents":"Bitcoin is often thought of as an anonymous currency used by criminals and hackers. While this myth has been dispelled many times, it still lingers on. The truth is that Bitcoin is a pseudonymous cryptocurrency. While no names or real identities are tied to addresses and transactions, these can all be seen through the public ledger that is the blockchain. While the alphanumeric wallet addresses do not give away any private information, there are ways in which these can be connected to real-world identities, including wallet transaction broadcasters who can link your address to an IP, and especially fiat on and off-ramps. Blockchain: A Problem Or The Solution? When one uses a centralized exchange to buy or sell crypto for fiat, they’ll have to go through a KYC (Know Your Customer) process, which will reveal their identity. In some aspects, Bitcoin and other public blockchains are not suitable for money laundering and other malicious activities . Criminals will still need to go through regulated corporations to cash out any ill-gotten funds or spend them on any real-world items. In short, Bitcoin is actually a much better alternative when it comes to anti-money laundry enforcement when compared to private banking or cold hard cash. So much so, former CIA Acting Director Mitchell Morell revealed that cryptocurrencies between made up to less than 1% of all illicit financial activities between 2017 and 2020. In this report, he mentions that illicit activities with fiat money count for an astonishing 2 to 4% of the U.S.A.’s GDP.\nPrivacy and User Security On the other hand, pseudo-anonymity makes users vulnerable to malicious actors.When receiving a payment, users need to share their public wallet address which exposes the wallet, the transaction and the funds to the entire world which make high-network individuals a target for wary hackers and criminals.\nA random spy actor can monitors wallets and transactions, and they can devise an attack plan if any security flaws are discovered. This becomes even more dangerous when one considers the potential for data leaks on exchanges or third-party wallets, which may allow nefarious actors to link a wallet to an I.D., social security number, and more.\nThe public and pseudonymous nature of blockchain comes as a double-edged sword. It makes the users vulnerable to attacks, leaks, and other issues. Traditionally, banks and governments keep their centralized ledgers private, which means one must trust the aforementioned entities to remain honest and ensure the safety and liquidity of funds.\nMoney For The People Call for action! As I said earlier, money laundering schemes were around before Bitcoin and even now they take up as much as 1% of total usage in crypto. When regulators are keeping a close eye on the public ledger, with the help of KYC exchanges, they can still know what you’re up to. In a way, you may think that’s okay because governments must prevent black money circulation to stop illegal activities. We think that’s okay too! However, up until now, they were closely following personal bank accounts and the only thing they prevented was individual users from freely using their funds. Big corporations can continue walking around legislation to evade taxes and bad actors use global money laundering schemes to continue using black money. What governments do is keeping a close eye on citizens by seeing them as potential money launderers. How does this sound?\nBitcoin FUD(Fear, Uncertainty, Doubt) arguments made by regulators were mainly counting on the idea of Bitcoin as a private, anonymous, uncontrollable, and unstoppable money. We know that these cases aren’t true, we saw that cash was the primary money laundering tool and blockchain wallets are traceable. When you withdraw your money to your bank account, governments know what were you doing with your non-custodial wallet. The only case is then, you’re in control of your own funds, and you aren’t using “legal” fiat money controlled by central banks. That makes governments powerless on a global state because they can’t tell you what you should do with your funds or they can’t ban your account when they spot an unexpected activity.\nWhat remains is that they can question you about where did you get the money that you withdrew to your central bank account to pay your bills and make shopping etc. Also, they can’t ban your account, for example, when you didn’t pay your debts but let me ask again: Did these powers stop illicit financial activities, or prevent big players from taking delirious debts and going bankrupt? The answer is no, illicit financial activities continue happening elsewhere and institutions can rely on the “too big to fail” argument with the hope of bail-outs when they need them.\nEnhancing Privacy and Anonymity For the protection of individuals, we have private chains or ‘CoinJoin’ (coinmixer) apps that make users' wallets untraceable. Like I said this doesn’t mean that a user can launder money because every on-chain financial activity must end with an “integration” phase, which means withdrawing funds to the real, off-chain world. If you can prove that the custody of your funds wasn’t involved in any illicit financial activity, you shouldn’t be prevented from using privacy-enhancing tools to protect yourself in the on-chain world. You hold your keys, you hold your coins or in a reverse phrase- not your keys, not your coins. That also includes custodial exchange wallets because in centralized exchanges this is not any different from using a bank. You aren’t in crypto if you use only centralized exchanges, they can track you, prevent you or on the worst scale they can steal your coins(exit scams). That’s why decentralized finance protocols are entering their golden era now. You don’t have to give up the custody of your funds to use financial applications. Decentralized exchanges are becoming more efficient and cross-chain operations are becoming stronger by supporting all cryptosphere with a single non-custodial wallet. Coin mixing services don’t rely on custodial firms, they are working on zero-knowledge proofs. Decentralized applications are shining in a traditionally controlled government-backed finance world. A new history is upon us and we are just seeing the tip of the iceberg. Future is very exciting in this sense: Banking the bankless with decentralized applications, giving power to the people, draining seigniorage rights of governments and preventing bail-outs of “too-big-to-fail” institutions by infinite money printing -or how is it called in the fancy financial literature- by quantitative easing.\nErgo Blockchain provides a non-custodial coinjoin service, the ErgoMixer, as a dApp. It basically protects you from spy agents in the blockchain sphere. It is perfectly secure with its open-source code so that you know what you are interacting with. For more, Ergo Blockchain is a powerful network and it supports Layer 2 services on top of it so anyone can create private side-chains to use blockchain securely. We will provide more updates on the exact details of ErgoMixer later on and new developments on Layer 2 services and privacy focused dApps will soon flourish with new developers coming on board. Ergo Blockchain isn’t built for governments or institutions, it\u0026rsquo;s built for people by the people. ","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-05-01-blockchain-privacy/","subtitle":null,"title":"Blockchain Privacy"},{"contents":"","link":"https://curiaregiscrypto.medium.com/whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-28th-a12153ffccca","permalink":"https://ergoplatform.org/en/news/2021-04-30-whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-28th/","subtitle":"The Ergo weekly Dev update is not the sexiest crypto blog. Focusing on the moon is great but the truth is, a rocket takes an incredible amount of engineering. Designing and building systems that are subject to immense pressure is not an easy task.","title":"What’s Going On Behind The Screens: Ergo Weekly Dev Update April 28th"},{"contents":"The design of Ergo’s oracle pools are more efficient and programmable than using multiple single oracle data points such as in Chainlink’s oracle design. We build hierarchies of confidence using oracle pools and pools of oracle pools in Ergo. It\u0026rsquo;s faster, cheaper, and more beneficial to the end user.\nWhat are oracles? Oracles in blockchain serve as messenger agents, connecting two distinct points of data sources while guarding the reliability of the information. This is indeed a valuable job as many people and decentralised apps rely on these datapoints to ensure continuous operation. Furthermore, because decentralized finance doesn\u0026rsquo;t use middlemen, the accuracy and speed of oracles are even more vital to sustaining a functioning blockchain ecosystem. Oracles keep both internal and external communication of an application and ensure its consistent and robust operation.\nA real-world example of this is the sigmausd.io stablecoin, which utilises an ERG/USD oracle pool and refreshed every 12 minutes. When such large amounts of collateral are at stake, it is vital that these data points are accurate and reliable. In DeFi, 3rd parties can also benefit from oracles via incentives to keep the network safe. This makes personal investors valuable participants in the ecosystem. Not only the banks or big institutions - individuals can also participate and get rewards for contributing to the system. People can benefit from this immense transaction of data by acting as a data feed themselves.\nHierarchy of Trust Yet the internet deals with a great amount of data and it\u0026rsquo;s not true that everything is right. That\u0026rsquo;s why it\u0026rsquo;s important to access real information. This can be done via assessing a trust score to data sources, regrouping them and putting them on a hierarchical trust level. That\u0026rsquo;s how we can effectively use an immense amount of data easily and fast. Chainlink\u0026rsquo;s design doesn\u0026rsquo;t allow that because it has an individualist design, and it\u0026rsquo;s hard enough encoding hierarchical trust scores to individual oracles, nevermind oracle pools.\nErgo Blockchain utilizes Multi-Stage Contracts with an extended version of the original UTXO model that Bitcoin is based on. This allows creation of hierarchical trust structures that the Account-Based model of Ethereum isn’t capable of. Later on, this facilitates rewarding oracle initiators in a top to downward mechanism based on a trust score. This implementation isn’t possible on an Account-Based model like Ethereum and can lead to errors and increased transaction costs. Governance And Incentives There shouldn\u0026rsquo;t be more complex governance ideas we believe, anyone who has skin in oracle pools should have a vote. That\u0026rsquo;s how participants can decide what\u0026rsquo;s best and everyone will have a chance to directly participate in governance without any protocol tokens. Oracle pools are very flexible in design, and it can be designed as more than a passive reputation system and also enables DAO governance models.\nBecause it\u0026rsquo;s in their best interest, individual oracles will choose to behave in order to earn money and vote on parameters. Oracle Pool design boosts this incentive and makes participants more prone to cooperation, securing reliable data sources for users and dApps. When users can access data directly from pools, there\u0026rsquo;s no need for oracle users to waste their tokens as they do in the oracle design used by Chainlink. This would reduce the cost a lot by direct access to on-chain data. However, because oracle pools work faster and much more effectively, these small fees can take up to a lot of revenue.\nAlexander Chepurnoy(aka Kushti), in 2014, was working with Sergey Nazarov in smartcontract.com, the former Chainlink. Ergo Blockchain\u0026rsquo;s Oracle Pools have greater longevity, effectiveness and accessibility than Chainlink\u0026rsquo;s oracle design. Moreover, the UTXO design of Ergo brings cheaper and faster transfer with robust security. Oracles are the backbone of a functioning decentralized finance system. For a robust DeFi ecosystem, oracle solutions are of great significance and need to be dealt with care.\nSources https://veriumfellow.medium.com/oracle-special-4e36cfa6a852\nhttps://ergoplatform.org/en/blog/2020-11-09-first-steps-towards-interoperability-with-cardano-oracles/\nhttps://github.com/Emurgo/Emurgo-Research/blob/master/oracles/Oracle-Pools.md\nhttps://emurgo.io/blog/emurgo-releases-oracle-core-for-developers\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-27-chainlink-oracles-vs-ergo-oracle-pools/","subtitle":null,"title":"Chainlink Oracles vs. Ergo Oracle Pools"},{"contents":"The Ergo Manifesto is intended to educate and offer a vision of what blockchain technology can achieve. We hope to build society through a form of horizontal cooperation through production under the division of labor, trade and exchange, and solidarity and mutual aid. We believe this can be achieved while maintaining basic principles that benefit the wellbeing of all humans. Core principles that have been central to human rights and values must be maintained as our technological capacities evolve. The tools that are built must enrich human value rather than subjugate humans in systems of surveillance and control.  By Kushti- With Help From the Ergo Team A lot of blockchain-related news these days is saying that a bank X or a corporation Y is going to use a “blockchain” to “reduce costs”. Basically, it means that just another buzzword is considered by big banksters as just another tool to extract value from everywhere in a more efficient way and also to save on cutting job positions.\nWhat I witnessed in the early years around online forums users is this.\nCryptocurrency should provide tools to enrich ordinary people. Their small businesses providing no much above making ends meet, not depersonalized big financial capital. This is what inspired me. This is my dream.\nThe tools of a cryptocurrency in the eyes of the original broad community vision should allow people to do economic activity whatever the business size, geographic location, interest rates set by big players, and so on. The tools should allow people to do contracts (digital, self-enforcing, reasonable smart contracts) regardless of the differences in jurisdictions, traditions, followed business practices, etc.\nI hope Ergo will be useful here. Thousands of small cooperatives and individual entrepreneurs are more important to healthy and sustainable wealth growth around the globe than a couple of corporations hiding profits in offshore heavens.\nAs an example, let’s consider the use and integration with communities, cooperative federations, nonprofit foundations, and philanthropic trusts. Let’s try to create grassroots finance. Yes many other things can be built, but I think this goal of mine should not be forgotten. My dream is smart contracts that help create value and protect the common people. Bitcoin Origins The first Bitcoin block (known as the Genesis block) contained a message stating \u0026ldquo;The Times 03/Jan/2009 Chancellor on brink of second bailout for banks.\u0026rdquo;\nThe creator of Bitcoin and inventor of the first-ever working blockchain chose to conceal his identity through a pseudonym that we’ve all grown accustomed to: Satoshi Nakamoto. He, she or them included the aforementioned message which was taken from a Times newspaper article issued on the very day the genesis block was mined. This block timestamped both the inception of Bitcoin but also the start of an era of technological and financial innovation. Simply put, this was the catalyst for a full-blown revolution.\nDecentralization is political. It gave birth to the idea that monopolized powers could be replaced by technology. Systems could be put in place to transfer value globally without the need for intermediaries or oversight. People could choose the currency they use, and choose who, how and when they could exchange value with one another. An entire industry formed around the idea of P2P commerce. Open, borderless and secure channels that potentially could prove mechanisms to level the economic playing field, and provide tools for prosperity for the average citizen of earth. Current Market Mindset The mentality of crypto markets shifted greatly after the ICO mania of 2017. In fact, it seems that the space as a whole has come to celebrate bailouts, printing, and stimulus.\nYes, there have been some massive price gains in fiat, a lot of hype-based marketing, but it does seem the original intent of goals of cypherpunks is becoming increasingly diluted. This is something that needs to be addressed. If cryptocurrency is to be implemented as an effective tool for the average human, we need tooling and adoption. Right now, it seems the market mentality is as follows: how do we honeypot new users with hype marketing, drive pumps and cannibalize these new members of communities.\nThe current state of the market is a little sad. We need to get back to the roots of the crypto-revolution, decentralized tools that are private, secure, and drive real world adoption of these systems. The ideal is to create tools that help people create value. Why is this important? The global economy has not improved since the original bailouts. I understand that the central narrative around privacy and security always plays on emotional extremes, however the reality is it is always the common humans that get burned when economies implode. -\nThink about it for a second. -\nCorporations have access to foreign markets and foreign credit. They have many tools to adjust and circumvent economic difficulties. As for criminal enterprises they generally benefit from economic hardship. Hard times drive self-medication. Larger criminal syndicates are essentially an import/export business. They also have access to foreign currency, and oftentimes will run black-market currency exchanges and further leverage this international access for profit. Terrorist organizations benefit during times of economic hardship. Nothing motivates a person towards violence like a righteous anger from a sense of being trapped and hopeless. Terrorist organizations thrive in regions of chaos. They feed on chaos; it is their single greatest tool of recruitment. The wealthy in our world often have internationally allocated portfolios. They are relatively liquid and generally have the ability to circumvent difficulties through market access, regulatory means such as tax havens, loopholes, and jurisdictional arbitrage.\nThere are multiple examples of economies that are in severe distress, one that made news recently was Turkey. The Turkish Central Banks recently banned cryptocurrencies as a form of payment. They cut access to a potential tool that would benefit the average citizen. The foreign exchange rate of the Lira to the dollar in 2010 was 1.14. The current exchange rate is 8.50. That is an 86.5882% decrease in purchasing power.\nNow imagine you are a Turk, perhaps you have traded a lifetime of time and labor to earn and save. In the span of a little over a decade over 86% of your monetary value has disappeared. The sad thing is blockchain was accessible in Turkey, however, the custodial actors abused their position with the people. It is critically important to make systems as non-interactive and non-custodial as possible. This eliminates the potential for bad actors and protects the people. This was a failure in technology and should serve as a warning to the dangers of centralized blockchain.\nLet this serve not as an example of why blockchain is bad, but as an example of why the common people need truly decentralized tools they can actually trust. Now like in most jurisdictions on earth the average citizen of every country has essentially zero power over monetary policy. The average citizen lacks the tools that corporations, criminal organizations, terrorist organizations, and the wealthy have to protect themselves and benefit from financial difficulties. Financial circumstances were created by the same powers that now hold their wealth hostage. The reality is the people at the top always get the life raft when a boat sinks, the people at the bottom go down with the ship. Now, this is not unique to Turkey. This is currently a global phenomenon. It is apparent looking at the changes in the distribution of wealth. However, it has been sanitized to seem more palatable. It is not the wealthy who have life rafts and the common people are downing. It is a K Shaped economic recovery. The Weaponization of Money Centralized programmable digital money sounds like an efficient technical upgrade to the existing monetary infrastructure. In some areas, this may be the case. However, it appears that the basic constructs of money are in the beginning stages of an era that will further weaponize money against the average human. Current fiat based monetary systems attack the common citizen by creating persistent inflationary pressures. This is the direct result of central bank printing, monetary intervention, and mismanagement of fiscal budget by central governments.\nThe resulting monetary policy has inflicted great hardship on the average global citizens, through perpetually driving up the cost of living. Hyper Monetization has transformed nearly every asset class into a financial instrument that is used as a means to generate wealth. This has driven wealth inequality globally and produced inflation of global debt to levels never seen in recorded history.\nThe truth is many consumers have been led to believe larger numbers reflect greater wealth. The reality is currency is decreasing in its purchasing power. Your house did not double in value, your currency purchases half as much house. Wage inflation has yet to equalize the inflationary pressures that are put on the middle and lower classes globally. The result is a further increase in personal debt and monetary stress on the average consumer.\nAs central banks begin to enact a shift to Central Bank Digital Currencies they may end up redefining the historical principles of the currency itself. I fear that money will be weaponized and turned into a tool of social control.\nThere are 3 particular points that I believe need to be watched for and rejected to prevent the adoption of weaponized money.\nThe first is programmable money\u0026rsquo;s ability to have an expiration date and or the ability of central powers to forcibly burn CBDC. This constitutes theft to the highest degree. Perhaps we will hear some sanitized terms, such as digital asset forfeiture however this level of centralized power will forever alter the balance of power between citizens and the state.\nThe second is the ability for centralized power to connect credit, or payment ability to a citizen’s social status within a community. Simply stated this is weaponizing money against dissent. The ability for a citizen to dissent in any free society is generally the only legal means they have to effect change. Absent the ability to dissent, society is not free. Connecting centralized access, reward mechanisms, or conformity to digital money currency is weaponizing money against thought, freedom of speech and freedom of expression. The third aspect of digital money to watch the ability to censor or limit credit in particular areas of the market. This challenges the sovereignty of money itself. The collective social contract has generally been that your money is yours. It is your property, your asset. Restricting or limiting consumers' access to spending their own wealth is a power we must all fear and resist. Although legalization has prevented access to certain markets, products and services, cash has remained sovereign. This pillar of freedom must be respected. This potentially could destroy the concept of a free market. Privacy \nPrivacy must remain an option to protect the individual. It does not have to be forced, let people make their own choices. Privacy is the ability to create barriers and erect boundaries to create a space by and for the individual. It is up to each what barriers and boundaries they chose to create. Civilization exists under a continuous tension between what is best for society and what is best for the individual. The only real entities in a community are individuals. All collectives, associations, and governments stem from individual participation and interaction. Privacy protects the individual from society.\nPrivacy creates space to allow personal autonomy. Personal autonomy is the basis of individual rights. Privacy, both financial and personal, is a critical component of life in a free society. When in the wrong hands, personal information can be wielded as a powerful tool of control and manipulation. Privacy allows individuals to make decisions free of coercion.\nIndividuals in free societies must have a boundary, a private reality, free of government involvement, surveillance, and control. Current technological trends in our world significantly intrude in one’s personal space. Individuals should have control over who has access to information about their personal and financial lives. Privacy is a matter of trust. The lack of privacy demonstrates a lack of confidence. A lack of trust cannot be the foundation of a healthy society. Healthy societies are built on cooperation. Voluntary cooperation is, in and of itself, an exercise in trust. Privacy rights mean that groups can’t take your data without your knowledge/consent and leverage this information for their benefit. Financial privacy is especially vital because it can be the difference between survival and systematic suppression of an opposition group in a country with an authoritarian government. Absent privacy individuals in society have no means of survival when under the threat of oppressive regimes. How many times in human history have religious, political, or tribal conflicts lead to one group in power forcibly taking the wealth of another less powerful group? How often is the seizing of financial assets used as means of authoritarian control?\nMany businesses, dissidents, and human rights groups maintain accounts outside the countries where they are active for precisely this reason. Financial privacy can allow people to protect their life savings when a government tries to confiscate its citizens’ wealth, whether for political, ethnic, religious or “merely” economic reasons. Financial privacy is of deep and abiding importance to freedom, and many governments have shown themselves willing to abuse private financial information.\nErgo.nomic Money The goal of the Ergo blockchain is to create Ergonomic Money.\nErgonomics is the scientific discipline concerned with the understanding of the interactions among humans and other elements of a system, and the profession that applies theory, principles, data, and methods to design in order to optimize human well-being and overall system performance.\nTime and time again economies implode, those with financial tools end up cannibalizing the wealth and value of the common people. This is not ergonomic; it is predatory and monopolistic. We need better tools. Now perhaps competition will upset central powers. It certainly did in the case of Turkey. That is why these tools need to be private, resilient, censorship-resistant, secure, open and free. Perhaps you live in a developed society and think it is fine, the central banks are pumping liquidity into our economy. Central banks are bailing enough water that the ship won’t sink. I hope you are right, but I fear you are wrong. Simply because the tools we are building may not benefit you today make no mistake they may be the lifeboat of tomorrow. That is the intent, purpose of my life’s work in cryptocurrency. Anyone who dares to say crypto is just a tool for criminals’ and terrorists’ need to search how these organizations are funded, protected and where they draw their supply chains from before making such accusations. Ignorance is venomous. It is all too often those at the bottom who suffer in separation from those at the top, who initiate the suffering. This cycle of economic abuse needs to be broken. The goal of Ergonomic money is to create money, and smart contracts for all people. Those at the bottom have the greatest need for the type of tooling we are building.\nErgo Basic Principles In this section, we define the main principles that should be followed to create ergonomic money. This might be referred to as “Ergo’s Social Contract”. In case of intentional violation of any of these principles, the resulting protocol should not be called Ergo. 1) Decentralization First Ergo should be as decentralized as possible. Always strive to spread and grow. Any party\u0026rsquo;s social leaders, software developers, hardware manufacturers, miners, funds need to avoid central points of failure. All actors whose absence will disrupt the function of the system need to have contingency plans in the event of a disruption. Decentralization is born from education and adoption. The tools we build need documentation, the community needs to actively participate and grow. Teach others to use and adopt the tools. The internet is a powerful driver of decentralization. It can be a powerful tool to teach. Decentralization is born from education, both on the development side and the user side. Malicious behavior that may affect the security of the network, should be avoided. If any of these parties do appear during Ergo’s lifetime, the community should consider ways to decrease their impact level. There will always be those who seek to disrupt, take advantage, misuse and abuse their power. What is the answer? Education. Educating users to protect themselves, how to identify malicious actors, how to avoid them, how to work together to minimize their power. I would encourage all community members to continually seek to learn, adopt tooling, assist and teach in one way or another. A strong community is born through strong cooperation. 2) Open Permissionless and Secure Ergo protocol does not restrict or limit any categories of usage. This is necessary in order to remain resilient. We certainly can advocate cooperation, trade, and human values however we do not enforce them. That would require a central power. Developers are free to implement any logic they want, taking full responsibility for the ethics and legality of their application. All code for the core protocol must remain fully open and transparent. Every line, everything should be fully auditable and transparent. This prevents manipulation as well as builds decentralized resiliency. Ergo is fully committed to being open source in order to remain trusted and that trust must remain fully verifiable. Anyone can join the network and participate in the protocol without permission. Unlike the traditional financial system, no bailouts, blacklists or other forms of discrimination should be possible on the core level of Ergo protocol. Insider advantage should be minimized. Ergo is committed to supporting privacy tools for those that wish to use them. This must remain a voluntary choice. If a user wants to use mechanisms to disrupt the public availability of their data that is fully within the scope of their power. They must take full responsibility for the ethics and legality of these actions. Ergo is committed to best security practices. This is a continual commitment to prevent network attacks, preserve privacy and protect on-chain value. 3) Created for Regular People Ergo is committed to being a tool for Regular People. Ergo is a platform for ordinary people, and their interests should not be infringed upon in favor of big parties. In particular, this means that the centralization of mining should be prevented. Regular people should be able to participate in the protocol by running a full node and mining blocks. Post Autolykos V1 Ergo will work to provide a hash rate distribution of pools. Ergo is committed to working towards building an ecosystem that offers tooling that is designed to assist regular people. Peer to peer exchange is continually under threat from peer to central power exchange. It is Ergo’s goal to encourage tooling and community education to empower the common human. 4) Platform for Contractual Money Platform for Contractual Money. Ergo is the base layer to applications that will be built on top of it. It is suitable for several applications but its main focus is to provide an efficient, secure and easy way to implement financial contracts. Ergo is committed to building a network on solid foundations that continue to update and innovate. The goal with contractual money is to create a system that is not overrun by high user costs and fees. In order for money to be Ergonomic it must remain cost competitive. Ergo will assist with frameworks and tooling for people to build and implement to maximize the use and utility or contractual money. 5) Long-term Focus All aspects of Ergo development should be focused on a long-term perspective. Ergo was launched in crypto winter, the purpose and intent of Ergo core developers need to supersede short term market conditions. There will always be those who come for short term appreciation and those who come for the principle. Smart contracts for the people is an open source concept to provide a system that can empower the average person. That goal is to remain resilient, adaptable and secure through the long ark of time. Since Ergo is designed as a platform, applications built on top of Ergo should also be able to survive in the long term. This resiliency and long term survivability may also enable Ergo to be a good store of value and a mechanism to assist the common human.\nWe should always see beyond our noses, thinking into the future. What tools can we add? How can we improve? What are the risks? How can we prepare for what is next? This long term vision must never die for Ergo to survive. Ergo was born in crypto winter. Many had begun dismissing the future of distributed systems and their ability to create value, nonetheless, we endured, kept building.\nToo often people sacrifice long term growth for short term excitement. Good times will come, and hard times will come. If Ergo is to endure we must be principled and create value on solid foundations. Who is Kushti? Alexander Chepurnoy (aka Kushti) is the core developer of Ergo Platform and he has been active in blockchain development and smart contracts since 2011. He was a core developer for NXT, started smartcontract.com(now Chainlink) in 2014 with Sergey Nazarov, and is an IOHK researcher with over 20 academic papers to his name. When he was working on Nxt, he started utterly simple blockchain framework Scorex, which was later pivoted into modular blockchain framework. This project got attention from Charles Hoskinson, Cardano and Ethereum cofounder, around mid-Autumn, 2015. Then he joined IOHK around January’ 2016.\nA Note On Token Economics: Ergo Platform had fair launch in the very beginning. It didn’t hold any ICO and there wasn’t any premined coins for the founders of the platform. Decentralization and fairness of a peer to peer monetary system was the priority in the first place. Foundation treasury is set to %4.37 of the total coins mined and it isn’t possible to change the core elements of token economics in a further stage.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-26-the-ergo-manifesto/","subtitle":null,"title":"The Ergo Manifesto"},{"contents":"","link":"https://curiaregiscrypto.medium.com/whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-21st-6e34e12fc4f6","permalink":"https://ergoplatform.org/en/news/2021-04-22-whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-21st-1/","subtitle":"Check out about lates updates on Ergo Platform development!","title":"What’s Going On Behind The Screens: Ergo Weekly Dev Update April 21st"},{"contents":"","link":"https://curiaregiscrypto.medium.com/whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-21st-6e34e12fc4f6","permalink":"https://ergoplatform.org/en/news/2021-04-22-whats-going-on-behind-the-screens-ergo-weekly-dev-update-april-21st/","subtitle":"I might miss a few updates, if that’s the case don’t think it’s not appreciated by the community. Busy week for Erg devs, as always, thanks for putting in work.","title":"What’s Going On Behind The Screens: Ergo Weekly Dev Update April 21st"},{"contents":"","link":"https://ergoplatform.org/en/blog/2021-04-21-wrapassets-announces-integration-with-ergodex/","permalink":"https://ergoplatform.org/en/news/2021-04-22-wrapassets-announces-integration-with-ergodex/","subtitle":"ErgoDEX team recently published Plutus Port proposal on Cardano’s Project Catalyst platform. It offers a cross-chain exchange built on top of Ergo Blockchain for Cardano Ecosystem. WrapAssets is a service provider for wrapped assets (like waBTC, waETH, waDOT) on top of Cardano Ecosystem. This integration will help ErgoDEX to achieve high liquidity and ADA holders can benefit from a secure cross-chain DEX with a variety of ready-to-use assets.","title":"WrapAssets announces integration with ErgoDEX!"},{"contents":"ErgoDEX team recently published Plutus Port proposal on Cardano’s Project Catalyst platform. It offers a cross-chain exchange built on top of Ergo Blockchain for Cardano Ecosystem. WrapAssets is a service provider for wrapped assets (like waBTC, waETH, waDOT) on top of Cardano Ecosystem. This integration will help ErgoDEX to achieve high liquidity and ADA holders can benefit from a secure cross-chain DEX with a variety of ready-to-use assets. WrapAssets.io As Cardano marching towards the Goguen Era, cross-chain integrations will be available across Cardano Ecosystem. Cross-chain operations will bring integrated assets from other platforms such as Ethereum, Bitcoin, Litecoin, Polkadot blockchains. So in this way, holders of ETH, BTC, UNI can use the Cardano ecosystem without giving up the custody of funds. In Ethereum, users of wrapped assets must hold a certain amount of ETH to pay the transaction fees. Babel fees proposal by IOHK solves this problem and makes transaction payments in any asset of the user\u0026rsquo;s choice. The extended UTXO design of Cardano and Ergo can process interactions in any denominated asset. This will bring freedom of choice for the users of these ecosystems.\nWrapAssets is a Delaware C-corp in the United States of America. The USA provides a robust legal framework and consumer protections to provide a level of trust to those doing business with USA-based entities. Wrapped coins will be secured in collaboration with institutional custodians like Coinbase and Kraken. All data will be on-chain and visible. Later on, when users want to take back their coins to another blockchain, unwrapped coins will be burned from the Cardano ecosystem.\nProject Catalyst Project Catalyst is a community funding platform for the development of dApps on Cardano Blockchain. Its vision is the sustainable growth of Cardano Ecosystem for benefitting the users in the long term. An initial 250K ADA will be used for funding the winner projects. ADA holders can vote on the platform via the voting app and decide which dApps can bring more value to Cardano Ecosystem in the next 6 months. On the platform, users can comment about dApps and provide feedback on improvements. ErgoDEX Plutus Port is proposed last week by ErgoDEX protocol developers Ilya Oskin and Dmitry Usov. Cardano shares a similar eUTXO model with Ergo Blockchain, so the implementation can be easily ported. ErgoDEX offers a decentralized cross-chain exchange with shared liquidity protocols. In traditional AMM DEXes like Uniswap, only instant swaps are possible. ErgoDEX platform offers atomic swaps, limit orders, partial filling, and buy-back support besides the AMM liquidity. Most of the contracts from the protocol are already tested on Ergo Mainnet and the dev team is now focusing on the user interface, software development kit, and security audit of the protocol. The developer team is small, so they are currently looking for new developers to collaborate with. Additional funding will help for the faster delivery of the protocol.\nIt\u0026rsquo;s not the first protocol on top of Ergo Platform that is ready to use in Cardano Blockchain. AgeUSD stable coin protocol is developed on Ergo and it\u0026rsquo;s up and running on Cardano Platform. Cardano light wallet Yoroi, provided by EMURGO, is already supporting ERG and SigUSD and it’s developing further for a Web3 experience on Cardano. Ergo team is continuing to produce a sustainable DeFi ecosystem with its secure and scalable design.\nMore updates are on the way, stay tuned Ergonauts! Sources:\nhttps://cardano.ideascale.com/a/dtd/ErgoDex-Plutus-Port/352410-48088\nhttps://www.wrapassets.io/\nhttps://www.reddit.com/r/cardano/comments/mv0hdw/wrapassets_announces_integration_with_sigmadex/\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-21-wrapassets-announces-integration-with-ergodex/","subtitle":null,"title":"WrapAssets announces integration with ErgoDEX!"},{"contents":"It\u0026rsquo;s time for sharing what you know about Ergo and win prizes in return! We are conducting a video competition to show what Ergo provides to its users from the users. We are getting closer to Hackathon and we need your help to spread the word about Ergo Blockchain\u0026rsquo;s benefits and properties.\nJoin us and share 650 ERGs in total!\nPrizes: 200 ERGs for 1st prize\n100 ERGs x 2 people for 2nd prize\n50 ERGs x up to 5 people for 3rd prize\nVideo Content: It could be anything about Ergo Platform, from its blockchain design or something that teach some specific on how to use Ergo, for example: Headless dApps, Ergo Playground, Ergo mixer, SigmaUSD, NFT Auction House, dApps, installing the Ergo node, mining etc..\n\u0026ldquo;To participate, you should upload your video and quote retweet or answer the competition announcement tweet with your YouTube video link\u0026rdquo;\nVideo length should be 3-25 minutes\nDeadline: 16 May 2021\nResults will be announced 1 week after the deadline.\nHave a nice month to all Ergonauts - to the Moon!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-19-youtube-video-competition/","subtitle":null,"title":"Youtube Video Competition"},{"contents":"Smart contracts are the backbone of decentralized finance. Through smart contracts, users can interact with dApps without middlemen. Blockchain design has a significant impact on the capabilities of smart contracts. Ergo Blockchain’s UTXO model allows multi-stage contracts to operate on a highly scalable network. Decentralized Finance The banking system is built solely on trust. However, this trust mechanism is a form of obligation that citizens don’t have any choice on. Banks and financial institutions produce and provide financial products such as loans or ETFs to financial markets. The value of these products is defined by what they are referring to as an actual asset, either a physical object or a contract. The credibility of value, however, is protected with our blind trust in these institutions. Governments back up these financial institutions to restore confidence, but to what degree are they trustable?\nThe problem lies elsewhere. We don’t ask if our stock is genuine or is it a fake duplicated one. Everything is working on a digital database, and we can see whether it is real. We can see our money in our bank account, but still, it doesn’t mean that it’s real. The modern monetary system works on a fractional banking system, so we know that only about 10% of the money in circulation is real money. We continue trusting financial institutions as if they hold some collateral against our money in banks. However, as we can see in history, during “banking panic runs” or “debt crises”, it’s not easy to control a vast financial system and foresee these kinds of unexpected events. The outcome of this then usually affects the personal users rather than big institutions.\nSmart contracts are therefore built for this, to let you know where your money is at all times. Whatever application you use, if smart contracts govern it, then you know how your funds are secure. That’s the beauty of a non-custodial financial system; you don’t have to give your funds to a financial institution to use their services. You can use a variety of financial services without giving up custody of your funds. You don’t have to pay abrupt fees to your bank to secure your funds. Not only that, but you can even make money using smart contracts by taking initiatives such as lending your funds or providing liquidity to markets. These are the strategies that blockchain envisions in a decentralized, peer-oriented, secure, and accessible financial system.\nMulti-Stage Contracts On Ergo So you’ve heard about smart contracts, but what are multi-stage contracts? Multi-stage contracts refer to smart contracts that are operating on a stateful level. Because Ergo uses the UTXO model (first seen in Bitcoin), it is possible to process parallelized actions on top of smart contracts. Ethereum’s Account-Based model, however, doesn’t allow such operations. The Account-Based model has its ease of use, but it also comes with a high load of operation power. Ergo’s multi-stage contracts are developed on the extended UTXO model. It’s a complex design that aims for infinite scalability; therefore, it creates more place to build complex solutions.\nFor a blockchain to contain smart contracts, it should have loops. These loops can later refer to themselves and check whether an operation is working or not. Bitcoin’s UTXO design is very primitive, and it doesn’t contain Turing-complete smart contracts. Ethereum has this capability, but it’s a primitive version of a Turing-complete language. Ergo Blockchain provides a different approach to multi-stage contracts, empowered by the extended UTXO model. Permitting a lighter network and broader use cases.\nUse Cases of Ergo  Oracles: Oracles are the messengers in and out of blockchains. They contain valuable data (e.g. price feed) so that applications work seamlessly. Ergo Blockchain’s design allows Oracle Pools, and this would help to create data hierarchies. A system of oracles that can be scored regarding their trust level is a significant phenomenon. Chainlink’s oracles aren’t capable of forming oracle pools because it’s built on the Ethereum network. Yet Chainlink recently published a whitepaper about decentralized computational networks interacting with blockchains, an idea that Ergo already working on with oracle pools.\n NIPoPoWs: Non-interactive proofs of proof of works can be used to build an interoperable blockchain ecosystem. With NIPoPoW implementation, Ergo Blockchain can interact with the smart contracts on proof of stake networks. This would open up an integrated use case between different dApps on different blockchains. Cardano is already planning to implement side chains with NIPoPoWs in collaboration with EMURGO. Limits are yet to be discovered.  Multi-Sig: Multi-Sig or Multi Provers are helpful for the reliability of smart contracts. This kind of implementation is vital for security. So that smart contracts aren’t in control of one person, but rather governed by multiple accounts. Multi-stage contracts can also be designed for punishing malicious actors trying to take control of smart contracts.\n Time Epoch: Ergo Blockchain can be designed to have timed operations. For example, during an ICO (or IDO), a code in a smart contract can provide timed release so that investors have a protective layer if the project owner isn’t delivering his/her promises. In Ethereum, programming such a kind of timed operation isn’t possible.  Parachain/Sidechains: This is a yet-to-develop area for Ergo Blockchain. It’s certainly possible, and we know that the implementation of parachains has a significant impact on scalability. Our core developer Alex Chepurnoy is about to release a paper on it, so stay tuned!\nSources:\nhttps://ergoplatform.org/docs/teaser.pdf\nhttps://ergoplatform.org/docs/ErgoScript.pdf\nMulti-Stage Contracts in the UTXO Model: Delivery by Alexander Chepurnoy \u0026amp; Amitabh Saxena\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-16-multi-stage-contracts/","subtitle":null,"title":"Multi-Stage Contracts"},{"contents":"Blockchain interoperability refers to the ability of different blockchain protocols to become compatible with one another. Achieving true blockchain interoperability among heterogeneous protocols is a prerequisite step for mainstream adoption of blockchain technology. This is true because many businesses are reluctant to build within a locked platform environment.\nIn this article, we are going to look at how Ergo platform will help in the interoperability of Cardano.\nBitcoin’s flawed UTXO Model The UTXO model has been in cryptocurrency since the conception of Bitcoin. The term UTXO relates to the amount of digital currency someone has left after executing a cryptocurrency transaction. The letters stand for unspent transaction output. In an affirmed transaction in a proven blockchain payment system, only unspent outputs can be used as inputs to a transaction. When a transaction occurs, inputs are deleted, and outputs are created as new UTXOs that may then be consumed in future transactions.\nIn the Bitcoin network, a UTXO is an amount that is conveyed to a Bitcoin address during a transaction. Consumed amounts are used independently through a transaction, and new outputs are created – one for the receiver and, if appropriate, one for the part that is left over. The value sent to the receiver becomes a new UTXO in the recipient’s address, while the change output becomes a new UTXO in the sender’s address that can be utilised in a future transaction.\nDespite some tangible benefits of the UTXO model in its employment into a framework like Bitcoin’s, there are still some fundamental limitations, notably when the model is applied to a more complex, Turing complete platform such as Ethereum. For instance, building applications on the UTXO design forces developers to limit the amount of state changed by each output. Similarly, the UTXO transaction design intrinsically is not congenial with developing smart contracts since the concept is only fitting for use in applications where each output is only owned by one person and can break down if the output can be consumed by two or more people simultaneously.\nBitcoin uses “Bitcoin script” which while being not completely useless, missed a lot of features. This is why Vitalik Buterin decided that rather than making the Bitcoin script better (which is not that simple) and develop a better UTXO model, he had to throw the inefficient system away and go with the Accounts based model. Accounts-based models are better understood in the realm of the prevailing programming ecosystems. However, discarding the UTXO model also resulted in discarding its advantages:  The Calculation is off-chain, and transactions are both results and proofs. Transaction inputs always link to existing UTXOs. It is also easy to verify if a UTXO has been spent. In the UTXO model, transactions are easily processed in parallel. In the UTXO model’s stateless environment, users are encouraged to use new addresses for every transaction, enhancing privacy to some degree.  Need for a better UTXO model - Cardano’s Extended eUTxO model There was an explicit need for a better UTXO script from a restricted UTXO model and empowering it with the brand new UTXO model itself. Additionally, there was a need for the addition of new languages that help you to build Dapps. This is what the extent of the UTXO model is for both Cardano and Ergo. It is a crucial step forward from the initial design that Satoshi Nakamoto released. Cardano endeavored to consolidate Bitcoin’s UTXO model with Ethereum’s ability to handle smart contracts into an Extended UTXO (eUTxO) accounting model. The adoption of eUTxO facilitates the implementation of smart contracts into the Cardano chain.\nAn Extended UTxO model will exist on the Settlement Layer, and the Accounting Based model will exist on the Computation Layer. An extended UTXO solution would require two pieces of additional functionality that the existing UTXO model could not provide:\n To be able to maintain the contract state. To be able to enforce that the same contract code is used along the entire sequence of transactions.  A dominant feature of the eUTxO model is that the fees needed for a valid transaction can be prophesied accurately before posting it. A unique feature not found in account-based models.\nAlternately of just having public keys (hashes) for locks and resembling signatures serving as keys, eUTxO enables arbitrary logic in the form of scripts. This arbitrary logic inspects Cardano\u0026rsquo;s ledger model extends the UTXO model to support multi-assets and smart contracts without compromising the core advantages of a UTXO model. Ergo is the first to adopt a smart contract language in the same eUTxO model as Cardano Although PoS is a very secure protocol, some smart contracts may require the consensus-theoretic security features of PoW for some part of their execution. The fully Cardano-compatible PoW can make significant contributions to all developers in the Cardano ecosystem; Ergo facilitates this PoW compatibility. The larger a dApp is if it is doing collateralized DeFi, the larger the stake it has at its disposition, and since this is not yet fully resolved in the Proof of Stake consensus, it is a weak point. Ergo brings the proven confidence of PoW, with enough security for all more complex DApps implementations on top of the standard UTxO model rather than translating very natural cryptographic concepts integrated with PoW to PoS, where the game theory implications of the protocol are entirely different.\nErgo is working on an interoperability protocol that is not proof-based, which is not easy to blend with multiple blockchains but has a federated approach using reputation at stake. Opening up the entire Cardano ecosystem to interoperability with the Solana blockchain, chosen by large exchanges such as OKEX or Binance.\nWhile all other blockchains will not copy all these advantages of the eUTxO model, thanks to interoperability, other projects or DApps will be able to borrow these unique advantages by bringing their tokens to Ergo. The cryptography exercised by the Ergo protocol is more advanced, running on sigma protocols where cryptographic signatures are highly flexible and composable.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-08-heres-how-ergo-seeks-to-boost-interoperability-for-cardanos-eutxo-model/","subtitle":null,"title":"Here’s how Ergo seeks to boost interoperability for Cardano’s eUTxO model "},{"contents":"Trustless Exchange models vary in their use cases e.g AMMs for low liquidity pairs and Order Books for high liquidity pairs. But you don’t have to choose anymore because ErgoDEX can bring both - and with partial filling support!\nDecentralized Exchanges AMMs(Automated Market Maker) is a type of market making algorithm, used in Decentralized Exchanges (DEXs) which allows participants to add liquidity in pairs and earn yields from transactions. AMM type DEXs have seen tremendous growth in recent months. Allowing anyone to set up a liquidity pool and make their own initial DEX offerings (IDOs) - with everyone eligible to participate.\nHowever, numerous scams occurred as gas prices soared and retail investors were both unprotected and sidelined. Order Book based exchanges are seen as a more affordable choice due to their low fees. However, they are uninteresting for low liquidity markets because in Order Book type, market makers have a lot of power, therefore, are more prone to manipulation for the short term. The ErgoDEX model can provide a more sophisticated decentralized model, with complex features such as partial filling support and buyback support during or after an ICO, adding an extra layer of security and protecting the buyer from exit scams and rug pulls. Thanks to its eUTxO based model, ErgoDEX can be designed both as AMM and as Order Book type, utilizing the same underlying liquidity pool, This comes in contrast to the Account-Based model of Ethereum or the rough UTxO model used by Bitcoin. In this sense, Ergo aims to combine the best of both worlds.\nSafe ICO Garden During an ICO, the buyer first attempts to send his funds to the seller/ICO contract. However as we\u0026rsquo;ve seen frequently, pool admins can drain the funds and the project could disappear into thin air at any moment. This is a huge issue in regards to buyers’ trust and security.\nErgo aims to solve this by encoding buyback orders so that funds are released within a predefined timeframe and the buyer has an ample opportunity to get out with a minimal loss. With the features provided by ErgoDEX buyers have more control, the system will root out malicious actors and attract real developers and project creators. ErgoDEX can sustain a healthy environment both for IDOs and investors.\nLiquidity Pool Everyone can set up a liquidity pool in Ergo\u0026rsquo;s UTxO model and it will work similarly to Ethereum’s current implementation. Liquidity pools will be represented with a UTxO identified by a unique NFT contained within. A pool bootstrapping contract will ensure the NFT is created. The most basic primitive of decentral finance is being able to execute exchange orders without the need of middlemen. ErgoSwap allows participants to interact directly with smart contracts and have full control of their funds. Ergo\u0026rsquo;s atomic swap implementation can make cross-chain swaps with coins like Bitcoin and Cardano flawlessly and without the need for gateways, token wrapping, and likewise solutions. Fully non-custodial inter-chain swaps and liquidity pools are completely possible and scalability wouldn’t be an issue with parachain/sidechain like solutions.\nWe have already launched SigUSD, Ergo Platform\u0026rsquo;s algorithmic stable coin, we’ve begun setting up oracles pools with ERG and ADA so we are building the foundational blocks of a decentral blockchain ecosystem. Since our beginning, it was our aim to be decentralized, scalable, and secure. Now, after years of building, we are reaching maturity. With the core design coming to an end, now a variety of use cases can be implemented on Ergo. This year will be very demanding for us as there is a lot to achieve, but we are working tirelessly to ensure we can do so without delays or issues.\nMore developments are coming soon, so stay tuned for more updates\nSources:\nhttps://github.com/ergoplatform/eips/blob/eip14/eip-0014.md\nhttps://ergoplatform.org/en/blog/2020-12-02-new-ergo-smart-dex-orders-with-buyback-guarantees/\nhttps://github.com/ergoplatform/ergo/wiki/An-ICO-Example-On-Top-Of-Ergo\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-04-06-ergodex-model-amm-and-order-book-type-exchange/","subtitle":null,"title":"ErgoDEX Model - AMM and Order Book Type Exchange"},{"contents":"It is no secret that the Ethereum ecosystem is broken, especially with the platform being plagued with rising congestion and gas fee issues on a near-daily basis. And while the altcoin’s dev team has been promising big things for many months now, the fact of the matter remains is that an increasing number of Decentralized Finance (DeFi) projects built atop the ecosystem — such as Harvest Finance, Yield.App, Value DeFi — have continued to expand their operations to other blockchains.\nEnter, ERGO, an advanced UTXO-based blockchain protocol that has been built to serve as an efficient and secure financial contracts platform offering its users a radical twist to traditional DeFi functionality. It provides a clear solution for Ether’s Gas problem, which in essence, is not really a prerequisite for a smart contract platform if a scripting language is rich enough.\nErgo’s native programming language — aka ErgoScript — enables the development of Turing complete contracts that completely bypass the need for any gas fee while providing other peripheral benefits such as estimation of script complexity before execution, a facet that helps in the active prevention of DoS attacks.\nA closer look at what ERGO brings to the table The number of use cases associated with the decentralized financial (DeFi) ecosystem has been growing at a rapid pace over the last few months, with stablecoins, non-fungible tokens (NFTs), and oracle pools being some of the many offshoots to emerge from the fast-evolving space recently.\nERGO’s unique proof of work (PoW) architecture — called Autokylos — coupled with its Turing complete smart contracts ensures that users are provided with seamless access to a number of advanced features including zero-knowledge proofs, adjustable block size, etc.\nTo further elaborate on what sets Autolykos apart from the rest of the fray is the fact that while most existing PoW protocols feature certain intrinsic drawbacks — for example, they allow ASIC-miners to produce blocks substantially faster than regular CPU-GPU miners — Autokylos does not feature any such potential point of failure, thereby eliminating the advantage that ASICs traditionally hold.\nNext-level security privacy and decentralization One of the core issues currently affecting today’s crypto ecosystem is that of individual privacy, especially when talking about digital currency transactions. However, implementing such measures can not only be quite costly but also require a trusted setup.\nThat said, ERGO’s native Sigma architecture makes it possible to do such things and much more since it not only allows for a high degree of privacy but also ensuring that the ecosystem’s security is not compromised even in the slightest.\nFor example, ErgoMixer is a service that can mesh a number of different streams of potentially identifiable cryptos, allowing for the trustless mixing of funds. As a result, users can send their tokens worldwide without anyone knowing the details of their personal transactions.\nBacked by some of the industry’s best The ERGO team features some of the brightest minds operating within the global crypto ecosystem today. Alexander Chepurnoy — aka Kushti — the co-founder of ERGO possesses more than 15 years in software development. Prior to his work with ERGO he served as the co-founder of smartcontract.com (later rebranded as Chainlink) as well as a core developer for the open-source cryptocurrency and payment network NXT.\nDmitry Meshkov, co-founder and a core dev team member for ERGO, holds a Ph.D. in physics and possesses more than a decade worth of experience in software development. In the past, he has worked for a number of prominent crypto projects including Scorex and was even an R\u0026amp;D researcher at IOHK, with his prime focus being the creation of a blockchain prototyping framework.\nOther core members of the ERGO team include Alexander Slesarenko, Robert Kornacki, and Mike Askarin, all of whom have previously worked for established tech players including Huawei, Siemens Business Services, Gazprom, and Yandex.\nERGO’s has repeatedly been praised for its novel design and immense potential by many from within the industry, with Charles Hoskinson, co-founder of Ethereum and Cardano, hailing Ergo as \u0026ldquo;one of the most interesting and exciting projects in the crypto space\u0026rdquo;. Not only that, Hoskinson has also time and again referred to Chepurnoy as his “favorite technologist”.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021_03_26_eth_vs_erg/","subtitle":null,"title":"Ergo seeks to fix what Ethereum can’t… Here’s how"},{"contents":"The competition prompted some great entries. 2,000 ERG in prizes were ultimately distributed via bids to the winners.\nJust over a month ago we announced the Ergo Digital Art Competition, celebrating the launch of NFTs and the Ergo Auction house on the Ergo blockchain.\nThe competition resulted in some amazing entries, though sadly not all were eligible – either because they did not meet the guidelines, or were not identified as entries at all. For example, the creator of this beautiful artwork would have won a prize for sure, but it was incorrectly labelled as being entered in the Animated category. (Fortunately, given that the same artist won the Crypto prize, we don’t think they will be too disappointed.)\nHere are the winning entries for each category. Prizes have already been distributed by placing bids on the NFTs. Congratulations to the winners, and please remember that the judge’s decision – and more importantly, the blockchain transaction of each bid – is final in all cases. Crypto: 1,000 ERG The Wizard of Ergo took the prize for the Crypto category. Hopefully it should be clear why. One look at those rich robes, a beard that must have taken years to cultivate, and a very fine hat show that this is a man who can cast a serious smart contract.\nThe Wizard of Ergo wins the competition.\nAlgorithmic: 500 ERG A personal favourite, Only You Know What You’re Going To Do Next is based on a creation by a Russian artist. But the digital reimagination of the oil painting is staggeringly different to the original, having been processed by AI and modified in various other ways. Great job!\nThe digital version vs the original.\nAnimated (500 ERG) Finally, ERGold wins the animated category, with its mesmerising shifting patterns (static version below).\nERGold’s textures and shifting patterns win the animated category.\nAlso worth a mention\u0026hellip; There were, of course, many other entries that couldn’t win, much as they deserved a prize. One worth a mention is this proof of concept for the Cryptnids NFT card game. It has a fun, almost CryptoPunk-like quality to it. Although the prizes were already allocated, this one got a cheeky bid of a few ERG too, just for the chance of winning a slice of what could turn out to be crypto history. Good luck with the project, guys, and we look forward to seeing how the game develops.\nKing Krypto Kame Klose Again, a big congratulations to the winners. And remember, there’s nothing to stop other buyers coming in and making higher bids, so the prizes already allocated are the minimum the artists will receive.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-03-18-ergo-art-competition-winners-announced/","subtitle":null,"title":"Ergo art competition: Winners Announced!"},{"contents":"With the recent launch of the bootstrap period of the SigUSD stablecoin, the Ergo community participation rates have exceeded our expectation. This can be clearly seen by the total value locked (TVL) of over 6 million dollars worth of Ergs within the dApp as of writing. We at the Ergo Foundation have been closely monitoring how the community is using the SigUSD dApp, understanding the mechanics, and all of the different factors at play.\nFront-running Identified Shortly after the dApp went live, we noticed a large whale was going in and out of SigUSD at a semi-regular schedule. After doing some research into the patterns this whale was using, it was identified that he was front-running the oracle price in an attempt to profit.\nThis type of oracle front-running has happened before in the Ethereum DeFi ecosystem, and is a factor at play because oracle datapoint updates can never be 100% immediate. There must always be some amount of delay before a datapoint is accepted into a block, which opens up the ability for frontrunning to exist.\nIn our scenario, the whale was taking advantage of this by minting SigUSD early during the “Live Epoch” period of the oracle pool (once it was reasonably clear what the upcoming new Erg/USD datapoint would be) and would profit on the price difference once the oracle pool finalized the datapoint. You can take a look at the whale’s address here (who appears to be an early miner in the Ergo ecosystem: https://explorer.ergoplatform.com/en/addresses/9hyDXH72HoNTiG2pvxFQwxAhWBU8CrbvwtJDtnYoa4jfpaSk1d3)\nPre-Launch Front-Running Mitigation Strategy When designing the protocol underneath SigUSD (named the AgeUSD protocol), it was understood that frontrunning could be an issue. As such, a mechanism was put in place in the protocol to combat this; that being fees for minting and redeeming. In short, the fees for minting/redeeming SigUSD act as a barrier which prevents front-running from being profitable. This front-running barrier can be calculated by simply adding the fee for minting SigUSD plus the fee for redeeming SigUSD.\nFor the deployed SigUSD dApp the fees were set to be a low 1% per mint/redeem by the deployer (DarkSideBrrrrr) to provide the community a seamless experience for acquiring SigUSD/SigRSV without having to pay a lot extra. This decision for low fees however also made it more attractive for a greedy whale to abuse and attempt to front-run the dApp for profit. With only 1% fee on each action, this means that the front-running barrier ends up being 1% + 1%.\nWith an up-and-coming Blockchain like Ergo with a decent amount of price volatility, these 1% fees have been shown to be insufficient by the whale. Thus it was agreed upon that this front-running issue needed to be addressed immediately.\nPost-Launch Front-Running Mitigation Strategy In order to protect Erg holders from being gamed by the front-running the whale was performing, the oracle pool was stopped in order to have the most fair way possible to upgrade the protocol. This means that the oracle rate for Erg/USD has been frozen at $3.16143 as can be seen in the SigmaUSD web dApp.\nThis allows all SigmaUSD and SigmaRSV holders to redeem their tokens for Ergs safely. If the rate was not frozen, then the users who read this post first would be able to exit cleanly at the cost of other users who would continue to be negatively affected. As such, all SigmaUSD holders can redeem their tokens immediately, which will also allow all SigmaRSV holders to redeem their tokens as well.\nMoving forward, this provides us with an opportunity to strike a new balance for SigmaUSD and address these issues with a multi-pronged approach.\nThe Ergo Foundation is recommending that community member DarksideBrrrr issues a new deployment of SigmaUSD with a 2% fee. This will double the barrier for all types of frontrunning any whale may wish to try to take advantage of.\nFurthermore, the goal is to prevent the currently used risk-free front-running in its entirety. As such new oracle pools will be deployed with a “hardening upgrade”.\nThe first part of this upgrade involves setting a cap for price variations between datapoint updates. In other words, because front-running will be prevented by 2% fees (a 4% front-running barrier), datapoint updates can now be smoothed-out to only move up/down in 4% increments. (With very sharp movements allowed as to not prevent real major market movements from taking place). This change prevents the front-running technique that the whale was using.\nFurthermore we also want to do even better and improve the experience for all oracle-based dApps while we’re making such large changes. As such we will be doubling the speed of the oracle pool datapoint posting. Originally being 60 minutes, the posting schedule is being sped up to 30 minutes.\nThis naturally works in tandem with the smoothed-out price updates thereby providing higher quality, fresher, and more useful on-chain data points.\nGoing Forward With novel updates to both oracle pools and the SigmaUSD dApp, the ecosystem and all Ergonauts are able to feel assured that the ecosystem is moving forward in the right direction.\nThe current plan is to launch the new oracle pool update within the next week, and we expect DarkSideBrrrr to be able to deploy a new instance of SigmaUSD shortly after that.\nThe Ergo community is one of the most valuable assets that we have, and we intend this transition to go as smoothly as possible so that everyone can get back to enjoying using SigmaUSD and SigmaRSV. We will keep you up to date as things progress in the coming week.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021_03_04-finding-right-balance/","subtitle":null,"title":"Finding The Right Balance"},{"contents":"","link":"https://ergoplatform.org/en/blog/2021_02_26-sigmausd-released/","permalink":"https://ergoplatform.org/en/news/2021-02-28-sigmausd-ergos-community-deployed-stablecoin-is-live/","subtitle":"The SigmaUSD stablecoin has been deployed by the community and is live and ready for all Ergonauts to use at https://sigmausd.io/","title":"SigmaUSD - Ergo’s Community Deployed Stablecoin Is Live!"},{"contents":"The SigmaUSD stablecoin has been deployed by the community and is live and ready for all Ergonauts to use at https://sigmausd.io/\nAfter several months of hearing whispers about a stablecoin being built and teasers being thrown around, the Ergo community enjoyed an information-packed Ergo Summit 2021 which explained everything they needed to know about the AgeUSD Protocol; a novel crypto-backed algorithmic stablecoin protocol that has been created in joint partnership by the Ergo Foundation, EMURGO, and IOG on top of the Ergo Blockchain.\nIn addition to several talks about the protocol itself, the specs, smart contracts, headless dApp (off-chain code), and a CLI app for testing, were all provided to the community at the Ergo Summit 2021. This release packed together all of the design \u0026amp; theoretical knowledge with the tools to deploy the dApp on-chain.\nWith many discussions across Twitter, Discord, Telegram, and the Ergo Forum, the community came to an agreement about how they wanted to move forward with deploying the dApp themselves.\nA community-wide vote was held to decide on the exact names for the stablecoin and the reservecoin (the other coin part of the AgeUSD protocol). After many days of back-and-forth on what would make the most sense, the community landed on “SigmaUSD” for the stablecoin and “SigmaRSV” for the reservecoin.\nFor those who are new to the Ergo ecosystem, “Sigma” refers to the core of what powers Ergo’s cryptography \u0026amp; smart contracts, that being Sigma Protocols. No other blockchain in the cryptocurrency sphere uses Sigma Protocols, and thus this one of the strong selling points of what makes Ergo extremely unique. They enable privacy-preserving primitives to be used for cheap by anyone in the ecosystem, which has future potential for business/enterprise use cases, and more.\nThe Ergo ecosystem has a growing trend of Sigma Protocol-inspired themes with recently released projects such as the Ergo dApp explorer, The Sigmaverse. Thus the community-chosen SigmaUSD fits perfectly in place, and is a testament to the community’s appreciation for all of the impressive tech which is embedded within Ergo itself.\nJumping back to the deployment itself, long-time community member “DarkSideOfBrrrrr” announced shortly after Ergo Summit 2021 that he would deploy the smart contract on-chain himself. He ensured that he would keep the contracts unaltered and be transparent about the process. (These claims have since been verified by community developers once the contract was deployed on Feb. 25th)\nA dApp isn’t complete with only a bare-bones smart contract available on-chain, thus community developer “Anon_real” jumped into the ring shortly after DarkSIdeOfBrrrr’s announcement and agreed to build a frontend web dApp to target his deployment. Community member “Glasgowm” also took part by working with Anon_real to deploy the frontend web dApp for all Ergonauts to easily access and use.\nAfter working on all of these pieces of the puzzle for the next month (while keeping the community updated on their progress), DarkSideOfBrrrrr officially announced and deployed the final version of SigmaUSD on February 25th precisely on Block #432917. (The exact transaction can be found here on the explorer)\nWithin a few hours , Anon_real and Glasgowm worked to make the required edits to the frontend to target the deployed SigmaUSD dApp, package it all up, and officially launch it publicly for the whole community. As such, thanks to all of their hard work, the SigmaUSD stablecoin is now live and available for all to use: https://sigmausd.io/\nThis marks a historic moment as the first major DeFi dApp to be launched in the Ergo ecosystem. As such, SigmaUSD and SigmaRSV act as the very first DeFi primitives available for all Ergonauts. Furthermore , as these two tokens are 100% native assets they are composable with any future DeFi dApp. This thus allows dApp developers to expose the ability to go short/long Ergs in any dApp they are building without any extra work. (Reference the explanations/presentation slides in the github repo for more information about how these tokens and the protocol as a whole work)\nErgonauts all over the world were so thrilled by the release of the SigmaUSD dApp that it managed to accrue over $1.5million dollars worth of Ergs in the reserves within 12 hours of the website launch.\nThe Ergo DeFi ecosystem is just beginning to bloom, and it is clear that with so much interest in this first DeFi dApp we are only going to see more and more being developed and launched. With so much excitement coming out within just the first two months of 2021, this year looks like it’s going to be one to remember for Ergo and all Ergonauts.\nWhat are you waiting for? Head to https://sigmausd.io/ and see what all of the Ergonauts are raving about for yourself.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021_02_26-sigmausd-released/","subtitle":null,"title":"SigmaUSD - Ergo’s Community Deployed Stablecoin Is Live!"},{"contents":"","link":"https://twitter.com/BitMartExchange/status/1364753412630454280","permalink":"https://ergoplatform.org/en/news/2021-02-28-bitmart-has-listed-ergo/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on BitMart Exchange","title":"BitMart has listed Ergo"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/7.0.0","permalink":"https://ergoplatform.org/en/news/2021-02-21-ergo-explorer-backend-7-0-0-released/","subtitle":"Support for detailed UTXO queries","title":"Ergo explorer backend 7.0.0 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v4.0.7","permalink":"https://ergoplatform.org/en/news/2021-02-19-ergo-mainnet-4-0-7-released/","subtitle":"#1296 : Docker container description reworked implementation for #856 : box selector settings moved to config re-announcing of new blocks reverted (it may cause node being banned by most of its peers)","title":"Ergo Mainnet 4.0.7 released"},{"contents":"","link":"https://www.youtube.com/watch?v=3iFf3aBbw1I","permalink":"https://ergoplatform.org/en/news/2021-02-18-2020-year-in-review-ergo-cast-episode-6/","subtitle":"Following the short hiatus for the Summit, the Ergo Cast has returned to pass-down all fruitful news which Ergo has to offer!","title":"2020, Year in Review - Ergo Cast Episode #6"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v4.0.5","permalink":"https://ergoplatform.org/en/news/2021-02-18-ergo-mainnet-4-0-5-released/","subtitle":"#1281 : description for wallet/boxes/collect added #1289 : the node is re-announcing new blocks received from other peers #1288: API method to get Merkle proof for a transaction added more log output for wallet failures fix for #1294","title":"Ergo Mainnet 4.0.5 released"},{"contents":"","link":"https://www.youtube.com/watch?v=Cc3n8CjaGPE","permalink":"https://ergoplatform.org/en/news/2021-02-16-ergomixer-tutorial-taking-fire-version-3-0-1-above/","subtitle":"Join us in another hands-on of wrestling the beast, with Anon2020's attuned ErgoMixer.","title":" ErgoMixer Tutorial - Taking Fire - Version 3.0.1 \u0026 Above"},{"contents":"","link":"https://support.bmx.fund/hc/en-us/articles/1260802411229","permalink":"https://ergoplatform.org/en/news/2021-02-16-ergo-will-be-listed-on-bitmart-on-feb-24th/","subtitle":"BitMart will list Ergo (ERG) on our digital assets platform on February 24, 2021. The following trading pairs will be available: ERG/BTC, ERG/USDT","title":"Ergo will be listed on BitMart on Feb, 24th"},{"contents":"","link":"https://ergoplatform.org/en/blog/2021-02-12-2000-erg-in-prizes-to-be-won-in-the-ergo-digital-art-competition/","permalink":"https://ergoplatform.org/en/news/2021-02-12-2000-erg-in-prizes-to-be-won-in-the-ergo-digital-art-competition/","subtitle":"Create an original piece of digital art and list it for sale on the Ergo NFT Marketplace. The winning entry will receive 1000 ERG, with two further prizes of 500 ERG.","title":"2000 ERG in Prizes to be Won in the Ergo Digital Art Competition!"},{"contents":"Create an original piece of digital art and list it for sale on the Ergo NFT Marketplace. The winning entry will receive 1000 ERG, with two further prizes of 500 ERG.\nDigital art and NFTs are hot trends in the blockchain space, and Ergo has pioneered new approaches to minting NFTs. To celebrate the digital art sector and raise awareness of Ergo’s capabilities, we’re holding a digital art competition.\nThe competition will include three categories:\n Any crypto-themed artwork, not necessarily limited to Ergo (prize: 1000 ERG) Animated artwork on any theme, not necessarily limited to crypto (prize: 500 ERG) Algorithmic/generative art on any theme (prize: 500 ERG)  To enter the competition:\n Create an original work of digital art for one of the three categories. Create an NFT representing this work of art (ErgoUtils can be used for this). Assistance may be found on the Ergo Discord. List the NFT for sale on the Ergo Auction House NFT Marketplace, giving it whatever name you want. Your auction should last at least till the end of March 2021. To identify entries, the description on the Auction House listing should include the words “Competition Entry:” followed by the category, either “Crypto”, “Animated” or “Algorithmic”, and then a description of your artwork. E.g. “Competition Entry: Algorithmic. This is an AI-generated image of a forest.” The image must be displayed upon clicking the thumbnail alongside the listing price – it must not be contained solely in a secondary link.  The deadline for entries to be listed is 14 March 2021. The results will be announced towards the end of the month. Prizes will be distributed by placing bids on each artwork. If higher bids are subsequently placed by other bidders, the artist will receive these funds instead. Each prize is therefore the minimum the winning artist will receive.\nThe judges’ decision is final, including the decision not to award a prize/make a bid if no artwork meets the required quality.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-02-12-2000-erg-in-prizes-to-be-won-in-the-ergo-digital-art-competition/","subtitle":null,"title":"2000 ERG in Prizes to be Won in the Ergo Digital Art Competition!"},{"contents":"","link":"https://ergoplatform.org/en/blog/2021-02-05-building-ergo-how-the-ageusd-stablecoin-works/","permalink":"https://ergoplatform.org/en/news/2021-02-11-building-ergo-how-the-ageusd-stablecoin-works/","subtitle":"The elegant design avoids some of the complexity and potential problems of other approaches to creating decentralised, collateralised stablecoins.","title":" Building Ergo: How the AgeUSD stablecoin works"},{"contents":"","link":"https://github.com/doktor83/SRBMiner-Multi/releases/tag/0.6.6","permalink":"https://ergoplatform.org/en/news/2021-02-09-lots-of-improvements-and-fixes-for-amd-gpu-cpu-miner-for-autolykos-v2/","subtitle":"SRBMiner-MULTI CPU \u0026 AMD GPU Miner 0.6.6 Win64 \u0026 Linux","title":"Lots of improvements and fixes for AMD GPU \u0026 CPU miner for Autolykos v2"},{"contents":"","link":"https://tradeogre.com/exchange/BTC-ERG","permalink":"https://ergoplatform.org/en/news/2021-02-08-ergo-erg-is-listed-on-tradeogre/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on TradeOgre Exchange","title":"ERGO ($ERG) is listed on TradeOgre"},{"contents":"","link":"https://nanominer.org","permalink":"https://ergoplatform.org/en/news/2021-02-06-nanominer-v3-2-0-release-05-02-21/","subtitle":"Added Autolykos algorithm support for Ergo coin. Fee is 5%. Needs at least 3 GB GPU. Suppports Nvidia and AMD","title":"Nanominer v3.2.0 / release 05.02.21"},{"contents":"","link":"https://github.com/doktor83/SRBMiner-Multi/releases/tag/0.6.5","permalink":"https://ergoplatform.org/en/news/2021-02-05-huge-performance-increase-on-autolykos-v-2-algorithm-on-amd-gpu-and-cpu/","subtitle":"SRBMiner-MULTI CPU \u0026 AMD GPU Miner 0.6.5 Win64 \u0026 Linux","title":"Huge performance increase on Autolykos v.2 algorithm on AMD GPU and CPU"},{"contents":"The elegant design avoids some of the complexity and potential problems of other approaches to creating decentralised, collateralised stablecoins.\nAs part of an ongoing joint initiative, Ergo and Cardano unveiled the design of a new stablecoin at the online Ergo Summit event, held on 23 January.\nNamed AgeUSD and inspired by StatiCoin, the stablecoin is the result of a collaboration between research and development teams across three organisations: IOG (IOHK), the company leading Cardano core development; Ergo Foundation; and blockchain technology company, Emurgo, also one of the founding members of Cardano.\nHow does it work?\nAgeUSD requires just two blockchain assets and two types of users:\n Reserve Providers, who submit ERG to the AgeUSD dApp’s reserve, thereby minting ReserveCoins AgeUSD Users, who submit ERG to the dApp and receive Stablecoins in return  AgeUSD are only minted for users if there are sufficient reserves in the dApp, deposited by Reserve Providers.\nAgeUSD holders can redeem their coins for the equivalent value in ERG at any time. However, ReserveCoins represent a proportion of the reserves held in the dApp (rather than an absolute fiat-equivalent amount). Reserve Providers can only redeem their tokens if the reserves cover the value of all issued stablecoins (multiplied by the minimum reserve ratio).\nThus Reserve Providers take on the responsibility and risk of ensuring that all AgeUSD in circulation are always fully collateralised. In return they receive the potential gains that are secured if the value of the collateral they deposit (ERG) increases. In this respect, becoming a Reserve Provider is like taking a leveraged long position on ERG, and enables regular AgeUSD users to hold and use stablecoins without worrying about volatility. In the event of a market downturn, Reserve Providers do not undergo liquidation and can choose to hold out for better market conditions before redeeming their tokens.\nOperation of the AgeUSD dApp is intentionally straightforward, with just four main actions in the allowed:\n Mint StableCoin Redeem StableCoin Mint ReserveCoin Redeem ReserveCoin  Each action incurs a small fee in ERG – provisionally set at 1% – which is added to the dApp reserve. A further 0.25% is optionally paid to the frontend implementor who creates the interface for minting and redeeming tokens.\n‘It’s a simple, elegant design,’ comments Ergo’s founder and lead developer, Alexander Chepurnoy. ‘Its economic model maintains the conservative settings for collateral reserves and avoids the need for liquidations. Along with that, it supports a fully decentralised stablecoin emission setup. Thus, AgeUSD will offer the world a stable, simple, and decentralised stablecoin.'\nAfter launch, scheduled for mid-February, AgeUSD will be available via the Sigmaverse, Ergo’s dApp portal. To find out more, read the documentation at https://github.com/Emurgo/age-usd.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-02-05-building-ergo-how-the-ageusd-stablecoin-works/","subtitle":null,"title":"Building Ergo: How the AgeUSD stablecoin works"},{"contents":"","link":"https://github.com/mhssamadani/Autolykos2_NV_Miner/releases/tag/1.1.0","permalink":"https://ergoplatform.org/en/news/2021-02-04-nvminer-1-1-0-with-improved-hashrate-3-4x-by-mhs_sam/","subtitle":"Windows and Linux version","title":"NVMiner 1.1.0 with improved hashrate(3-4x) by Mhs_sam"},{"contents":"","link":"https://www.ergoforum.org/t/hardening-hard-fork-post-mortem/599","permalink":"https://ergoplatform.org/en/news/2021-02-03-hardening-hard-fork-post-mortem/","subtitle":"Description of what happened today during the hard fork","title":"“Hardening” Hard Fork Post-Mortem"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v4.0.4","permalink":"https://ergoplatform.org/en/news/2021-02-02-ergo-mainnet-4-0-4-release/","subtitle":"MANDATORY UPDATE!  This version contains fixes for protocol version 2 initial difficulty value and recalculation rule.","title":"Ergo Mainnet 4.0.4 Release"},{"contents":"","link":"https://ergo.nanopool.org","permalink":"https://ergoplatform.org/en/news/2021-02-02-you-can-mine-ergo-coin-with-us-after-the-hardening-protocol-upgrade-at-block-417-792-around-16-00-february-2th/","subtitle":"Join Nanopool","title":"\"You can mine ERGO coin with us after \"The Hardening\" protocol upgrade at block 417,792 around 16:00 February 2th\""},{"contents":"","link":"https://666pool.cn","permalink":"https://ergoplatform.org/en/news/2021-02-01-ergo-added-to-https-666pool-cn-mining-pool/","subtitle":"\"Our Ergo pool is online, testnet for now, will switch to mainnet right after the hard fork. Pool link: www.666pool.cn, mining endpoint is ergo.666pool.cn:9556\"","title":"Ergo added to https://666pool.cn mining pool"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v4.0.3","permalink":"https://ergoplatform.org/en/news/2021-02-01-ergo-mainnet-4-0-3-released/","subtitle":"#1248 /node/shutdown method to shut the node down #1246 API method to collect the boxes for external applications (/wallet/boxes/collect) #991 API methods for fee estimation (/transactions/poolHistogram, /transactions/getFee, /transactions/waitTime) #1263 API method to get scan-related transactions (/wallet/transactionsByScanId) #1259 Node panel updated Also, mining rewards can be recognized and be added to the wallet now with wallet being locked.","title":"Ergo Mainnet 4.0.3 released"},{"contents":"","link":"https://woolypooly.medium.com/how-to-mine-ergo-full-mining-guide-f9770b476c7","permalink":"https://ergoplatform.org/en/news/2021-02-01-ergo-is-on-http-woolypooly-com-mining-pool/","subtitle":"Mining guide","title":"Ergo is on https://WoolyPooly.com mining pool!"},{"contents":"","link":"https://ergo.herominers.com/#how-to-mine-ergo-erg","permalink":"https://ergoplatform.org/en/news/2021-01-31-autolykos-v-2-added-to-srbminer-multi-cpu-gpu-miner/","subtitle":"How to mine Ergo by Hero Miners","title":"Autolykos v.2 added to SRBMiner-Multi CPU \u0026 GPU Miner"},{"contents":"","link":"https://github.com/Emurgo/age-usd","permalink":"https://ergoplatform.org/en/news/2021-01-29-the-ageusd-protocol-specifications-smart-contracts-off-chain-code/","subtitle":"Have a good weekend!","title":"The AgeUSD protocol specifications/smart contracts/off-chain code"},{"contents":"","link":"https://www.ergoforum.org/t/mining-ergo-before-and-after-the-hardening-upgrade-by-mhs-sam/572","permalink":"https://ergoplatform.org/en/news/2021-01-29-mining-ergo-before-and-after-the-hardening-upgrade-by-mhs_sam/","subtitle":"Reminder, The Hardening Upgrade is coming on block 417,792","title":"Mining Ergo before and after the Hardening Upgrade by Mhs_sam"},{"contents":"","link":"https://github.com/anon-real/ergo-js-template","permalink":"https://ergoplatform.org/en/news/2021-01-27-ergo-js-template/","subtitle":"Entry Point to Ergo dApp Development","title":"Ergo JS Template"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1353777390330253313","permalink":"https://ergoplatform.org/en/news/2021-01-27-ageusd-instantiation-will-be-launched-in-about-two-weeks-by-ergo-community/","subtitle":"AgeUSD is a novel crypto-backed algorithmic stablecoin protocol that has been created in joint partnership by the Ergo Foundation, EMURGO, and IOG on top of the Ergo Blockchain.","title":"AgeUSD instantiation will be launched in about two weeks by Ergo community!"},{"contents":"","link":"https://www.ergoforum.org/t/ergo-summit-2021-full-video-links-to-chapters-included/559","permalink":"https://ergoplatform.org/en/news/2021-01-24-ergo-summit-2021-full-video/","subtitle":"Links to chapters included","title":"Ergo Summit 2021 - Full video"},{"contents":"","link":"https://github.com/Emurgo/age-usd","permalink":"https://ergoplatform.org/en/news/2021-01-24-robert-kornacki-announcing-the-release-of-the-ageusd-stablecoin-protocol/","subtitle":"AgeUSD is a novel crypto-backed stablecoin protocol that has been created in joint partnership by the Ergo Foundation, EMURGO, and IOG on top of the Ergo Blockchain","title":"Robert Kornacki announcing The Release Of The AgeUSD Stablecoin Protocol!"},{"contents":"","link":"https://www.youtube.com/watch?v=zG-rxMCDIa0\u0026ab_channel=ErgoPlatform","permalink":"https://ergoplatform.org/en/news/2021-01-23-weve-just-released-the-ergo-summit-schedule-check-it-out-and-get-ready-for-the-most-ergo-packed-day-of-2021/","subtitle":"Ergo Summit 2021 - Entering The New Era - Announcing AgeUSD \u0026 The Hardening Upgrade","title":"We’ve just released the Ergo Summit Schedule! Check it out and get ready for the most Ergo-packed day of 2021"},{"contents":"The concept of ‘marginal gains’ enables Ergo to push the capacity of first-generation blockchain technology further than other platforms.\nWith the explosion of interest in DeFi, perhaps the most compelling use case for smart contract blockchain platforms, one thing has become abundantly clear: blockchain is not ready for DeFi.\nDeFi dApps have overloaded the Ethereum blockchain, causing long delays and soaring fees for transactions. Ethereum and many other platforms besides have researched and implemented fixes to address the lack of capacity. However, all of the solutions are imperfect in one way or another. Larger blocks are the obvious but clumsy fix, resulting in centralisation as fewer miners can afford the bandwidth, storage and CPU cycles to participate. Reducing the number of block validators – another approach taken to increase throughput – also necessarily centralises the blockchain. Sharding, while potentially very promising, has yet to be implemented successfully, and in some proposed implementations, breaks atomic composability because shards cannot communicate seamlessly.\nThus many of the ways projects seek to ensure their blockchains are fit for purpose result in greater centralisation or loss of critical functionality. Marginal gains\nErgo’s developers are watching developments in the DeFi space closely, especially some of the proposals that aim to scale blockchains while maintaining security, decentralisation and atomic composability. In the meantime, there is much that can be done to improve blockchain capacity. The concept of ‘marginal gains’, often applied in sports, is useful: a number of small, incremental gains in different areas all add up to a substantial compound effect.\nFor Ergo, there are several design principles and choices that have been taken to realise efficiencies in different areas.\n Storage rent is akin to ‘on-chain garbage collection’, reducing blockchain bloat and lowering the long-term costs of mining, improving economic sustainability. NiPoPoWs (non-interactive proof-of-proof-of-works) enable mobile SPV clients and even lite full nodes, again reducing the barriers to maintaining the network and improving decentralisation. A smart contract language that is finite and clear, without the messiness and possible chain bloat of Turing-complete languages and their unintended consequences. Sigma Protocols, which allow for powerful cryptographic use cases, implemented elegantly and efficiently.  As DeFi emerges as a major use case for blockchain, the stakes could not be higher. Blockchains that are fit for purpose will thrive; those that do not allow the functionality to sustain the required transaction load simply cannot establish a foothold. At the same time moving too fast and implementing untested technology is equally dangerous. There are efficiencies to be gained in first-generation blockchains. Ergo continues to prioritise this approach while researching future upgrades.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-01-20-how-ergo-makes-the-most-of-blockchain/","subtitle":null,"title":"How Ergo Makes the Most of Blockchain"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/mining/","subtitle":null,"title":"Mining"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v4.0.0","permalink":"https://ergoplatform.org/en/news/2021-01-18-ergo-mainnet-4-0-0-release-please-update-your-nodes/","subtitle":"This 4.0.0 release represents \"The Hardening\" protocol upgrade and thus contains breaking changes!.  The Hardening protocol upgrade will be activated on block # 417,792. Initial difficulty for the block is set to \"6f98d5555555\" (in hex), which is corresponding to ~ 1TH/s hashrate.","title":"Ergo Mainnet 4.0.0 Release - Please update your nodes"},{"contents":"","link":"https://www.youtube.com/watch?v=zG-rxMCDIa0\u0026ab_channel=ErgoPlatform","permalink":"https://ergoplatform.org/en/news/2021-01-15-were-holding-the-2021-ergo-summit/","subtitle":"To help spread the word we're giving away 100 ERG for the best tweet about Ergo Summit. Result on next friday. All the necessary information on the website","title":"We're holding the 2021 Ergo Summit!"},{"contents":"","link":"https://erg.urlwallet.org","permalink":"https://ergoplatform.org/en/news/2021-01-15-instant-ergo-web-wallet-for-experiments-and-temporary-usage-not-hodl/","subtitle":"Urlwallet","title":"Instant Ergo web wallet for experiments and temporary usage (not HODL)"},{"contents":"","link":"https://t.me/ErgoSocials","permalink":"https://ergoplatform.org/en/news/2021-01-15-if-you-want-to-help-the-project-with-promotion-then-join-our-special-chat-room-on-telegram/","subtitle":"Telegram channel for sharing links where anyone can advertise Ergo. Make threads, tweets, tell about Ergo on different forums. Help each other to reach a common marketing goal.","title":"If you want to help the project with promotion, then join our special chat room on Telegram"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1347685092467101696","permalink":"https://ergoplatform.org/en/news/2021-01-09-here-are-our-winners-of-articles-contest-verium-fellow-jago-and-can-degen/","subtitle":"Articles were very good, we are very proud of our community.","title":"Here are our winners of articles contest - Verium fellow, JAGO and Can Degen"},{"contents":"","link":"https://www.youtube.com/watch?v=2sbTMrQwWOw","permalink":"https://ergoplatform.org/en/news/2021-01-08-unblocked-with-robert-kornacki/","subtitle":"Robert Kornacki - R\u0026D head at Emurgo  and long-term EF member - making an appearance on the Unblocked podcast","title":"Unblocked with Robert Kornacki"},{"contents":"Most users won’t care about the underlying blockchain they’re using – they will just want its functionality. That means DeFi interoperability will be critical.\nDespite the open source nature of the blockchain world, crypto projects have always tended to have an ‘us-and-them’ mentality. The assumption is that for one platform to succeed, it must be at the expense of all the others. Hence marketing strategies that position one or other platform as the ‘Ethereum killer’, and other such claims.\nThe reality is quite different, as 2020 should have proven beyond doubt. New DeFi projects bring users and volume to each other; composability is important because it allows dApps to provide reciprocal benefits and build mutual network effect. So why should the blockchain platforms themselves be any different?\nSeamless interoperability\nTo date, different blockchains are still relatively siloed. It’s possible to plug different blockchains into each other, but it’s not nearly as easy as it is to do with dApps on the same platform. But what if that was different? What if true cross-blockchain composability was possible?\nThat would truly be a game changer, since it would no longer matter which platform developers launched their dApps on. At present, the majority of developers choose Ethereum because that’s where the users and volume are. Opting for a different blockchain might make sense on technical grounds, but you then risk having a well-functioning dApp with a fraction of the potential user base.\nIf blockchains were fully interoperable, developers could make their infrastructure choices based on their preferred programming language and other technical criteria, knowing that the users would come from all over the blockchain space, whatever network the dApp was hosted on.\nBlockchain agnostic dApps, powered by Ergo\nThis is the future that Ergo would like to see and bring about. Each blockchain platform will have its own strengths, but all will be interoperable, meaning that tokens and dApps will be able to cross the chasm to other chains where desired.\nThis allows Ergo to focus on its core features, such as Sigma Protocols, rather than seek shortcuts to adoption like yield farming projects.\nThe use of the Gravity Protocol will enable interoperability between Ergo and other participating blockchains, while Ergo’s unique features will be available to everyone.\nHow might this look in practice? Here’s just one potential use case.\nImagine a project raises funds via a crowdsale. It makes sense that cash should be raised in BTC, among other currencies, since this is the largest community and pool of funds. But Bitcoin does not offer the optimal way to administrate and disburse the money.\nUsing Ergo’s ZK Treasury, an address is created with bespoke conditions. A team of seven people needs to create a digital signature to access the funds. Five of seven accounts need to sign a transaction, or else the CEO, CTO and CFO together.\nBTC is then locked in a bridge to the Ergo blockchain, so that an equal amount of BTC proxy tokens on Ergo (much like RenBTC on Ethereum) are deposited to the treasury account. The team can disburse funds from this account, and either use ErgBTC on the Ergo chain, or unlock them on Bitcoin to pay for development and marketing.\nThis allows the developers to add Ergo’s benefits of Sigma Protocols and custom signatures to Bitcoin.\nIn another version of this use case, an address might be created using multi-party computation using Ergo, such that no private key actually exists at all. A signature can be created using Ergo, and then used to push a transaction to a separate blockchain (e.g. Ethereum). This allows Ergo to be used as a layer for highly secure account creation and transaction management on other networks.\nThis is just one possibility that seamless interoperability raises. There will be many more that we look forward to exploring as Gravity and additional protocols come online.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2021-01-05-what-ergo-can-contribute-to-defi-interoperability/","subtitle":null,"title":"What Ergo can contribute to DeFi interoperability"},{"contents":"","link":"https://www.ergoforum.org/t/ergo-platform-ecosystem-digest-december-2020/531","permalink":"https://ergoplatform.org/en/news/2021-01-03-ergo-platform-ecosystem-digest-december-2020/","subtitle":"A summary of the news surrounding Ergo in December","title":"Ergo Platform Ecosystem Digest - December 2020"},{"contents":"","link":"https://ergo.herominers.com","permalink":"https://ergoplatform.org/en/news/2021-01-03-herominers-we-opened-testnet-ergo-pool/","subtitle":"\"Until the Mainnet starts, you can test your miners here.\"","title":"HeroMiners - \"We opened testnet ERGO pool\""},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1344654841595965442","permalink":"https://ergoplatform.org/en/news/2021-01-03-happy-new-year-ergonauts/","subtitle":"Ergo team wishes you an amazing 2021","title":"Happy New Year Ergonauts!"},{"contents":"","link":"https://www.youtube.com/watch?v=iIHLlIZ-47Q","permalink":"https://ergoplatform.org/en/news/2021-01-03-a-new-tutorial-on-ergomixer-by-anon2020s-and-sakata/","subtitle":"ErgoMixer Tutorial - Windows, Mac, JVM \u0026 Docker - Version 3.0.1 \u0026 Above","title":"A new tutorial on ErgoMixer by Anon2020s and Sakata"},{"contents":"","link":"https://www.ergoforum.org/t/ergoutils-a-swiss-knife-for-ergo/522","permalink":"https://ergoplatform.org/en/news/2021-01-03-a-tool-for-airdrops-added-to-ergoutils-by-anon_real/","subtitle":"The aim of https://ergoutils.org/ is to provide useful utilities to be used by any wallet in a safe and trustless manner using the assembler service.","title":"A tool for airdrops added to ErgoUtils by Anon_real"},{"contents":"Your portal to Ergo’s dApp universe is opening.\nErgo has some amazing tech and some talented developers. However, as a decentralised and community-powered platform, it’s not always easy to know what’s going on all the time. Different people are developing different dApps and use cases, formally and informally. Connecting them to the same users and building that all-important DeFi network effect isn’t always easy.\nThat’s what the Sigmaverse is about. Sigmaverse is a one-stop portal to the Ergo dApp ecosystem: a place where users can find all the cool functionality that community developers are building on Ergo, all in one place.\nThe idea is that developers can create their apps, and then list them on Sigmaverse using GitHub.\nAs it becomes the default site for accessing dApps, more and more devs will add their own, making it easy to learn about new additions to the Ergo ecosystem. A search bar allows users to check for a specific type of dApp.\nSo far, five dApps are listed on Sigmaverse:\n Ergo Auction House: Ergo’s NFT market (read more) ErgoMixer: trustless, self-sovereign mixing for ERG and Ergo tokens (read more) ErgoUtils: Issue tokens and NFTs on Ergo  Oracle Pools: Ergo’s decentralised, extended UTXO approach to oracles (read more) Zero-Knowledge Treasury: create joint digital signatures with bespoke conditions (read more)  To include your dApp in Sigmaverse, create a new folder at https://github.com/ergoplatform/sigmaverse folder applications/{dAppName}, and in this folder create a new file, overview.md, with the following contents and structure:\n------ name: name of dApp description: description of dApp website: dApp website logo_image: “{logotypeName}” – if you want to include this, save the image at applications/{dAppName}/{logotypeName} preview_image: “{previewName}” – if you want to include this, save the image at applications/{dAppName}/{previewName} appCategory: [“web” or/and “cli” or/and “desktop”] ------ That’s all! The process is fast and straightforward. To check out the dApps already available in the Sigmaverse, visit Sigmaverse.io.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-12-27-introducing-the-sigmaverse/","subtitle":null,"title":"Introducing the Sigmaverse"},{"contents":"","link":"https://www.ergoforum.org/t/ergomixer-zerojoin-mixer-for-erg-and-tokens/318/13","permalink":"https://ergoplatform.org/en/news/2020-12-27-ergomixer-v3-2-0-zerojoin-for-erg-and-tokens-on-ergo-released-by-anon2020s/","subtitle":"The very first programmable and non-interactive mixer in the cryptocurrency space where final receiving point can`t be distinguished with covert address.","title":"ErgoMixer v3.2.0, ZeroJoin for ERG and tokens on Ergo released by Anon2020s"},{"contents":"","link":"https://www.ergoforum.org/t/autolykos-v-2-details/480","permalink":"https://ergoplatform.org/en/news/2020-12-27-details-on-updated-proof-of-work-scheme-autolykos-v-2/","subtitle":"The goal of this post is to explain and discuss upcoming proof-of-work function change.","title":"Details on updated Proof-of-Work scheme Autolykos v.2"},{"contents":"","link":"https://sigmaverse.io","permalink":"https://ergoplatform.org/en/news/2020-12-23-from-the-family-at-ergo-we-present-the-sigmaverse/","subtitle":"Your portal to the Ergo universe","title":"From the family at Ergo, we present The Sigmaverse"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1341050084256063488","permalink":"https://ergoplatform.org/en/news/2020-12-23-the-hardening-protocol-upgrade-activation-is-set-to-block-414-720/","subtitle":"(around January, 27th, 2021)","title":"The Hardening protocol upgrade activation is set to block 414,720 "},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1341510378954629121","permalink":"https://ergoplatform.org/en/news/2020-12-23-ergo-protocol-reference-client-4-0-0-the-hardening-upgrade-pre-release/","subtitle":"The Hardening Upgrade client \u0026 Stratum support","title":"Ergo protocol reference client 4.0.0 (The Hardening Upgrade) pre-release"},{"contents":"","link":"https://www.youtube.com/watch?v=zG-rxMCDIa0\u0026ab_channel=ErgoPlatform","permalink":"https://ergoplatform.org/en/news/2020-12-23-ergo-summit-2021-entering-the-new-era-announcing-ageusd-the-hardening-upgrade/","subtitle":"FREE online event on Ergo's YouTube - January 23, Saturday 2pm UTC [9am EST]","title":"Ergo Summit 2021 - Entering The New Era, Announcing AgeUSD \u0026 The Hardening Upgrade"},{"contents":"","link":"https://twitter.com/emurgo_io/status/1339951618956042241","permalink":"https://ergoplatform.org/en/news/2020-12-18-tutorial-3-for-the-headless-dapp-framework-is-out-by-emurgo/","subtitle":"Continue developing your own Headless dApp. Check out  the new tutorial now.","title":"\"Tutorial #3 for the Headless dApp Framework is out\" by Emurgo "},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1339903564089618433","permalink":"https://ergoplatform.org/en/news/2020-12-18-love-ergo-platform-want-to-share-your-knowledge-and-earn-some-erg/","subtitle":"We're giving away 500, 300 and 200 ERG for the best articles explaining the different features that make Ergo so awesome!","title":"Love Ergo Platform? Want to share your knowledge and earn some ERG?"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-12-18-2021-the-next-battlegrounds-for-defi/","permalink":"https://ergoplatform.org/en/news/2020-12-18-2021-the-next-battlegrounds-for-defi/","subtitle":"The challenge for Ergo and all DeFi platforms over the next year is to work towards the complete set of features that will enable DeFi to take on the conventional financial sector: decentralised atomic composability at scale with opt-in auditable privacy.","title":"2021: The Next Battlegrounds for DeFi"},{"contents":"The challenge for Ergo and all DeFi platforms over the next year is to work towards the complete set of features that will enable DeFi to take on the conventional financial sector: decentralised atomic composability at scale with opt-in auditable privacy.\nAs 2020 draws to a close, it’s worth looking back at what has been a landmark year for crypto and DeFi.\nSince the COVID-induced global market turbulence of March, we have seen crypto establish itself as an asset class as corporate investors began buying bitcoin as a store of value and a hedge against dollar devaluation in the wake of unprecedented money printing. The dam has been breached and this is only the start.\nFrom June, the still-new DeFi movement gained momentum, with the amount of funds locked in DeFi protocols soaring 2,000% over the year as a whole. While TVL is still relatively limited compared to the size of the global financial sector, again the precedent has been set. DeFi isn’t going away, any more than crypto is.\nBut there are several key issues that need to be solved: the battleground areas for the coming year, if DeFi is going to succeed in taking a share of the conventional finance sector. Ergo is positioning in all of these critical areas, which are summarised below.\nDecentralisation It should go without saying that decentralisation is the hallmark of decentralised finance, but 2020 has proven otherwise. Too many initiatives have shown themselves to be centralised in one way or another.\nDecentralisation is not a binary matter (i.e. a project is either centralised or decentralised). It is not even a spectrum. It’s more like a series of domains, with a different spectrum for each. For example, every project lies somewhere on a continuum between centralised and decentralised in the following ways and more:\n Infrastructure. How decentralised is the underlying blockchain? How many nodes are there, and how is hashrate distributed? Development. Does the survival of the platform rest on a small number of developers, or is it more of a community initiative? Holders. Do a few people own a large proportion of tokens? How many exchanges does the token trade on? Are there smart contract risks or potential single points of failure? For individual dApps, do developers hold any critical private keys?  Problems relating to all of these have been seen in the crypto world. Security for DeFi is only possible when all of these issues, and other other sources of centralisation, are eliminated. The challenge for DeFi is to ensure it is moving in the right direction. Ergo is actively working to address issues of centralisation in all of these areas.\nAtomic composability, at scale A second significant hurdle to overcome is scaling. Conventional blockchain platforms support limited transaction throughput. Many different scaling solutions exist and have been proposed, but they typically have one or other shortcoming associated with them. The so-called Scalability Trilemma states that it is difficult to scale a blockchain platform while maintaining decentralisation and security. Solutions including larger blocks, a smaller number of validators, and sharding have all been suggested or are being implemented.\nThere is another issue to factor in: composability. DeFi is so powerful because open-source dApps can be reused, modified and plugged into existing dApps to access existing functionality and network effect – adding value to the ecosystem as a whole. Certain applications, including those that use flash loans or involve instant arbitrage, require atomic composability: the property whereby all relevant transactions are executed successfully, or else none are. Certain scaling solutions – including some forms of sharding and L2 platforms – can introduce friction and complexity, meaning that atomic composability does not work reliably or at all.\nThe challenge for blockchain is not just to scale, but to maintain atomic composability at scale. Ergo is not currently seeking to scale by implementing untested technologies for now. Instead, it aims to use the ‘headroom’ that is still available for conventional blockchain platforms by using resources more intelligently. Solutions include NiPoPoWs and storage rent, as well as featuring an open governance process that avoids the need for contentious hardforks to upgrade the network.\nAuditable, compliant privacy Finally, the privacy wars have stepped up as regulators realise crypto’s scope for illegal transactions. France has recently sought to ban the use of privacy coins like Monero, and authorities in the US have stated their aim of de-anonymising transactions in such networks.\nAt the same time, there is a huge need for privacy within businesses, not least to help prevent industrial espionage, as well as a reasonable expectation of financial privacy on the part of everyday users. Selective or opt-in privacy, as well as bespoke conditions for who is allowed access to the transaction record, may well become an established feature of the space. This will enable users to maintain the privacy they need to, while revealing information where required. Ergo’s Sigma protocols are the ideal vehicle to implement the custom cryptographic signatures for this use case.\nWhat is clear is that 2020 has been a Rubicon year for crypto. If there was any doubt that the sector was here to stay at the beginning of the year, it is gone by the end. 2021 looks set to be a very interesting year for crypto and DeFi as the themes we have seen over the past 12 months continue to play out.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-12-18-2021-the-next-battlegrounds-for-defi/","subtitle":null,"title":" 2021: The Next Battlegrounds for DeFi"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.7","permalink":"https://ergoplatform.org/en/news/2020-12-16-ergo-mainnet-3-3-7-released/","subtitle":"Distributed signatures API, improvements in scans and wallet API, support for tokens in inbuilt wallet UI, bugfixes","title":"Ergo Mainnet 3.3.7 released"},{"contents":"","link":"https://www.youtube.com/watch?v=temmjyKpsEU","permalink":"https://ergoplatform.org/en/news/2020-12-16-understanding-headless-dapps-with-robert-kornacki/","subtitle":"Robert discusses the concept behind the new \"Headless dApp\" model and why this novel approach to decentralizing the development process is the way of the future for building dApps","title":"Understanding Headless dApps with Robert Kornacki"},{"contents":"","link":"https://www.youtube.com/watch?v=OAHFHrHq3Oc","permalink":"https://ergoplatform.org/en/news/2020-12-16-in-less-time-it-takes-to-make-cereal-launch-your-nft-artwork-auction-on-ergo-with-any-wallet/","subtitle":"Follow the guide attached! Kudos to Anon-real for dev \u0026 video, thanks to Yeti for vocals!","title":"In less time it takes to make cereal, launch your NFT artwork auction on Ergo with any wallet"},{"contents":"","link":"https://www.youtube.com/watch?v=zG-rxMCDIa0\u0026ab_channel=ErgoPlatform","permalink":"https://ergoplatform.org/en/news/2020-12-16-welcome-to-a-new-era-of-ergo-ecosystem-development/","subtitle":"One day event of online presentations!","title":"Welcome to a new era of Ergo ecosystem development!"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-12-11-ergo-bootstrap-streamlining-ergo-dapp-infrastructure-with-one-simple-tool/","permalink":"https://ergoplatform.org/en/news/2020-12-11-ergo-bootstrap-streamlining-ergo-dapp-infrastructure-with-one-simple-tool/","subtitle":"The Ergo ecosystem is quickly growing with new design patterns, tools, dApps, and more every single month. This is an exciting point in time for developers to jump in and get started.","title":" Ergo Bootstrap, Streamlining Ergo dApp Infrastructure With One Simple Tool"},{"contents":"The Ergo ecosystem is quickly growing with new design patterns, tools, dApps, and more every single month. This is an exciting point in time for developers to jump in and get started.\nThat said, while building dApps on top of Ergo, vital infrastructure components to develop and run your dApp might be intimidating to set up for someone who is unfamiliar with the existing tooling. Between an Ergo full node, explorer back end, explorer front end, logging, and metrics, it can become quite overwhelming for a nascent dApp developer entering into the ecosystem.\nFor this reason, we are introducing ergo-bootstrap, an easy-to-use tool that enables quick and clean Ergo blockchain cluster deployments which supports a variety of useful infrastructure components you will need on your path of dApp development. This was developed by Marek of Five Binaries thanks to a grant given by the Ergo Foundation and their latest push to empower the ecosystem via funding key projects.\nErgo-bootstrap currently supports:\n Ergo node, a full blockchain node, the reference client implementation. Explorer API, provides a set of HTTP API methods for querying chain/off-chain data. UTX watcher, dumps unconfirmed transactions from mempool to local database. UTX broadcaster, broadcasts unconfirmed transactions to Ergo nodes. Chain grabber, scans blockchain and dumps aggregated data to database. Yoroi backend, a wrapper for the Ergo explorer API providing light wallets endpoints. Ergo node panel, built-in Ergo explorer, a browser for viewing activity on the underlying blockchain network.  Built With Reproducibility In Mind The Ergo Bootstrap tool is based on the Ergo Nix project, which leverages the power of the Nix language to create declarative reproducible builds. This makes ergo-bootstrap have a higher degree of reliability and longevity, which is a vital goal for the Ergo ecosystem as a whole.\nAdditionally, we are using Docker images for the infrastructure to be deployed on top to make it easy to debug and reproduce any problems you may encounter, thereby improving the dApp developer experience.\nPreparing Your Development Environment In Under A Minute To get started using ergo-bootstrap simply:\n Clone the project git repository Use ./ergo-bootstrap init to begin the initialization process for your cluster. Follow the interface instructions for choosing what infrastructure components you wish to deploy. You have finished preparing your deployment in under a minute. The tool will do the rest for you and automatically set everything up for you.  Conclusion Developers of all stripes, from wallet devs to dApp developers, now have access to a brand new tool that will both make their lives easier, while also allowing the ecosystem to become more decentralized. Because key components such as the Ergo Node and the Explorer Backend are so easy to deploy now, more and more instances will be available for use by end-users. This will thereby decrease the overreliance on any one individual deployment and thus aid the ecosystem in growing more and more robust moving forward.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-12-11-ergo-bootstrap-streamlining-ergo-dapp-infrastructure-with-one-simple-tool/","subtitle":null,"title":"Ergo Bootstrap, Streamlining Ergo dApp Infrastructure With One Simple Tool"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-12-08-ergo-headless-dapp-framework-now-available/","permalink":"https://ergoplatform.org/en/news/2020-12-09-ergo-headless-dapp-framework-now-available/","subtitle":"This new development will have a number of implications for the Ergo ecosystem and developers, making it far easier to build applications on Ergo.","title":"Ergo Headless dApp Framework Now Available"},{"contents":"This new development will have a number of implications for the Ergo ecosystem and developers, making it far easier to build applications on Ergo.\nIn a recent article, we looked at the idea of ‘Headless’ dApps: portable dApp off-chain code that can be used by anyone to ship dApps easily by plugging different components together and adding an interface. On 30 November, a new release was made from the Emurgo code repository: the Ergo Headless dApp Framework (HDF)!\nWhat is the Ergo Headless dApp Framework?\nErgo HDF is a Rust framework for building Ergo Headless dApps. It provides developers with the very first portable UTXO-based headless dApp development framework on any blockchain.\nThe Ergo HDF project makes it easy for developers who are new to blockchain to create dApps without understanding smart contracts in detail, but has a number of goals:\n Enable developers to write their off-chain logic only once, using the HDF to create their own headless dApps, thereby allowing them to target all platforms (desktop, web, mobile) easily. Provide developers with an easy experience to go from Ergo dApp Specifications to headless dApps with greater assurance and a straightforward implementation path. Separate dApps’ off-chain logic from frontend logic, thereby allowing reusability no matter what application or front-end is attempting to integrate a headless dApp. Provide easy-to-use methods for front-end developers to access the current state of the dApp protocol, without having to understand how any of it works. Abstracting the concept of defining and acquiring input UTXOs for a headless dApp by using a novel design pattern, specifying a ‘BoxSpec’ for each required input UTXO. Enabling scripts, trading bots, and other software to be trivially built on top of multiple headless dApps created with the HDF, thereby offering a standardised interface and high degree of composability.  To give one example, the Ergo HDF makes it really easy to acquire data points from Ergo’s oracle pools, without needing to understand how they work in depth.\nA tutorial series is being created, providing a step-by-step guide to developing your own headless dApp. Check out the first lesson: the Math Bounty Headless dApp.\nTo find out more about Emurgo’s work and view the Ergo HDF, see the Headless dApp Framework on the Emurgo code repo.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-12-08-ergo-headless-dapp-framework-now-available/","subtitle":null,"title":"Ergo Headless dApp Framework Now Available"},{"contents":"","link":"https://www.youtube.com/watch?v=mPOPQLQuPXk","permalink":"https://ergoplatform.org/en/news/2020-12-07-ergo-emurgo-stable-coin-nft-mixer-and-more-the-cardano-aura-9/","subtitle":"Livestream with Alex Chepurnoy, the core developer of the Ergo Platform","title":"Ergo/Emurgo Stable Coin, NFT, Mixer, and more! | The Cardano Aura #9"},{"contents":"The novel smart contract will trustlessly enable users to participate in token sales without the downside risks of regular ICOs.\n2020 is shaping up to look at a lot like 2016 for crypto – suggesting that 2021 could be another 2017.\nBut while 2017’s epic crypto bull run was partially driven by the massive ICO hype, 2020’s has not been – and any continuing rally in 2021 will likewise not rely on these token sales.\nAside from the regulatory clamp downs, there’s another reason why ICOs fell from favour. Investors found that in many cases, their tokens failed to perform as they had hoped. Even discounting the ICOs that turned out to be outright scams, there were many where the price of the token fell dramatically – losing even more value than the wider market through 2018, where 90-95% drawdowns were common.\nBuyer protections\nMuch of the reluctance of potential investors could be overcome with some simple protections. Here, we are not talking about regulatory protections, for all that they have become a part of the space. Investors are also looking for guaranteed financial protections. Ergo’s new Smart DEX Orders provide that, ensuring a floor beyond which token prices cannot fall. In a typical ICO, the token buyer provides funds to the seller, which can be used immediately. Ostensibly these give the seller the ability to develop the product or service, but in many cases the funds are wasted or mis-spent. By the time the investor realises the developer is not capable of delivering the promised outcome, it’s too late.\nErgo Platform offers an alternative. Buyback orders can be encoded in the token sale, meaning that:\n Funds are released to the developer more slowly Buyers are able to exit their investment at a limited loss if they are unhappy with its performance  Example token sale\nLet’s say that Alice is looking to raise money for a new DeFi project. She places 1 million tokens for sale on ErgoDEX at 1 ERG each, and all of the tokens are sold. But unlike conventional ICOs, these are not simple, unconditional sales. Within each sell order is encoded the conditions for subsequent token buybacks:\n For the first 64,000 blocks (around 3 months), 80% of the initial token price will be locked on the DEX, enabling token holders to regain this value by selling their stake. Alice has access to the remaining 20%, or 200,000 ERG, to fund development.  After this time, up to another 200,000 ERG are released to Alice, depending on how many investors have sold their tokens into the bid wall. For the next 64,000 blocks, up to 600,000 ERG (60% or the original funds raised) are reserved for buybacks. Every 64,000 blocks, another tranche of ERG are released to Alice, with the remainder staying locked for buybacks.  It is possible to encode any conditions in the sales. This example offers a ‘bonding curve’ whereby investors are able to exit at any time, but the longer they wait, the less of the original stake they can recover. This is a variation on some projects’ promises to provide a buy wall for investors who get cold feet. The difference is that firstly, it is trustless, and secondly, far more sophisticated conditions can be written into the smart contract to offer an outcome that is both fair to investors and provides predictable ongoing funding for the DeFi project.\nTo find out more, check out Ergo Forum.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-12-02-new-ergo-smart-dex-orders-with-buyback-guarantees/","subtitle":null,"title":"New Ergo Smart DEX Orders with buyback guarantees"},{"contents":"","link":"https://github.com/Emurgo/ergo-headless-dapp-framework","permalink":"https://ergoplatform.org/en/news/2020-12-01-ergo-headless-dapp-framework-just-released-by-emurgo/","subtitle":"This new Rust framework flips the dApp development model on it's head by providing developers the very first library for UTXO-based Headless dApps on any blockchain.","title":"Ergo \"Headless dApp Framework\" just released by Emurgo"},{"contents":"","link":"https://github.com/ScorexFoundation/sigmastate-interpreter/releases/tag/v3.3.3","permalink":"https://ergoplatform.org/en/news/2020-12-01-ergotree-ergoscript-3-3-3-release/","subtitle":"Added missing code coverage tests, new benchmarks and optimizations","title":"ErgoTree \u0026 ErgoScript 3.3.3 Release"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-11-27-an-introduction-to-headless-dapps/","permalink":"https://ergoplatform.org/en/news/2020-11-28-an-introduction-to-headless-dapps/","subtitle":"This new approach offers a streamlined interface for interacting with on-chain contracts, enabling anyone to build dApps using simple building blocks.","title":"An introduction to ‘Headless’ dApps"},{"contents":"This new approach offers a streamlined interface for interacting with on-chain contracts, enabling anyone to build dApps using simple building blocks.\nSo-called headless dApps are a new idea in the blockchain world, and one that offers exciting new possibilities for developers and the DeFi sector. It’s also one that Ergo will be exploring in due course.\nBefore we make further announcements, it’s worth exploring the idea a little further. If you’re new to the idea of headless dApps, you’ll likely have questions\u0026hellip;\nWhat are ‘headless’ dApps? Headless dApps are a brand new technical and business model for developing dApps that is just beginning to take hold in the blockchain space. Headless dApps are the pure and portable self-contained logic for reading and participating in on-chain smart contract protocols. In other words, a headless dApp is a piece of software that exposes the complex on-chain protocols to the off-chain world with a streamlined interface that anyone can build on. The dApps themselves have no frontend of their own – hence they are ‘headless’.\nWhy is that a good thing? Headless dApps provide the freedom to build an entire decentralized ecosystem. Because headless dApps are pure and portable by default, they can be compiled to any desktop OS, mobile OS, or browser. Because they have a streamlined interface, they can be integrated into scripts and bots trivially. Because they are composable, they can be used together in applications – for example, to enable arbitrage between different protocols, or entire new user experiences to be developed without having to understand how each and every supported headless dApp works in detail. This makes them ideal for newer devs with limited experience of developing smart contract protocols. They can still create powerful applications and have a real impact in the dApp world without immersing themselves in the intricacies of how every dApp functions.\nWhat are the business implications of headless dApps? Headless dApps open up the ecosystem for a whole new business model. Rather than smart contact protocol creators sucking up all potential profit/value from the success of the protocol, headless dApps uncover as yet untapped revenue streams for front-end devs. By decentralizing the potential profit from the protocol creators to include each and every frontend that is developed, we move away from the current model of popular dApps with a single hosted frontend. Instead, there’s the opportunity to incentivize a robust ecosystem composed of numerous independent frontends, built by multiple devs and companies – all of whom can profit from improving the ecosystem as a whole.\nTL;DR? Headless dApps provide any developer with easy access to powerful blockchain functionality, allowing them to create and monetise their own applications based on these building blocks.\nWatch this space – because we have some great new developments on the way very soon!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-27-an-introduction-to-headless-dapps/","subtitle":null,"title":"An introduction to ‘Headless’ dApps"},{"contents":"","link":"https://www.ergoforum.org/t/darkfund0-zk-fund-for-privacy-applications/398/2","permalink":"https://ergoplatform.org/en/news/2020-11-19-darkfund0-zk-fund-for-privacy-applications/","subtitle":"New privacy-preserving designs, instructional and promotional materials for the mixer, zk treasury, different Ergo tools and financial privacy in general. All are welcome","title":"DarkFund0 - ZK Fund for privacy applications"},{"contents":"","link":"https://www.ergoforum.org/t/autolykos-v-2-details/480","permalink":"https://ergoplatform.org/en/news/2020-11-19-autolykos-v-2-details/","subtitle":"The goal of this post is to explain and discuss upcoming proof-of-work function change.","title":"Autolykos v.2 details"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-11-18-ergo-foundation-makes-key-dapp-infrastructure-grant/","permalink":"https://ergoplatform.org/en/news/2020-11-18-ergo-foundation-makes-key-dapp-infrastructure-grant/","subtitle":"The Ergo Foundation will consider proposals for grants towards projects that will support significant ecosystem developments.","title":"Ergo Foundation Makes Key dApp Infrastructure Grant"},{"contents":"The Ergo Foundation will consider proposals for grants towards projects that will support significant ecosystem developments.\nErgo is a community-oriented project, with many contributors to various aspects of the ecosystem. Grants are available from the Ergo Foundation to help fund this work, which is vital for building out the everyday products and services required by users, as well as more diverse DeFi applications. The Foundation is actively seeking to make new grants, and has just voted to accept a brand new proposal that will improve the experience for all dApp developers.\nErgo dApp Infrastructure Setup tool\nThis latest proposal was made by Marek of FiveBinaries, who was also responsible for building the first Cardano-Ergo oracle solution.\nAt present, setting up the necessary infrastructure to support your dApps as a developer is difficult due to the limited documentation. The project targets this ecosystem pain-point by developing a tool which streamlines the process of setting up an Ergo node, explorer backend/frontend instance, and vital monitoring/logging tools. This will make the dApp developer experience significantly better by enabling devs to host their own infrastructure by merely running a command or two. As such the ecosystem will decentralise further, with many more nodes/explorer instances being scattered all across the world. Resiliency of both the blockchain itself and the dApp infrastructure on top will increase significantly as a result, while at the same time improving the experience for developers considerably.\nSubmit your proposal\nThe Ergo Foundation invites developers to submit new grant proposals, in order to speed up and decentralise the process of building key Ergo ecosystem services. Proposals should include:\n An overall summary of the project Intended goals Timeline Size of grant requested  The first two sections of FiveBinaries’ grant proposal are included below as an example:\n # Ergo hosted infrastructure To make it easier for dApps developers to host their infrastructure, either as a service to their users or development of their applications, I would like to propose a project to improve the experience by providing an out of the box solution. ## Deliverables The out-of-box experience would be a cluster consisting of the following components. * Ergo node * Ergo explorer * Ergo frontend * Ergo backend (chain-grabber, explorer-api, utx-broadcaster and utx-watcher) * Monitoring * Grafana (metrics) * ELK (logs) The project will make use of docker-compose to setup a number of containers forming a cluster.  If you have a great idea which you are looking to implement that would improve the Ergo ecosystem as a whole, please feel free to apply for an Ergo Foundation grant by emailing your proposal to: ergoplatform@protonmail.com.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-18-ergo-foundation-makes-key-dapp-infrastructure-grant/","subtitle":null,"title":"Ergo Foundation Makes Key dApp Infrastructure Grant "},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-11-17-introducing-the-ergonaut-the-ergo-foundation-nft-sale/","permalink":"https://ergoplatform.org/en/news/2020-11-17-introducing-the-ergonaut-the-ergo-foundation-nft-sale/","subtitle":"This major auction will help fund the dev work carried out by our anons, and offers the opportunity for anyone to get their hands on a piece of Ergo history, thanks to the updated Auction House working with any Ergo wallet!","title":"Introducing the ‘Ergonaut’: the Ergo Foundation NFT sale!"},{"contents":"This major auction will help fund the dev work carried out by our anons, and offers the opportunity for anyone to get their hands on a piece of Ergo history, thanks to the updated Auction House working with any Ergo wallet!\nThe launch of Ergo’s Auction House was a great milestone for Ergo Platform. Ergo NFTs offer additional features to those on other blockchains, and our auction back in October sold the first ever PoW-backed NFT to raise funds for developers. The NFT sold for 1,027 ERG.\nAt that point, it was only possible to bid on the auction if you ran your own node, making it difficult for most of the community to participate. Now, we’re launching another auction, again to raise funds for our anon devs, who have done so much amazing work. And this time, a new service means any wallet can be used!\nThis auction is something a little bit different. The NFT will represent the first image of our new Ergo mascot, the Ergonaut. Featured here with his futuristic multi-tool, we’ll be seeing more of this character in due course. We wanted to sell this image to introduce the Ergonaut to the community, and mark recent updates to the Auction House.\nThe NFT linked to the Ergonaut will contain certain information:\n A digital monument to our anons. The token id was built from a box which contains (in its registers) the string “anon_92048 | anon2020* | anon_real”. Anons have made many contributions to the Ergo ecosystem, including ErgoMixer, ZK Treasury and the Auction House.  32 bits of work (token id: 000000002306564c7b03a78b76a2ce1d9d4e748ddf462cb73cc30b48e43e6e44). The Ergonaut character image associated with the NFT (no rights to the concept). The token issuing box contains the image hash “059c321fad7e0b2bb474ebea46c8978d1957eb1b5f11c589e52f129d14b3bde4” in Register #8.  All the funds from this sale will go to our anon devs, enabling them to continue building cool new features for the Ergo ecosystem.\nIf you don’t run your own node, you can still bid on this auction using the transaction Assembler service. Click on the ‘Configure Wallet’ button in the top right corner of the Auction site, click ‘Any Wallet’, and fill in your address. When you place a bid, you’ll be given an address to send your ERG to. The standard rules apply: if you are outbid, your ERG will immediately and automatically be sent back to you.\nGood luck and happy bidding!\nYou can find out more about the Tx Assembler service on ErgoForum.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-17-introducing-the-ergonaut-the-ergo-foundation-nft-sale/","subtitle":null,"title":"Introducing the ‘Ergonaut’: the Ergo Foundation NFT sale!"},{"contents":"","link":"https://github.com/ScorexFoundation/sigmastate-interpreter/releases/tag/v3.3.2","permalink":"https://ergoplatform.org/en/news/2020-11-13-ergotree-ergoscript-3-3-2-released/","subtitle":"More memory and performance optimizations (#693), the Protocol and Requirements to replace AOT with JIT via soft-fork (#695)","title":"ErgoTree \u0026 ErgoScript 3.3.2 released"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1326924077563604992","permalink":"https://ergoplatform.org/en/news/2020-11-12-updated-roadmap-2020-2021/","subtitle":"Blockchain Auctions - Stablecoin Integration - Ledger Integration - Atomic Swaps - ErgoDEX ","title":"Updated Roadmap 2020 - 2021"},{"contents":"Magnum, a popular lite wallet for ERG and other currencies, will cease to operate at the end of the month.\nMany of the Ergo community use Magnum, a lite multi-wallet that was one of the first solutions to provide support for ERG.\nUnfortunately, Magnum will be suspended at the end of the month. The Magnum team recently posted in Telegram:\n Dear users,\ntoday we are forced to inform you that in 20 days Magnum Wallet will be suspended.\nIt was a difficult year and a difficult decision for us.\nWe remind you that Magnum Wallet is a non-custodial wallet. Magnum Wallet doesn\u0026rsquo;t have access to and doesn\u0026rsquo;t store your personal data, and only provides you with viewing data from the blockchain. You can use any other cryptocurrency wallets to access the blockchain through your private keys.\nWe also remind you that it is you who should keep your private keys. We regularly suggest that you save them from Magnum Wallet. If you haven\u0026rsquo;t done this yet or don\u0026rsquo;t remember the place where you store your private keys, then below are instructions on how to do it right now.\nWe highly recommend doing this soon.\nMagnum Wallet will be suspended on the 30th of November at 6pm GMT.\nThank you for using our product.\n It is therefore vital that you move your funds to another Ergo wallet as soon as possible.\nFortunately, thanks to the recent integration of Ergo into Yoroi, the Cardano lite wallet developed by Emurgo, an excellent alternative is available.\nYoroi is extremely easy to use. It’s a very popular web wallet that acts as a super gateway to the Ergo blockchain. Furthermore it is slated to support smart contract capabilities in the futurle, similar to MetaMask, a popular browser extension wallet and dApp interface for Ethereum. There are a few key differentiating features such as the full-page design and the way multiple addresses can be created for the same wallet (similar to a Bitcoin wallet). These are great additions which improve the user experience while still keeping it simple to get started.\nOne important thing to note when switching over from Magnum: you won’t be able to import your addresses from Magnum directly to Yoroi. This is because the two wallets derive addresses from the mnemonic seed in a different way. (There’s technically nothing stopping you using your Magnum mnemonic to create a new account using Yoroi, but it will open up into a different wallet than you expect.)\nThus after creating a new Ergo account within Yoroi, simply send your ERGs from Magnum to your new Yoroi address and wait for your transaction to be confirmed on the blockchain.\nThe whole process won’t take more than a few minutes. What’s more, you’ll also be upgrading to a wallet that is both better supported, and has a bright future ahead. Yoroi is going to become an increasingly important element within the Ergo ecosystem, offering support for dApps and Ergo-enabled websites – while also providing another strand to the interoperability between Ergo and Cardano.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-11-magnum-wallet-to-be-suspended-transfer-your-erg-to-yoroi/","subtitle":null,"title":"Magnum Wallet to be Suspended – Transfer Your ERG to Yoroi"},{"contents":"","link":"https://www.ergoforum.org/t/magnum-wallet-closing-in-20-days/468","permalink":"https://ergoplatform.org/en/news/2020-11-11-magnum-wallet-closing-in-20-days/","subtitle":"Please use wallet in-built in full node, Yoroi or Coinbarn https://ergoplatform.org/en/wallets/","title":"Magnum Wallet Closing in 20 days! "},{"contents":"","link":"https://www.youtube.com/watch?v=Eie6QBVyos8","permalink":"https://ergoplatform.org/en/news/2020-11-10-ergo-explained-episode-01-basics-forking/","subtitle":"New series of videos by Alex Chepurnoy about the state of development and principles the Ergo Platform is based on.","title":" Ergo Explained: Episode 01 - Basics \u0026 Forking"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-11-09-first-steps-towards-interoperability-with-cardano-oracles/","permalink":"https://ergoplatform.org/en/news/2020-11-10-first-steps-towards-interoperability-with-cardano-oracles/","subtitle":"The oracle solution for Cardano will post data from Ergo’s oracle pools, treating the pre-processed data as a trusted source for its own records to the blockchain.","title":"First steps towards interoperability with Cardano oracles"},{"contents":"The oracle solution for Cardano will post data from Ergo’s oracle pools, treating the pre-processed data as a trusted source for its own records to the blockchain.\nBack at the end of August, we announced Oracle Pools: a new approach to oracles, powered by Ergo’s extended-UTXO model. The benefits of these oracles over existing models are considerable, and they allow the creation of new types of dApp.\nNow, one of Cardano’s oracles is using data provided by Ergo’s oracle pools. Marek, a Cardano Stake Pool operator, has created a simple solution for Cardano. Information from Ergo’s oracle is posted onto the Cardano blockchain via tx metadata.\nThe NUTS oracle, which you can find at nut.link, currently serves six data streams. It has two sources of data for ERG/USD: Coingecko, and Ergo oracle pools. These two sources are also used for ADA/USD price. Additionally, NUTS records ADA/EUR and the price of TSLA shares. Furthermore, NUTS uses a funding scheme inspired by Ergo’s approach to oracle pools, which treats external data as a public good to be made freely available. You can follow NUTS on Twitter at @stakenuts.\nConnecting chains\nThis is a great development, for at least two reasons. Firstly, it reuses work already done by Ergo’s oracle pools – thereby enabling Cardano to post a reliable price feed more efficiently. Sharing data in this way will benefit both chains in the future, since once reliable oracles have been established, any other platform can use that data with relatively little extra overhead.\nSecondly, this provides the first steps in building interoperability between the two platforms. Both Cardano and Ergo now share the same source of data about the same cryptos. This opens the way for greater collaboration and cross-chain interaction, solidifying the connection between the two chains.\nUltimately, this functionality might power complex DeFi solutions such as Ergo-Cardano atomic swaps, with cross-chain liquidity pools and pricing decided by mutually-agreed oracle data. While that’s some way down the line, it does demonstrate what should one day be possible.\nIn the meantime, stay tuned for a new update on oracle pools, and further research from Emurgo that will develop interoperability between Cardano and Ergo.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-09-first-steps-towards-interoperability-with-cardano-oracles/","subtitle":null,"title":"First steps towards interoperability with Cardano oracles"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1324800907352092672","permalink":"https://ergoplatform.org/en/news/2020-11-06-ergo-foundation-is-welcoming-its-new-member-mohammad-hassan-samadani/","subtitle":"Mohammad Hassan Samadani is a founder of https://ergopool.io and released first ERG miner for AMD cards!","title":"Ergo Foundation is welcoming its new member Mohammad Hassan Samadani "},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/4.0.1","permalink":"https://ergoplatform.org/en/news/2020-11-06-ergo-explorer-4-0-1-released/","subtitle":"Features:  Assets order preservation, synchronization nodes ranking","title":"Ergo Explorer 4.0.1 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.6","permalink":"https://ergoplatform.org/en/news/2020-11-05-ergo-platform-mainnet-3-3-6-released/","subtitle":"#1231 : fix for peers discovery, #1234 : fix for docker build failing because of sbt-1458","title":"Ergo Platform Mainnet 3.3.6 released"},{"contents":"","link":"https://www.youtube.com/watch?v=Wn_w9F_MX8w","permalink":"https://ergoplatform.org/en/news/2020-11-03-single-chain-swap-contracts-dex-basis-by-alex-chepurnoy/","subtitle":"Learn ErgoScript by reading example smart contracts powered by the Ergo Playground","title":"Single-Chain Swap Contracts (DEX basis) by Alex Chepurnoy"},{"contents":"What happens in an election has many parallels to the governance of blockchain platforms. Ergo, though, has a better way to deal with differences and the need to make changes to the system.\nTuesday, 3 November 2020, brings the most hotly-anticipated election in living memory. The background needs no explanation. Both Republicans and Democrats see their way of life threatened. The stakes could barely be higher.\nWhatever the polls say, there is only one vote that ultimately matters. And whatever the outcome, there will be those who are pleased with the result and those who are disappointed. All, however, will have to live with the fallout.\nBlockchain governance\nThe US Election provides a useful analogy and parallel for the process of blockchain governance, and particularly for forks. While forks – where versions of the software used by miners and node operators to maintain the blockchain diverge – are a common feature of the blockchain world (including to update node software and address security issues), they can be hugely divisive. Bitcoin’s own history is marked by the 2017 hard fork, which was intended to force an increase in the block size on the network and its users. This resulted in two separate and incompatible chains, Bitcoin and Bitcoin Cash. The original Bitcoin, which gained the most support in terms of hashrate, retained its title and reputation as the ‘real’ Bitcoin, while Bitcoin Cash received limited (and dwindling) support. Perhaps even more damaging than the temporary uncertainty was the bitter propaganda war in the run-up to the fork, which split the community.\nThe Bitcoin Cash hard fork was settled decisively, with miners voting overwhelmingly for the status quo. Bitcoin consistently commanded a majority and growing share of hashrate. This was the best possible outcome: a decisive result, with no doubt over which chain deserved the name of Bitcoin. The Ethereum Classic fork provides another example; there was no question about which chain was more legitimate in terms of hashrate.\nAn alternative to hard forks\nWhen a political/blockchain election/fork occurs, the worst outcome is if the participants (whether a nation or a network) are evenly divided. The last US Presidential Election, which saw an almost exact 50:50 split between red and blue, was about as divisive as it’s possible to get. The same was true of the UK’s 2016 Brexit referendum. Both countries have seen years of subsequent tension and resentment. If the same occurs this time around, and there is no clear winner or one candidate wins very narrowly, significant unrest is to be expected.\nMaking such a major decision once every four years might (might\u0026hellip;) be the best model for selecting a president, but occasional and divisive hard forks are not the only way to make changes to a blockchain protocol – even if that’s the way most platforms currently do it.\nErgo has opted to implement a form of decentralized governance. Instead of relying on sporadic and significant updates, which are decided in major events that may split the community, miners can decide on protocol upgrades and changes to existing features on a more incremental and gradual basis. For example, miners can vote on changes to block size and other critical network parameters, on a more-or-less continuous basis.\nThis allows those responsible for maintaining security and processing transactions to also have a say in how the project evolves, voting to shape it around their own needs and preferences. And, while it does not eliminate the need for hard forks, it allows for a smoother process of network upgrades that relies more on soft forks. This approach leads to less contentious decision-making, which is more decentralised and therefore democratic – rather than resting on major ‘upgrade’ milestones.\nIt’s less dramatic, and it may not make for good entertainment, but – given how the markets watch and react to both political and blockchain ‘forks’ – that may not be a bad thing.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-11-03-the-us-election-and-blockchain-the-risk-of-hard-forks/","subtitle":null,"title":"The US Election and Blockchain: the Risk of Hard Forks"},{"contents":"","link":"https://github.com/Emurgo/ergo-node-interface","permalink":"https://ergoplatform.org/en/news/2020-11-02-emurgo-is-happy-to-release-its-ergo-node-interface-for-the-ergo-dev-community/","subtitle":"You can find this new Rust based library on EMURGO's github","title":"\"EMURGO is happy to release it's Ergo Node Interface for the Ergo dev community\""},{"contents":"","link":"https://ergocast.io/episode/yoroi-wallet-ergo-cast-episode-4/","permalink":"https://ergoplatform.org/en/news/2020-10-28-ergo-cast-episode-4-yoroi-wallet/","subtitle":"In today’s show we have the pleasure of being accompanied by two core members of Emurgo, who will be walking us through all of the specifics relating to the latest substantial release for the Ergo ecosystem – Yoroi","title":"Ergo Cast Episode #4 - Yoroi Wallet"},{"contents":"","link":"https://medium.com/wavesprotocol/waves-partners-with-ergo-to-foster-interoperability-solutions-via-gravity-e184bca91d71","permalink":"https://ergoplatform.org/en/news/2020-10-26-waves-partners-with-ergo-to-foster-interoperability-solutions-via-gravity/","subtitle":"\"We are excited to announce Waves’ new partnership agreement with the Ergo Foundation. The agreement stipulates integration of Ergo as a Gravity target chain, as well as collaborative R\u0026D on cross-chain solutions with a focus on decentralized finance (DeFi) and decentralized oracles.\"","title":"“Waves partners with Ergo to foster interoperability solutions via Gravity”"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.5","permalink":"https://ergoplatform.org/en/news/2020-10-24-ergo-platform-mainnet-3-3-5-released/","subtitle":"#1224 : inactive connections being dropped,  fix for #1165 : double-spending transactions not allowed in mempool (with RBF replacement strategy) #1220, fix for panel issues during wallet init/restore (issue #1212 )","title":"Ergo Platform Mainnet 3.3.5 released"},{"contents":"","link":"https://www.btcnext.io/coin-info/erg","permalink":"https://ergoplatform.org/en/news/2020-10-20-ergo-erg-is-listed-on-btcnext-exchange/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on BTCNEXT Exchange","title":"Ergo ($ERG) is listed on BTCNEXT Exchange "},{"contents":"The first ever PoW-backed NFT was generated by Ergo developer anon_real, and is being sold to help fund creation of the new Ergo DEX.\nErgo recently announced two major new developments: the ability to create non-fungible tokens, and the Ergo Auction House, a Marketplace for NFTs.\nThe very first Ergo NFT is now for sale on Auction House.\nThis is a unique, indivisible token mined by anon_real, one of Ergo’s anonymous devs. It is also the first ever proof-of-work-backed token on the platform. Moreover, it has the word ‘ergo’ hidden in its id:\n24550c2dc71646fb369f1603f39f3e587c4c454e0690366572676fe985668c02\n(The bolded characters, \u0026ldquo;6572676f\u0026rdquo;, are the base16 encoding of \u0026ldquo;ergo\u0026rdquo;.)\nAnon_real is also developing Ergo’s DEX, and the ERG received from the same will be used to help fund that project. Between NFT auctions and the DEX, anon_real is contributing important infrastructure to Ergo’s DeFi ecosystem.\nSo, submit a bid, grab a piece of Ergo history, and help Ergo develop ground-breaking new DeFi technology!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-10-19-the-first-ergo-nft-auction-is-under-way/","subtitle":null,"title":"The First Ergo NFT Auction Is Under Way!"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-10-16-announcing-the-auction-house-nft-marketplace-on-ergo/","permalink":"https://ergoplatform.org/en/news/2020-10-16-announcing-the-auction-house-nft-marketplace-on-ergo/","subtitle":"The platform allows users to sell Ergo’s NFTs – an important development in the growing DeFi movement – securely and easily.","title":"Announcing the Auction House, NFT Marketplace on Ergo"},{"contents":"The platform allows users to sell Ergo’s NFTs – an important development in the growing DeFi movement – securely and easily.\nNon-fungible tokens, or NFTs, aren’t a new development, but with the rise of the DeFi space they are gaining significance and finding new use cases.\nNFTs are indivisible unique or limited-edition tokens that can be used to represent physical or digital items: anything from a house or car to a piece of digital art, a series of images, an in-game item or other collectible. It’s already a booming sector for blockchain, and one that’s forecast to grow rapidly in the coming years.\nErgo’s NFTs take a different approach to conventional non-fungible tokens on platforms like Ethereum. Like so many areas of the Ergo ecosystem, the extended-UTXO model offers benefits and entirely new use cases.\nNFT auctions\nNew dapp comes thanks to huge support of one of our anon developers, anon_real, who pioneered a user-friendly interface that makes it easy to form joint spending groups that require a quorum of signatories to make a transaction. Auction House enables users to sell NFTs securely and easily, auctioning them to the highest bidder.\nUsers need to run a full node to connect to the marketplace, but access via Yoroi will be possible in due course.\nThe ability to sell NFTs has lots of applications, both in its immediate form and in future developments.\nFirstly, the NFT marketplace provides liquidity for a market that is typically illiquid. The physical art market, for example, is difficult to access for various reasons. That means it’s very difficult to value a painting; something is worth what someone will pay for it, and if there are only a few people who can bid, price discovery is inefficient. Tokenising the painting (or a digital image) and selling it securely online opens the process up to a global market of participants.\nThis can be combined with the ability to buy and sell NFTs using a conventional DEX. An artist might initially sell their work at auction to realise the highest price, but the new owner can then trade it on the secondary market – a useful feature if the artist subsequently becomes famous.\nThese two types of marketplace can also be used for the initial and subsequent distribution of governance tokens. A new DeFi initiative might mint, say, 100 NFTs, each representing a 1% vote in the project and conferring 1% of the platform revenues to the holder. These can be sold at auction for the initial distribution. If the owners ever need or want to sell their stake in the project, they can do so on an efficient and global market.\nThere are lots of other potential use cases for NFTs and their marketplaces. Many platforms integrate interesting and valuable features, such as the ability for the original creators of NFTs (e.g. artists) to receive revenues every time their work is sold in the future – something practically impossible in the physical world.\nCheck out Ergo’s Auction House, NFT marketplace! You can find the source code and installation instructions here if you want to run your own marketplace.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-10-16-announcing-the-auction-house-nft-marketplace-on-ergo/","subtitle":null,"title":"Announcing the Auction House, NFT Marketplace on Ergo"},{"contents":"The new resources provide a powerful but simple way to learn UTXO-based smart contracts.\nSince its mainnet launch in July 2019, Ergo has steadily been building out both its core tech and its dapps ecosystem, with several unique developments in both. Ergo’s Sigma Protocols enable safe, customisable zero-knowledge proofs, which underpin such applications as ErgoMixer and the ZKTreasury. And there’s lots more to come!\nTo date, though, Ergo hasn’t been the most user-friendly ecosystem. It’s been far better suited to developers and the tech-savvy. With key functionality now complete, that’s starting to change as the priority shifts towards bringing in users and developers. The integration of Ergo in Yoroi, a major lite wallet for Cardano developed by Emurgo, is a critical step for users; Yoroi will ultimately serve as a portal for Ergo dApps, acting a lot like MetaMask.\nErgo by Example and Ergo Playground\nErgo’s broad functionality yet safe and simple approach to smart contracts makes it a great tool for developers. To make it more accessible to the dev community, we’re launching ErgoScript by Example: a set of resources that enables users to jump in and start writing smart contracts on the platform. We believe there’s nothing like it anywhere else on the web. This is the go-to site for learning about smart contracts based on the extended UTXO model.\nErgo by Example is a repo on GitHub. It’s similar in format to other examples you may have seen for various programming languages. As the name implies, it’s designed to teach by example, taking smart contract use cases and unpacking how they work so anyone can write their own. It’s suitable for almost any level of expertise.\nWe’re also announcing Ergo Playground, which is linked from the examples you’ll find on GitHub. This is a powerful yet easy-to-use developer-focused environment with a text-based approach. It provides a full Ergo development environment based on Scastie, which is Scala-based, like ErgoScript. You can write code, share it as a URL at any moment, ask for feedback, and collaborate with others while writing your smart contracts seamlessly.\nExample #1: Pin Lock Contract\nWe’ve uploaded the first example to GitHub: a Pin Lock smart contract. This application enables a user to lock ERG in a contract using a pin number. The way it works is pretty simple: the pin is hashed and stored on-chain, and the hash can then be used to prove a pin entered at a later date is valid, upon which the ERG can be moved.\nThis smart contract is not secure, for several reasons, so it’s not suitable for use in a real application. But it’s a good introductory example of the kind of things that are possible. ErgoScript is relatively simple to use, but very powerful. That’s well illustrated here: the code for the Pin Lock smart contract is just one line!\nThis video by Robert Kornacki offers a walkthrough of how Ergo’s smart contracts work, and how this particular contract works. One of the great things about the Ergo Playground is that it has no GUI, but does provide the ability to test complex scenarios easily. The remainder of the code in this example simulates the Ergo blockchain to test the contract without actually needing to engage with the network – making it faster, safer and more convenient.\nWe’ll continue uploading more going forward and the community is welcome to contribute to ErgoScript by Example with their own examples as well. Check it out, and get to know the #1 way to write extended-UTXO smart contracts and move them on-chain!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-10-12-learn-ergoscript-by-example/","subtitle":null,"title":"Learn ErgoScript by Example"},{"contents":"","link":"https://www.gate.io/trade/ERG_USDT","permalink":"https://ergoplatform.org/en/exchanges/2020-10-11-gate-io/","subtitle":null,"title":"Gate.io"},{"contents":"","link":"https://www.gate.io/trade/ERG_USDT","permalink":"https://ergoplatform.org/en/news/2020-10-11-ergo-erg-is-listed-on-gate-io-exchange/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on Gate.io Exchange","title":"Ergo ($ERG) is listed on Gate.io Exchange"},{"contents":"Yoroi, the flagship lite wallet app for the Cardano ecosystem developed by Emurgo, now supports Ergo! This development follows directly from the Ergo-Emurgo partnership announced in June this year.\nhttps://twitter.com/YoroiWallet/status/1314244618435739648\nAt present, Yoroi functions as a multi-wallet for ADA and ERG tokens, enabling secure storage and transaction of your crypto.\nIn the coming months the Ergo integration within Yoroi will be developed further. Yoroi will become the gateway to Ergo’s ecosystem of Sigma Protocol-powered dApps.\nWhile Ergo is an extremely powerful blockchain platform, and ErgoScript enables the development of complex yet safe smart contracts and dApps, there is still a usability barrier. Yoroi will address this by acting as a browser extension that allows users to interact with Ergo dApps and blockchain-enabled websites – much like Ethereum’s MetaMask wallet does.\nAs we have explored on the blog, though, Ergo takes a very different approach to smart contracts, with its extended-UTXO model. Implementation of Sigma Protocols enables use cases that would be impractical or impossible to develop on Ethereum. We already have the first of these applications up and running, such as the efficient, trustless ErgoMixer and zero-knowledge digital signature app, ZKTreasury.\nYoroi will enable developers to build web dApps with seamless user interfaces for many use cases such as decentralised exchanges, token-based projects (including NFTs), and other key applications, such as stablecoins.\nUltimately, Yoroi will allow anyone to access a broad suite of important DeFi services with a minimum of technical expertise. We look forward to seeing the next steps for Ergo with Yoroi in the coming future!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-10-09-yoroi-your-gateway-to-ergo-dapps/","subtitle":null,"title":"Yoroi: your gateway to Ergo dapps"},{"contents":"","link":"https://twitter.com/YoroiWallet/status/1314244618435739648","permalink":"https://ergoplatform.org/en/news/2020-10-08-yoroi-wallet-now-supports-ergo/","subtitle":"Store, Send and Receive $ERG in Yoroi Wallet","title":"Yoroi Wallet now supports Ergo!"},{"contents":"","link":"https://www.youtube.com/watch?v=8l2v1asHgyA","permalink":"https://ergoplatform.org/en/news/2020-10-08-learn-ergoscript-by-example-via-the-ergo-playground-with-robert-kornacki/","subtitle":"Enjoy the video and jump straight to this repo https://github.com/ergoplatform/ergoscript-by-example","title":"Learn ErgoScript By Example Via The Ergo Playground with Robert Kornacki"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.4","permalink":"https://ergoplatform.org/en/news/2020-10-06-ergo-platform-mainnet-3-3-4-released/","subtitle":"Improvementss and fixes. Details in the description of the release.","title":"Ergo Platform Mainnet 3.3.4 released"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/3.3.0","permalink":"https://ergoplatform.org/en/news/2020-10-06-ergo-explorer-backend-3-3-0-released/","subtitle":"Features: New fields added to an unconfirmed transaction API endpoint","title":"Ergo explorer backend 3.3.0 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-10-04-what-will-defi-look-like-in-10-years/","permalink":"https://ergoplatform.org/en/news/2020-10-05-what-will-defi-look-like-in-10-years/","subtitle":"This is the first in a series of articles speculating on how the fast-emerging DeFi sector might evolve in the coming years.","title":"What will DeFi look like in 10 years?"},{"contents":"This is the first in a series of articles speculating on how the fast-emerging DeFi sector might evolve in the coming years.\nThe DeFi movement as it currently exists is only a few months old, and blockchain itself has barely existed a decade. Already, though, we are beginning to see themes crystallising and the first popular use cases becoming established.\nAs a DeFi platform that takes positioning for the future seriously, it’s important that Ergo has a vision – not only a sense of where things might be heading, but the role that it should itself be playing as these new decentralised financial services consolidate and grow in popularity.\nWhile no one can know the future, least of all in this space, a number of trends, technologies, products and use cases are emerging, and it seems that these are starting to plot a certain trajectory. Allowing for necessary course correction as time goes on, where might we see DeFi end up in ten years?\nTokens will be the fuel for DeFi, and everything will be tokenised\nOne of the major themes that was becoming apparent, long before the yield farming craze brought DeFi to global attention, is tokenisation. We already have blockchain tokens representing cryptocurrencies and digital assets, and the first shares and other securities have been issued on the blockchain. The benefits are such that the direction of travel is clear. Sooner or later, everything will end up as tokens.\nFor regular, fungible (interchangeable) assets, a regular token will work. Fiat and cryptocurrencies, shares, bonds, precious metals, ETFs, CBDCs – these will all be freely available on the blockchain.\nFor other assets, NFTs will proliferate. When you buy a car, house, painting or other unique item of value, whether digital or physical, there’s a good chance that transaction will also include a blockchain token.\nThese tokenised assets will place on the blockchain trillions of dollars of value that are currently ‘stuck’ offline, illiquid or impossible to buy or sell outside of certain limited circles and circumstances. This pool of tokenised value will represent the fuel of the Defi economy: assets that can be traded frictionlessly, borrowed against and leveraged using decentralised protocols that probably won’t look so very different to the ones we use today.\nDigital identity will become non-negotiable\nSince these assets will be tradeable on centralised and decentralised exchanges, digital identity will also become an increasingly important theme. This will link blockchain addresses with offline identities, enabling individuals and corporations to operate in a way that is compliant with relevant regulation. It will also allow the automation of tax and accounting processes. To date, digital identity has been an overlooked element of the DeFi ecosystem – likely due to the use of centralised platforms that can conduct KYC as a condition of use. We’re fast approaching a point where that is no longer a given, with the growth of new forms of decentralised exchange and the increase in volumes moving to these platforms.\nStablecoins will become embedded elements of the blockchain\nOne of the biggest use cases for DeFi – and again one that is often overlooked – is stablecoins. These exist in many forms, and rely on a range of approaches: centralised and decentralised, collateralised and algorithmic, fiat-backed, and so on.\nWhatever your preferred approach or view of stablecoins, they are here to stay. They have found use cases as a store of value, especially for traders, and as a popular form of collateral for yield farming.\nWhat they haven’t been widely adopted for, yet, is as an integral part of blockchain infrastructure. Transaction fees are almost always paid for with the native blockchain token. Not only does this fluctuate in value, but so does the amount of it required per transaction, depending on both the complexity of the transaction itself and competition for space in the next block. Clearly, this complexity is not conducive to mainstream adoption. End users are best served by simplicity, with minimal burdens for managing multiple tokens. They will want to pay transaction fees in a stable unit of account, and not have to worry about handling the native blockchain token.\nThe solution? An integrated stablecoin that, to most end users, is the most important token on the platform.\nTwo-tier system\nAs a result of this need, it seems likely that we may start to see a two-tier system evolve more clearly. A blockchain such as Ergo will have a native token, which will serve as the underlying currency of payment, just as occurs now. For the most part, though, these will only be handled by more experienced users. These expert users will maintain the technical and financial infrastructure of the DeFi space. For example, they will mine and use the native token as collateral to create a stablecoin, which can be sold into the market for general use, in return for tokenised assets of all kinds.\nRegular users will then use the ‘native stablecoin’ in all their business, as a kind of standard reserve currency. It will be used to buy other assets; it will be lent to users against other tokenised assets as collateral (houses, cars, real estate and much more); and it will be used to pay transaction fees.\nThe miners who receive this native stablecoin can hold it as it is, to pay for electricity and hardware costs, or they can convert it back to the platform token or other assets – that is up to them.\nThese are just some of the themes we are starting to see emerging in the DeFi world, and how they might develop over time. In the coming weeks, we’ll explore various other ideas as the space continues to evolve and Ergo launches new technology.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-10-04-what-will-defi-look-like-in-10-years/","subtitle":null,"title":"What will DeFi look like in 10 years?"},{"contents":"","link":"https://www.ergoforum.org/t/ergo-platform-ecosystem-digest-september-2020/411","permalink":"https://ergoplatform.org/en/news/2020-10-02-ergo-platform-ecosystem-digest-september-2020/","subtitle":"A summary of the news surrounding Ergo in September","title":"Ergo Platform Ecosystem Digest - September 2020"},{"contents":"","link":"https://github.com/robkorn/ergo-utilities-rust","permalink":"https://ergoplatform.org/en/news/2020-09-30-ergo-utilities-general-utilities-to-make-writing-off-chain-ergo-code-in-rust-simpler/","subtitle":"his library was born from abstracting out reusable components from the Oracle Core.","title":"Ergo Utilities - General utilities to make writing off-chain Ergo code in Rust simpler"},{"contents":"","link":"https://github.com/ScorexFoundation/sigmastate-interpreter/releases/tag/v3.3.1","permalink":"https://ergoplatform.org/en/news/2020-09-30-ergotree-ergoscript-3-3-1-released/","subtitle":"Improvementss and fixes. Details in the description of the release.","title":"ErgoTree \u0026 ErgoScript 3.3.1 released"},{"contents":"","link":"https://ergocast.io/episode/decentralized-oracle-pools/","permalink":"https://ergoplatform.org/en/news/2020-09-28-ergo-cast-is-now-back-online-now-with-a-new-co-host-sakata/","subtitle":"Oracle Pools, Smart Contracts, DeFi, Ergo, Chainlink, Cardano. All in one podcast.","title":"Ergo Cast is now back online, now with a new co-host Sakata"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/3.2.1","permalink":"https://ergoplatform.org/en/news/2020-09-28-ergo-explorer-backend-3-2-1-released/","subtitle":"Index field added to TransactionInfo / TransactionSummary","title":"Ergo explorer backend 3.2.1 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-09-25-nfts-on-ergo/","permalink":"https://ergoplatform.org/en/news/2020-09-25-nfts-on-ergo/","subtitle":"As with almost every other area of DeFi, Ergo Platform takes a different approach to NFTs that offers some interesting and unique use cases and benefits.","title":"NFTs on Ergo"},{"contents":"As with almost every other area of DeFi, Ergo Platform takes a different approach to NFTs that offers some interesting and unique use cases and benefits.\nNFTs look set to become the next major frontier for blockchain. Over the course of this year, crypto has become an accepted and practically mainstream (if still new) means of hedging against inflation and storing value. The emergence of DeFi as a use case for blockchain has similarly been impressive over the past few months, regardless of the issues that still need to be solved.\nBuilding on both of these, NFTs are an intriguing new asset class that offers functionality that is at once familiar to real-world users, but goes far beyond anything that has ever before been possible.\nNFTs (Non-Fungible Tokens) are unique and indivisible blockchain tokens. They can be used to represent and prove ownership of digital products such as works of art, in-game items or characters, virtual trading cards and much, much more. Because an NFT can be used to represent ultimate ownership, they allow users to trade digital items and cryptographically guarantee provenance.\nNFTs are becoming very big business. It’s an emerging sub-sector for blockchain, but one that is predicted to grow rapidly. The amount of tokenisable items has led one analyst to suggest this $100 million-plus use case for crypto will one day become a trillion-dollar market.\nUTXO NFTs\nMost NFTs are currently hosted on Ethereum, while large marketplaces like Rarible allow creators to sell their works and other users to buy and trade them on the secondary market. With soaring transaction fees, the costs associated with minting and trading NFTs can now be prohibitively high. Whatever the other pros and cons, there are benefits to using a platform that has both lower transaction fees and a long-term scaling plan.\nHowever, just as Ergo’s extended UTXO model enables a different approach to Oracles and other core blockchain infrastructure like smart contracts, so it also enables innovation for NFTs.\nOne interesting feature is that Ergo can be used to create PoW-backed NFTs. For most NFTs, a user simply generates a UTXO with the token contract attached. But it’s also possible for miners to create special NFTs, where the id of the newly minted token is the id of a coinbase transaction. This has all kinds of potential use cases, but the core idea is that a miner has the opportunity to create a special NFT when they mine a block. While any number of NFTs can be created via a regular smart contract, a finite number of these PoW-backed NFTs can exist.\nA trivial application of this is creating memorabilia: imagine, for example, an NFT that commemorates the 1 millionth block of the blockchain. The block rewards are fungible and can be spent just like any other coins, but that NFT is unique. It can only ever be generated once, at the time the block is mined, and only the miner who added that block to the blockchain can do it.\nUnforgeable identity\nThere are other applications of NFTs that use the extended UTXO model, including facilitating a new generation of complex dApps. For example, a dApp creator can generate an NFT associated with an address and smart contract. While anyone can use that contract, and even create a transaction using the private key of that address, the NFT owner can still maintain administrative rights or other privileges.\nLet’s say you create a phenomenally successful exchange dApp, which pays a small percentage of trading fees to the owner – designated by ownership of that NFT. That token, and future revenues, can now be transferred and sold. The token can also be managed by a secondary smart contract, which could divide revenues among 100 tokens representing shareholders. The NFT could be used to update the dApp, or shut it down, if necessary – whatever conditions were coded into it. The point is that the NFT provides guaranteed, unforgeable proof of identity.\nThese use cases only scratch the surface of NFTs on Ergo. We look forward to seeing how the ecosystem develops, both on Ergo Platform and in the broader NFT space.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-09-25-nfts-on-ergo/","subtitle":null,"title":"NFTs on Ergo"},{"contents":"","link":"https://www.youtube.com/watch?v=rYOC8oO2m7M","permalink":"https://ergoplatform.org/en/news/2020-09-21-emurgo-is-connected-to-cardano-both-are-connected-to-ergo-how-come-whats-emurgo-doing-with-ergo-platform-/","subtitle":"Crpyto Rich interviews Robert Kornacki, Head of Research about the work that Emurgo are doing with Ergo.","title":"“Emurgo is connected to Cardano. Both are connected to Ergo. How come \u0026 what’s Emurgo doing with Ergo Platform?”"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/3.2.0","permalink":"https://ergoplatform.org/en/news/2020-09-17-ergo-explorer-backend-3-2-0-released/","subtitle":"Index, outputIndex fields added to InputInfo, DataInputInfo, inclusionHeight field added to TransactionInfo. Optimizations:  /addresses/balances API endpoint now returns only first 100 addresses.","title":"Ergo explorer backend 3.2.0 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-09-17-defi-finance-but-not-always-decentralised/","permalink":"https://ergoplatform.org/en/news/2020-09-17-defi-finance-but-not-always-decentralised/","subtitle":"As a recent blog post explored, DeFi – decentralised finance – can and will be used in whatever ways developers and the market see fit. This is the nature of open, decentralised systems. You can’t stop it, and there’s a very strong argument for saying we shouldn’t try. ","title":"DeFi: Finance, but not always Decentralised?"},{"contents":"As a recent blog post explored, DeFi – decentralised finance – can and will be used in whatever ways developers and the market see fit. This is the nature of open, decentralised systems. You can’t stop it, and there’s a very strong argument for saying we shouldn’t try. To restrict any element of DeFi, at least at the protocol level, is to introduce centralisation and single points of failure, thereby killing the core innovation by misguidedly trying to protect it.\nBut “decentralisation” is widely misunderstood. It is, first of all, not a binary matter: a project is not either “decentralised” or “centralised”. Decentralisation lies on a spectrum. One node in a blockchain “network” is centralised; Bitcoin, with many thousands of nodes in its network, is typically considered decentralised. At what point does the threshold between centralised and decentralised lie? 10, 100, 1,000 nodes?\nSecondly, there are different types of decentralisation. A blockchain network might be decentralised, but its mining infrastructure may not be, especially if a few pools comprise 51% of hashrate. If there are very few exchanges, or active developers, these are also forms of centralisation and points of potential vulnerability.\nDeFi’s recent failings of decentralisation\nWe have seen other forms of centralisation and failure in the DeFi space in recent weeks, suggesting that a significant proportion of DeFi cannot truly be considered Decentralised at all.\nAt least two recent DeFi projects (one a fork of the other, and clearly designed to appeal to yield farmers, with improbable gains promised), include an “infinite mint” function that poise the devs to carry out an exit scam, pulling the rug from under holders when it is most lucrative (if not timelocked). SushiSwap, a now-notorious clone of UniSwap, apparently suffered a similar exit scam when its founder Chef Nomi took $14 million from the dev fund – only to return it in what may have been genuine remorse, or possibly an act of theatre.\nMany of the ‘new’ DeFi protocols are simply clones of existing dApps, making them akin to a Ponzi or HYIP scheme. It’s worse when the users, who pour millions of dollars into these smart contracts, don’t wait for an audit – as was the case with Yam Finance, which led to a bug that caused its token price to crash to zero.\nThe ruthless elimination of centralisation\nDeFi is not DeFi when it contains any of the above single points of failure. “Decentralisation” is about far more than the blockchain. Using a blockchain and smart contracts is an entry-level requirement for DeFi: necessary but not sufficient.\nNo protocol can be considered decentralised if it includes back doors, whether built in deliberately like the “infinite mint” function (Yuno), or that exist inadvertently, like the rebase bug in Yam Finance. They’re not decentralised if individual developers or small groups control large amounts of funds, the theft of which will destroy the project.\nAdequate decentralisation from the outset may be impossible, but what matters is that unnecessary centralisation – in all its forms – is eliminated as soon as possible.\nThis is what Ergo is seeking to do: Building decentralised applications on decentralised blockchain infrastructure, with a strong and independent community of developers, smart contracts that are safe to run and easy to audit, and using custom joint signatures to protect community-owned funds.\nTo find out more, join the Ergo Discord or Telegram group.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-09-17-defi-finance-but-not-always-decentralised/","subtitle":null,"title":"DeFi: Finance, but not always Decentralised?"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.3","permalink":"https://ergoplatform.org/en/news/2020-09-16-ergo-platform-mainnet-3-3-3-released/","subtitle":"#1186 : fix for #1185: command-line parameters support back for docker containers #1184 : Accept to the mempool and propagate locally generated transactions in the digest mode (also, do not download transactions in this mode)","title":"Ergo Platform Mainnet 3.3.3 released"},{"contents":"","link":"https://github.com/Emurgo/Emurgo-Research/blob/master/smart-contracts/Unlocking%20The%20Potential%20Of%20The%20UTXO%20Model.md","permalink":"https://ergoplatform.org/en/news/2020-09-14-unlocking-the-potential-of-the-utxo-model-by-emurgo-research/","subtitle":"The extended UTXO model empowers smart contract writers with a robust and flexible base to build on top of. In contrast to the account model, UTXO-based smart contracts have no concept of a function which you call within a transaction in order for state transitions to take place.","title":"\"Unlocking The Potential Of The UTXO Model\" by Emurgo Research"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/3.1.0","permalink":"https://ergoplatform.org/en/news/2020-09-16-explorer-backend-3-1-0-has-been-released/","subtitle":"Enhancements: Mempool chained transactions support and output info enriched","title":"Explorer backend 3.1.0 released"},{"contents":"","link":"https://www.youtube.com/watch?v=QcNZYhAa2xU","permalink":"https://ergoplatform.org/en/news/2020-09-13-oracle-pools-and-interoperability-of-cardano-and-ergo-with-robert-kornacki-tce-105/","subtitle":"The Cardano Effect - EP105","title":"Oracle Pools and Interoperability of Cardano and Ergo with Robert Kornacki | TCE 105"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.2","permalink":"https://ergoplatform.org/en/news/2020-09-11-ergo-platform-mainnet-3-3-2-released/","subtitle":"Dockerfile: configurable java heap.Wallet/boxes fix - this API method now correctly returns all the wallet boxes, spent or not. Wallet scan has been reworked to have improved efficiency and memory footprint","title":"Ergo Platform Mainnet 3.3.2 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-09-04-announcing-the-zk-treasury-on-ergo/","permalink":"https://ergoplatform.org/en/news/2020-09-04-announcing-the-zk-treasury-on-ergo/","subtitle":"Ergo’s Zero-Knowledge Treasury enables users to easily create joint digital signatures, with bespoke conditions for spending funds, while ensuring the signatories to the created address remain hidden.","title":"Announcing the ZK Treasury on Ergo!"},{"contents":"Ergo’s Zero-Knowledge Treasury enables users to easily create joint digital signatures, with bespoke conditions for spending funds, while ensuring the signatories to the created address remain hidden.\nZero-Knowledge (ZK) cryptography offers lots of powerful use cases. The benefit of ZK operations is that not only are they secure, but they’re private.\nImagine you find a smartphone on the ground in the park. A woman close by claims it’s hers, but you don’t trust her. Perhaps she just wants the phone. She could give you the unlock code, but then you’d gain information that, as the owner, she wouldn’t want you to have. So, you close your eyes and hold out the phone, and when you open them, the screen is unlocked. She has proved ownership without giving away sensitive information. That’s a simple example of a zero-knowledge proof.\nThe applications in the blockchain world are compelling. Consider a conventional two-of-three multi-sig address on the Bitcoin blockchain. This requires that any two out of the total of three private key holders for that address have to sign a transaction for funds to be moved. It’s a lot more secure than a single-signature address, but it lacks privacy. Anyone can look at the blockchain and know exactly who signed the transaction.\nWith a zero-knowledge signature, no one knows who is responsible for a transaction – only that the required number of private keys have signed it.\nErgo’s Sigma Protocols are excellent for creating composable ZK signatures. In other words, a group of users can get together and create an address with the conditions they specify. For example, five users could create an address that any three of them need to sign to make a transaction. Or the conditions could be more complicated. A startup consisting of seven people could create an address whereby the CEO and CFO both have to sign to release funds, or else any five key holders can sign a transaction (offering an insurance policy if either CEO or CFO is out of action).\nErgo has always been a community-driven project, and we’ve always had strong and enthusiastic support from our developers, many of whom prefer to remain anonymous. One of our anons has pioneered a user-friendly interface that makes it easy to form joint spending groups that require a quorum of signatories to make a transaction (since the process for doing this was previously complex, even for more technical users).\nUser ‘anon_real’ writes:\nThis project contains two separate apps, server, and client.\nThe server is accessible by everyone who can propose ideas and ask for funds from a team.\nOn the other hand, every team member has to set up the client app which will be in charge of interacting with their secret, node, explorer, and server to create the necessary proofs for approved proposals.\nIf a proposal is marked as fully approved (enough approvals have been collected based on the team’s signature), then client apps will generate necessary proofs and transactions in the background without needing any intervention by members.\nYou can find further discussion of the Zero Knowledge Treasury on the Ergo forum.\nThere are lots of use cases for this application beyond securely spending funds on Ergo. For example, a similar interface could be the foundation of decentralised public key infrastructure (dPKI): a means of generating and managing public/private keypairs to authenticate users and devices, but without the centralised points of failure that exist in trusted PKI setups.\nA big thanks to anon_real, and we look forward to seeing the ZK Treasury used in the Ergo community!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-09-04-announcing-the-zk-treasury-on-ergo/","subtitle":null,"title":"Announcing the ZK Treasury on Ergo!"},{"contents":"","link":"https://www.ergoforum.org/t/ergo-platform-ecosystem-digest-august-2020/361","permalink":"https://ergoplatform.org/en/news/2020-09-04-ergo-platform-ecosystem-digest-august-2020/","subtitle":"A summary of the news surrounding Ergo in August","title":"Ergo Platform Ecosystem Digest - August 2020"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-09-03-some-thoughts-about-defi-yield-farming-and-how-open-systems-should-be-used/","permalink":"https://ergoplatform.org/en/news/2020-09-04-some-thoughts-about-defi-yield-farming-and-how-open-systems-should-be-used/","subtitle":"At the risk of stating the obvious, decentralisation is the hallmark of DeFi. It is decentralisation that brings the benefits of transparency, accessibility, security, immutability, composability, efficiency and more besides to these new financial initiatives.","title":"Some thoughts about DeFi, Yield Farming and how open systems ‘should’ be used"},{"contents":"At the risk of stating the obvious, decentralisation is the hallmark of DeFi. It is decentralisation that brings the benefits of transparency, accessibility, security, immutability, composability, efficiency and more besides to these new financial initiatives.\nAs a DeFi platform that aims to take and build on the best features of Bitcoin, Ergo is committed to decentralisation.\nAnd so it is with a mixture of interest, concern, excitement, dismay and, frankly, awe that we watch the current DeFi craze for Yield Farming unfold. A $10 billion movement has arisen almost overnight.\nAs the number of DeFi initiatives has multiplied, and with them yield farming opportunities, we have seen Ethereum struggle under the volume of transactions. A simple ETH transfer can cost several dollars, a token transaction $10-20. The kind of complex transactions associated with smart contract execution for DeFi protocols can be many times that.\nThis hardly fulfills DeFi’s promise of providing universal access to financial services. So what are we to make of this?\nDecentralisation comes first\nThere’s some exceptional innovation in the DeFi space, but equally, it’s easy to be critical of some of the recent DeFi initiatives: protocols that have been built (or cloned) for the sole purpose of capitalising on the yield farming craze, with no real-world utility, ability to generate revenues, or expectation of longevity. In one sense, it’s little more than a rerun of the altcoin craze of 2014-15. It’s certainly not what Ethereum’s founders had in mind. Vitalik Buterin has compared yield farming protocols (unfavourably) to central banks in their need to constantly print more tokens to sustain themselves.\nThe problem is that no one gets to say how an open platform ‘should’ be used – even its creators. The nature of decentralisation is that no one has control. Open platforms are like democracy: in the words of Winston Churchill, the worst system, apart from all the others. Or, to quote William Gibson’s sci-fi short story, Burning Chrome: ‘The street finds its own uses for things’. Put a piece of tech in the wild, and you shouldn’t be surprised if users come up with applications you never expected. Yield farming is just another result of DeFi’s core characteristics of openness and composability.\nViewed this way, yield farming isn’t a ‘good’ or ‘bad’ application of blockchain. It just is. It’s what the street, or the crypto community, has decided to do with DeFi.\nThe opportunity\nThere’s precedent for such an unintended development. Bitcoin was launched as peer-to-peer digital cash. It ultimately became digital gold, a hedge against inflation in a world in which the money printers were running hotter than an overclocked mining rig. Bitcoin survived and even thrived on its new narrative; it turns out the street valued digital gold more than it valued digital cash.\nFor initiatives that aim to impact the mainstream, like Ergo and many other DeFi applications and platforms, yield farming might be an unwelcome reality. Right now, it’s preventing regular users from accessing DeFi and realising the benefits we hoped to make available to our users. But to take action – even if that were possible – would be to make blockchain and DeFi something that they are not. The only way to do that is to exert some form of control and centralisation.\nInstead, we have to treat this as an opportunity. There may be damaging consequences in the long run, just like the Silk Road, a major use case for bitcoin, brought unwanted scrutiny and adverse reputation for the idea of digital money. But if DeFi truly is decentralised – the property that makes yield farming possible – then it will survive, albeit not in the form we first expected or hoped. More than that, it will thrive. Understood this way, yield farming is an uncomfortable test of DeFi’s robustness. Better now than later, when it has gained real traction.\nThe attention brought to DeFi by yield farming may not be there forever, but it’s there now. We have work to do to enable DeFi to operate at scale, but we had to do that anyway. Yield farming has also brought new users, new technology, and new liquidity.\nThere are worse problems to have.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-09-03-some-thoughts-about-defi-yield-farming-and-how-open-systems-should-be-used/","subtitle":null,"title":"Some thoughts about DeFi, Yield Farming and how open systems ‘should’ be used"},{"contents":"","link":"https://deic-web.uab.cat/cbt/cbt2020/#program","permalink":"https://ergoplatform.org/en/news/2020-09-04-zerojoin-combining-zerocoin-and-coinjoin-has-been-accepted-to-cbt2020-workshop/","subtitle":"4th International Workshop on Cryptocurrencies and Blockchain Technology - CBT 2020","title":"\"ZeroJoin: Combining ZeroCoin and CoinJoin\" has been accepted to CBT2020 workshop"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-08-31-ergos-oracle-pools-and-what-they-mean-for-the-ecosystem/","permalink":"https://ergoplatform.org/en/news/2020-09-04-ergos-oracle-pools-and-what-they-mean-for-the-ecosystem/","subtitle":"The new scheme developed through the Emurgo-Ergo partnership will see oracle pools – core blockchain infrastructure – run as a public service, accessible by any dApp and developer, free at the point of use.","title":"Ergo’s Oracle Pools, and what they mean for the ecosystem"},{"contents":"The new scheme developed through the Emurgo-Ergo partnership will see oracle pools – core blockchain infrastructure – run as a public service, accessible by any dApp and developer, free at the point of use.\nOracles are a crucial element of DeFi infrastructure. They are the bridge between the siloed world of the blockchain and data from the real world, and so are vital for DeFi to reach its full potential. The integrity of major use cases, including stablecoins and lending platforms, rely on oracles that are fit for purpose.\nCurrent oracle implementations fall short of the ideal. One of the first projects undertaken as part of the Emurgo-Ergo partnership is research into Oracle Pools: a new way of bringing data from the outside world into the blockchain, and making it readily available for any dApp.\nThe shortcomings of current implementations\nOracles already underpin many decentralised applications on Ethereum, and typically work in the following way:\n A dApp wishes to acquire information from the outside world and makes a request to an oracle by paying into its smart contract (payments are typically made using a dedicated oracle token). The oracle obtains the data and submits it back to the contract that called it via a separate transaction. The information is sent solely to the dApp that requested it, and no one else can use that data without paying.  While this works relatively well, typical oracles can essentially be considered as private services that employ a ‘pay-to-play’ model. As this was clearly insufficient for many use cases, the concept of data feeds was developed in order to improve the user experience for common pricing information.\nCurrent data feeds on Ethereum, however, tend to be implemented in a very trusted manner. They lack a generalized approach that provides assurance about the reliability of the data, both in regards to its accuracy as well as its posting schedule. Furthermore, such approaches tend to have no clear decentralized funding mechanism to make them sustainable over the long term, but instead rely on sponsorship by centralized actors.\nErgo and Emurgo’s view is that oracles are too important to be restricted in this way. They should be public infrastructure for the DeFi sector. The oracle pools model developed through the partnership addresses this need.\nOracle pool design\nErgo’s UTXO model offers benefits for oracle systems that were not previously available. Pools of oracles act to decentralise the provision of data, ensuring that both the process and the data itself are more reliable.\nAt their simplest, oracle pools break up time into fixed epochs (e.g. 6 hours), which are subdivided into blocks (e.g. 180 two-minute blocks). The group of oracles within the pool agree on the data sources and each post their data points to the blockchain in their own UTXO.\nAt the end of an epoch these data points are averaged, after removing outliers, in a final transaction which reads each data point UTXO. This results in the oracle pool producing a new finalized datapoint, and moving forward towards the next epoch.\nThis is not particularly complicated to understand, but lays a solid foundation. One critical factor to note is that the whole process occurs on-chain. Moreover, the use of UTXOs enables the addition of incentives and governance mechanisms, allowing far greater sophistication and flexibility of oracle pools and data provision than was previously possible.\nBuilding on the foundation of UTXO-based oracle pools\nAs mentioned previously, it is possible to implement incentives and penalties in the pools to help ensure the quality and timeliness of the data they provide. Oracles put up collateral – a certain amount of ADA, ERG, etc – to participate in a pool. Coins are removed from their balance (‘stake slashing’) if they fail to do their job properly, e.g. if they fail to collect other oracles’ datapoints, if they submit a wildly inaccurate datapoint (an outlier), or if they do not submit a datapoint in a timely fashion. This ensures that oracles do their job well. The collateral is the blockchain’s native currency, not a separate token, simplifying matters and improving economic incentives.\nThe model also enables governance voting to determine key parameters for oracle pools. The governance community can decide variables such as how long the epoch is, how much oracles get paid for posting valid data points, the minimum collateral they require, the number of oracles per pool, and so on. There is a high degree of flexibility, and parameters can be changed based on current needs. New oracles can be invited to a pool, others removed, and so on.\nThis model incorporates a strict posting schedule (epochs) and governance directly, which projects such as Chainlink do not have. Effectively, oracle pools become mini DAOs that aim to provide the best service and can compete according to the service they provide in a free market, thereby improving the overall quality of data that everyone uses.\nPayment model\nThe UTXO model means that results are posted to the blockchain and are available for anyone to use for the cost of a transaction fee. This is not the standard pay-to-play approach: dApps can access data for next to nothing. Furthermore, this access to oracle pool data scales cleanly and at no extra cost even if more complicated protocols are built on top of oracle pools (such as hierarchies, or time-weighted averages).\nOracle pools are paid for by the dApps that use them over time. While everyone can use oracles and everyone who uses them has an incentive to fund them, this costs very little – a small percentage of extra fees on a given dApp. It is expected that these oracle pool payments will be implemented in major dApps, therefore ensuring that pools always have the funds they need to function.\nIt makes most sense that large, flagship applications like stablecoins, wallets, decentralised exchanges, lending protocols, and so on, would pay for key oracle pools – in much the same way that key blockchain companies run their own nodes. It’s part of their operation and part of their Corporate Social Responsibility, to borrow a term from the business world. It’s how they guarantee access to the data they need, help keep the ecosystem healthy, and show they are serious about staying the distance in the DeFi sector. At the same time, oracle pools are designed so that even small actors can run their own and have a funding mechanism baked in if they find a sufficient user base.\nThe pools model means the funds paid can be disbursed effectively, within a range of different pool structures. It would be possible to have a pool-of-pools, with several oracle pools aggregating data and those results being pooled and averaged. The payment goes to the top pool, which pays funds out to the next pools down in the hierarchy according to how reliable they are, and those pools distribute funds to the most reliable oracles within them. The main advantage is that it is simple for the user, since only one payment to the top pool is required.\nThere is also scope for using signed data – data from trusted entities like large exchanges. These can submit signed data to ‘first-to-post’ pools, where the funds are distributed to the first oracle to record data to the blockchain; because they are trusted, the averaging process is not necessary. Or there can be pools that aggregate partially signed and partially unsigned data, giving the best of both worlds. Signed and unsigned data points can be pooled and brought together into a single datapoint, and payouts can still be made cleanly by paying the top pool.\nThis is the first implementation to come from the Emurgo-Ergo collaboration: the first steps in building out the UTXO-based DeFi ecosystem. There will be much more to come, and new developments promise to be very exciting.\nFor further background, watch Emurgo researcher Robert Kornacki explain oracle pools.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-31-ergos-oracle-pools-and-what-they-mean-for-the-ecosystem/","subtitle":null,"title":"Ergo’s Oracle Pools, and what they mean for the ecosystem"},{"contents":"","link":"https://twitter.com/emurgo_io/status/1299357201186926594","permalink":"https://ergoplatform.org/en/news/2020-08-28-today-emurgo-and-ergo-platform-mark-a-historic-moment-for-utxo-based-dapps-and-defi-applications/","subtitle":"Developers may now build and run Oracle Pools on the Ergo blockchain with the joint release of our smart contracts \u0026 off-chain \"Oracle Core\"","title":"\"Today EMURGO and Ergo platform mark a historic moment for UTXO based dApps and DeFi applications\""},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-08-28-transcript-of-first-q-a-session-with-robert-kornacki/","permalink":"https://ergoplatform.org/en/news/2020-09-04-transcript-of-the-oracle-pools-q-a-session-with-robert-kornacki/","subtitle":"\"Robert Kornacki: I'd like to officially announce that Oracle Pools are live, running on mainnet, with all the code + detailed instructions available for you to start/run your own, and we have a beautiful frontend created by DeadIT now implemented in the explorer https://explorer.ergoplatform.com/en/oracle-pools-list\"","title":"Transcript of the Oracle Pools Q\u0026A session with Robert Kornacki"},{"contents":"Robert Kornacki\nI\u0026rsquo;d like to officially announce that Oracle Pools are live, running on mainnet, with all the code + detailed instructions available for you to start/run your own, and we have a beautiful frontend created by DeadIT now implemented in the explorer https://explorer.ergoplatform.com/en/oracle-pools-list\nCan Ergo Oracle Pools be used on Eth projects?\nA similar system could be developed \u0026amp; deployed on Eth, but all the data is posted on the Ergo blockchain so available to all Ergo users.\nSo the data can’t be pulled from the Ergo blockchain to the Eth blockchain?\nEventually, if Eth implements NiPoPoW, but it wouldn\u0026rsquo;t make any sense financially.\nWhat about Cardano?\nIt would make more sense to post unique data from the Ergo blockchain to Eth or Cardano, rather than oracle data. We\u0026rsquo;re researching cross-chain compatibility with Cardano in the background right now.\nAnd these oracle pools are now fully usable on-chain for any dApp anyone wishes to create. Simply use the oracle pool NFT id as a reference to find the latest oracle pool UTXO, and you can have oracle data immediately available for your dApps.\nSo the incentives for the Oracle Pools will need to constantly be filled, this means users pay as they go or do they just send a large payment and it slowly depletes as it is used?\nGood question. The idea is that with the UTXO-model, large dApps can enforce that users pay out a single output a very small % of a fee that goes to the Oracle Pools automatically.\nAs such, well used/popular dApps fund key oracle pools via usage, and almost no one has to end up feeling the cost.\nFor more specialized data, it may be that the pools will have to be more directly funded, but for key datapoints like Erg/USD, that will likely be the equivalent of core infrastructure available for everyone.\nSort of how Uniswap takes fees to pay LP?\nIndeed, but it can be a lot more generic, cheaper, and easy to implement in the UTXO model.\nRobert.. how is any of this good for Cardano??\nGreat question. Here\u0026rsquo;s a response I just wrote that touches on this from Reddit:\nSure, I\u0026rsquo;ll help clarify. Essentially when external oracle data is posted on-chain, it needs to be encoded in a very precise way within a transaction. Furthermore, oracle pools have a bunch of different moving parts that require transactions to be issued to move between the different stages of the pool protocol.\nAs such, the oracle core is the piece of software that creates all of the complex transactions which post the data on-chain \u0026amp; runs the oracle pool protocol on-chain (such as averaging datapoints).\nThe current oracle core is designed for the UTXO-based system in Ergo, which is quite similar in many ways to the UTXO-based system in Cardano.\nWe at Emurgo are supporting both Cardano ADA, and upcoming Ergo ERG in Yoroi, with a focus on moving forward into smart contract \u0026amp; DeFi support, especially with Gougen on the horizon. As such we are now investing a lot of resources in developing key UTXO-based smart contract infrastructure that\u0026rsquo;s required for the ecosystem as a whole, first on Ergo which is already launched and running, and soon on Gougen as well.\nWhat does oracle pool payout mean? you get paid for funding oracle pools?\nEach oracle who submits a datapoint gets paid for doing their job. The oracle pool payout is the amount of nanoErgs (the smallest measurement of Ergs) that an oracle gets paid per oracle pool datapoint finalizing/posting. So if you take a look at the frontend page https://explorer.ergoplatform.com/en/oracle-pool-state/adausd You can see the oracle payout price is 2500000 and the posting schedule is 60 minutes (30 blocks). So oracles make 2500000 every 30 blocks in this pool.\nCould Daedalus use the ADA oracle to add the current value at the time staking rewards are paid?\nYes/no. The current oracle posts data to the Ergo blockchain, and so it\u0026rsquo;d require Daedalus to also support Ergo to have a setup like that.\nIt would typically just be easier for Daedalus to also source the pricing data itself via http requests, but it\u0026rsquo;s technically feasible. Once we have Cardano oracles that should be doable (and since Daedalus is a full node it will scan all txs/blocks so the data will be available for use, so it can definitely be done)\nSounds very doable with Yoroi pretty soon though right?\nHaha, again yes/no. To source data in UTXO systems, you need to scan the UTXO set, so you need your own node. Light wallets like Yoroi don\u0026rsquo;t have this, because it will cost theoretically an infinite amount of money if everyone just spams Emurgo\u0026rsquo;s full nodes and forces us to pay for everyone\u0026rsquo;s UTXO-set scans.\nDo you imagine IOG or Emurgo will make use of the Ergo blockchain for services/products like a stable coin or decentralized exchange?\nWe (Emurgo) are currently working with the Ergo Foundation to create a stablecoin on Ergo. We are also looking into direct interoperability, and how practical it is to deploy dApps we develop on Ergo also on Cardano.\nSince Ergo has superb privacy features thanks to Sigma protocols, there is a great chance that we can have interesting interoperability use cases in the future, where you may hold wrapped Ada and use that wAda in privacy-preserving smart contracts.\nI believe the same stable coin which will come on the Ergo blockchain will come to the Cardano blockchain. In the future, we might see ergo and Cardano talking to each other?\nWe are putting in a lot of effort, and beginning to speak with IOG more about making this a reality (in terms of blockchains talking with each other).\nSo in this case the only limitation would be the variety of data sources for the request to make this useful?\nWith simple hierarchies of Oracle Pools, that indeed would be the case. We are also looking into mixing signed data together with unsigned data.\nSo you have pools sourcing signed data from CoinBase for example, and then others from other unsigned sources, thereby decreasing the chance of corrupting any one source.\nBesides just simple hierarchies as I initially stipulated in the writeup, I\u0026rsquo;ve spent more time thinking about even more complex schemes which can be built on top of oracle pools that use a lot more game theory in different ways, and maybe we\u0026rsquo;ll release something about that by EOY.\nWhere does Emurgo get its funds to develop these things?\nEmurgo is one of the founding companies which built Cardano + is now partners with the Ergo Foundation which allows us to develop in this ecosystem as well.\nWill we see additional exchange listings for Ergo in the near future? Visibility and liquidity are a pain point currently.\nWe (the EF) are constantly talking with exchanges.\nI love this offchain to onchain tunneling stuff\nThis is completely off-topic, but one of my side interests that is super untapped and I think will be a major breakthrough is when interoperability between off-chain distributed messaging networks integrate together with blockchains.\nMy assumption is that the Ergo token will be supported in the Yoroi wallet eventually, yes?\nYes, Erg support will be added to Yoroi in the coming future. No dates for you yet, unfortunately, but stay tuned!\nRobert in a sentence or two, what is the primary driver of value appreciation in the Ergo ecosystem, besides speculation? This is the number one question my friends ask.\nIn my opinion a clear vision of the future: permissionless DeFi with in-built privacy capabilities on top of a new model (UTXO) that offers capabilities to streamline and improve the whole experience of both crypto and DeFi for the average user.\nWe\u0026rsquo;re not there yet for having a streamlined and easy experience for the average user, that\u0026rsquo;s quite obvious, but there are certain things that aren\u0026rsquo;t possible (or aren\u0026rsquo;t easy/aren\u0026rsquo;t economical) that you can do on UTXO, like allowing anyone else to spend a UTXO you \u0026ldquo;own\u0026rdquo;.\nYou have said that Oracle Pools are cheaper and eliminate the middleman, but the rumor mill is saying that threshold sigs are coming to LINK and will reduce tx fees by 99%. Any validity to this?\nWe already have threshold signatures in Ergo, so we could likely do the same thing if that approach is that much better.\nThat said, on-chain provides a lot of benefits with implementing incentives/disincentives like stake slashing, which aren\u0026rsquo;t possible off-chain with threshold-sigs. We don\u0026rsquo;t have such tx congestion on Ergo, and future plans for sidechains research for scaling, so we get a lot more game theoretic benefits for doing it on-chain, and it\u0026rsquo;s all cheap at the moment.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-28-transcript-of-first-q-a-session-with-robert-kornacki/","subtitle":null,"title":"Transcript of the Oracle Pools Q\u0026A session with Robert Kornacki"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/2.0.0","permalink":"https://ergoplatform.org/en/news/2020-08-22-ergo-explorer-2-0-0-released/","subtitle":"Fixed grabber bug causing chain statuses corruption in some cases, fixed bug causing inconsistent mempool view in some cases, data inputs support and inputs indexing","title":"Ergo Explorer 2.0.0 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-08-20-the-evolution-of-programmable-money/","permalink":"https://ergoplatform.org/en/news/2020-08-20-the-evolution-of-programmable-money/","subtitle":"Ergo is building the most effective programmable currency in history.","title":"The Evolution of Programmable Money"},{"contents":"Ergo is building the most effective programmable currency in history.\nMoney is changing. It’s interesting that, at a time when money is increasingly being trivialised and devalued through enormous quantitative easing, evolution and innovation in a parallel sphere is qualitatively improving money. One of the key ways in which blockchain is enhancing money is programmability.\nMoney is just information. Once that basic principle has been accepted, it opens a whole new arena and value proposition for cash. Money becomes more valuable – not because it’s worth more per unit, but because it’s more versatile. Programmable Money (PM) has far-reaching implications for productivity and economic regeneration, and there may never have been a point when that is more needed.\nOpen Banking: Programmable Money 0.1\nDespite moving to the digital realm decades ago, money has evolved very little. The recent development of open banking APIs is only a tiny step in the right direction – something we might call PM 0.1.\nOpen banking APIs enable developers to code new applications that interface with consumers’ bank accounts – within a tightly-controlled environment – but do not provide nearly as much value and freedom as they might. That very limited new functionality is, of course, provided within the existing, highly centralised system.\nThe upshot is a little like giving someone a remote control for a black and white TV that only receives four channels (anyone remember the early 1980s?).\nBitcoin: PM 1.0\nMoney forever changed with the advent of Bitcoin, the first truly decentralised online currency. Bitcoin is programmable; it allows users to attach certain conditions to addresses and transactions. The options are limited, though that’s not a bad thing in Bitcoin’s case. Satoshi originally envisioned – and built – a much more extensive, flexible system, but much of that functionality was taken out by later developers. As digital gold, it’s understandable that Bitcoin should be treated conservatively. The chain stores hundreds of billions of dollars of value, and limitations are a feature, not a bug.\nEthereum launched in 2015, with the emphasis on decentralised computing. ETH is highly programmable money, a currency for dapps. The Ethereum platform is immensely powerful, but as we’ve seen too often, that can be risky. The nature of Solidity, Ethereum’s programming language, means there can be grey areas and edge cases that mean smart contracts do not execute as expected or required. Its complexity also opens the way to exploits, which even professional audits don’t always catch in time – when they’re conducted at all.\nErgo: PM 2.0\nErgo takes the best features of Bitcoin and builds on top of them, enabling Turing-complete decentralised money that is fit for purpose. It is highly composable, and its smart contract language – ErgoScript – is powerful while also avoiding the major problems that have plagued Ethereum.\nUsing ErgoScript, developers can neatly and reliably attach customisable conditions to coins and addresses. It’s a Turing-complete system, which means that any computational task – that is, any set of programmed conditions – can be applied. (While the same might theoretically be true of Ethereum, it’s dangerously complicated and expensive in practice.) ErgoScript has been designed to ensure it’s always known how much a smart contract will cost to execute up-front, and that a contract will always run as planned, without errors. It’s the ideal mixture of safety and versatility.\nErgo is therefore the next stage in the evolution of programmable money: a qualitatively better currency, at a time when money is losing its value before our eyes.\nLearn more about ErgoScript and Ergo’s Sigma Protocols.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-20-the-evolution-of-programmable-money/","subtitle":null,"title":"The Evolution of Programmable Money"},{"contents":"","link":"https://www.ergoforum.org/t/app-on-distributed-signatures/342","permalink":"https://ergoplatform.org/en/news/2020-08-20-app-on-distributed-signatures/","subtitle":"\"Dear Ergo Community, in this post, I would like to explain a project on top of Ergo’s Distributed Signatures capability.\"","title":"\"App on Distributed Signatures\""},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.1","permalink":"https://ergoplatform.org/en/news/2020-08-20-ergo-platform-reference-client-3-3-1-has-been-released/","subtitle":"If you're running 3.2.x node, just remove wallet/registry subfolder in your ergo data folder (e.g. ~/.ergo). Unlock the wallet after running the node (you can lock it a minute later).","title":"Ergo Platform Reference Client 3.3.1 has been released"},{"contents":"","link":"https://twitter.com/emurgo_io/status/1295754016044048385","permalink":"https://ergoplatform.org/en/news/2020-08-18-emurgo-is-pleased-to-officially-announce-that-emurgos-head-of-r-d-and-smart-contract-developer-robert-kornacki-was-appointed-as-a-new-board-member-of-the-ergo-foundation/","subtitle":"\"This board appointment serves to further strengthen EMURGO’s recently announced partnership with Ergo...and strategically positions EMURGO at the forefront of development of this emerging industry area of UTXO-based smart contracts that is being worked on by Cardano and Ergo.\"","title":"\"EMURGO is pleased to officially announce that EMURGO’s Head of R\u0026D and smart contract developer Robert Kornacki was appointed as a new board member of the Ergo Foundation.\""},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-08-17-ergos-vision-for-defi-ergo-vs-cbdcs/","permalink":"https://ergoplatform.org/en/news/2020-08-18-ergos-vision-for-defi-ergo-vs-cbdcs/","subtitle":"As blockchain technology gains traction, central bank digital currencies are among the most significant applications being developed. But these will inevitably fall far short of the ideal, for one simple reason: control.","title":"Ergo’s Vision for DeFi: Ergo vs CBDCs"},{"contents":"As blockchain technology gains traction, central bank digital currencies are among the most significant applications being developed. But these will inevitably fall far short of the ideal, for one simple reason: control. In particular, that has implications for composability and privacy, and much else besides.\nCentral bank digital currencies are no longer a theoretical application of blockchain technology. The list of countries developing CBDCs is growing rapidly, with several now trialing state-backed digital cash.\nCDBCs are not built on classic, open blockchain technology. While there are various approaches, they are all based on permissioned ledgers that restrict the role of securing the network and processing transactions to a group of approved entities. They also include a control layer that gives administrators the ability to intervene in transactions, blocking or reversing those they deem invalid.\nIt’s a far cry from the ideals of Bitcoin, and the Ergo platform that aims to build on these. But it’s only to be expected. The state has a role and a remit, and it’s unlikely to give up the control it exercises. Unfortunately, though, there are two ways that holding onto control will mean that CBDCs fall far short of what they could be, meaning they may ultimately cede ground to open platforms like Ergo.\nComposability\nAs we wrote in a recent blog, composability is a core feature of DeFi. It’s what gives applications network effect, instantly adding value by plugging into existing dapps’ user bases and functionality.\nProgrammable money is a huge development. The current system is clunky and complicated to use, at best. It’s not possible to attach detailed conditions to transactions, and have them interact seamlessly with software, as can be done with blockchain and smart contracts.\nImagine the value that could be unlocked if CBDCs were programmable, and smart cash could be integrated frictionlessly into new applications – banking interfaces, investment services, stores, social networks, games. The list is endless. But this is hardly likely. The freedom to program money will exist, for many years at least, in the open blockchain space alone.\nPrivacy\nSecondly, we consider privacy to be a core requirement of DeFi. Money is too important to be used as a tool of surveillance, but there is no question that this is what it will become as soon as the first CBDCs are rolled out to a large user base.\nChina is one of the furthest ahead in its creation of state-backed digital cash. This is a state that is notorious for its internet censorship and online surveillance of its population. Its human rights record is dire, and in recent days we have learned more about its oppression of the Uighur minority. Moreover, China already uses a social credit system, which grants or denies citizens access to certain services and amenities depending on their social score, with model citizens enjoying greater privileges.\nThere is, again, no question that a state-backed, traceable CBDC will be used as a tool of surveillance on a scale that is unprecedented in human history. And it will be the same across any nation that implements money within the same framework.\nThat giant eye on the dollar bill? You ain’t seen nothing yet.\nPrivate, programmable financial services\nErgo has a very different vision for blockchain-based cash and financial services. In the new paradigm of blockchain, value is not retained by constraining it. It is only maximised through open systems that make it as accessible as people want it to be. Money without borders, in both senses: cash that can be programmed, sent and received freely but privately, between any two individuals or organisations – and even blockchains – anywhere in the world.\nThis is what money needs to be, and what Ergo is building.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-17-ergos-vision-for-defi-ergo-vs-cbdcs/","subtitle":null,"title":"Ergo’s Vision for DeFi: Ergo vs CBDCs"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-08-13-building-ergo-our-vision-for-defi/","permalink":"https://ergoplatform.org/en/news/2020-08-16-building-ergo-our-vision-for-defi/","subtitle":"Everyone is talking about DeFi. Few people are asking what DeFi should look like. Ergo has a vision for what the sector can become.","title":"Building Ergo: Our Vision for DeFi"},{"contents":"Everyone is talking about DeFi. Few people are asking what DeFi should look like. Ergo has a vision for what the sector can become.\n2020 is shaping up to be the year in which Decentralised Finance rose to mainstream attention, in the same way that Bitcoin and blockchain did in 2016 and 2017. In July alone, Total Value Locked – the amount of funds committed to DeFi dApps’ smart contracts – doubled from $2 billion to $4 billion, largely driven by Compound’s distribution of its COMP governance tokens.\nDeFi is all the rage, with several well-known projects pioneering the space before our eyes. But while the crypto world is gripped with the short-term opportunities of DeFi, fewer are talking about what it actually is – and fewer still about what it should be. In building a DeFi platform like Ergo, though, that’s exactly the kind of question we have to ask.\nDeFi dislikes limits\nIn talking about what DeFi ‘should’ be, it’s easy to fall into a trap of being prescriptive, of introducing arbitrary conditions and limits. But that’s not what blockchain is about. As we’ve seen with Bitcoin and blockchain more generally, there’s a free market of ideas and nothing is off the table. It’s reasonable (though not particularly helpful) to say that DeFi should be ‘anything and everything’.\nJust like blockchain, DeFi brings advantages of transparency, immutability and efficiency (often including speed and/or cost) to financial processes. But in terms of what we believe this new set of technologies should offer, and what decentralised finance can bring to the conventional financial system, it’s worth focusing the conversation on a few other key areas that have been overlooked or under-represented to date: Privacy, Scalability, Interoperability, and Decentralisation.\n1. Privacy\nAs Eric Hughes wrote in A Cypherpunk’s Manifesto back in 1993, ‘Privacy is necessary for an open society in the electronic age.’ That is never more true than for financial privacy. Privacy must be a built-in feature of DeFi – not a bolt on extra or a desirable feature. It must be integral.\nBut, as Hughes continues, ‘Privacy is the power to selectively reveal oneself to the world.’ There is always a balance to be struck between privacy and compliance, between transparency and anonymity. Large scale adoption of DeFi requires auditability, and the regulatory approval that enables.\nThanks to the latest advances in zero-knowledge proofs, Ergo can offer both privacy and transparency, where required. The platform’s Sigma Protocols offer robust, customisable cryptography – and, at the same time, the ability to selectively reveal information where necessary.\n2. Scalability\nThe ability to process thousands of transactions per second is also a non-negotiable feature for a thriving DeFi sector. How this is achieved is less important than that it is achieved; in practice, there will be many different approaches, with different users and protocols selecting the ones they prefer.\nFor example, while we have seen the rise of sidechains and child chains, the reality is that exchanges remain a gateway to the blockchain world for a large proportion of users. Popular exchanges are increasingly integrating DeFi functionality, allowing their vast user bases to access it from their individual accounts, without interacting directly with the protocol.\nWhile this may be less than ideal from a security perspective, it’s a simple reality that centralised services are not going out of fashion, but are integrating decentralised technologies thanks to the advantages they offer. Ergo has its own approach to scalability, but we can’t and won’t ignore the importance of businesses in driving forward user adoption.\n3. Interoperability\nOne of DeFi’s key strengths is composability: the ability to build new applications from existing components, leveraging the network effect of established dApps and tokens. This is one of the main factors that has enabled TVL to explode over the past month.\nBut composability currently has its limits. Cross-platform composability currently isn’t possible. Even atomic swaps – the first stage of interoperability – are in their infancy, though Ergo is working on an atomic swap-powered DEX.\nFull interoperability means the ability for a user to execute a smart contract on one platform and have it seamlessly interact with another blockchain. This would allow truly frictionless cross-protocol interaction, and is what is needed to enable the flow of liquidity fully throughout the DeFi world. At that point, applications become blockchain agnostic, and the platforms are really more like the programming languages for accessing dApps’ functionality.\n4. Decentralisation\nLastly, and specifically in the context of scalability and interoperability, we cannot forget the importance of decentralisation – something Ergo has always taken seriously.\nOf course DeFi is decentralised – but there are different types of decentralisation. Ethereum, the home of almost every major DeFi dApp, is just one platform.\nEthereum’s developers are working on a plan for scaling, but even if this is successful, it is still one blockchain. Should we entrust all our funds to one network? What if a critical bug or exploit is found?\nInteroperability does more than enable cross-chain liquidity. It decentralises the decentralised infrastructure for DeFi, adding layers of redundancy and security. In the process, it strengthens every blockchain that is a part of that ecosystem, creating a whole that is more than the sum of its parts. At a time when relatively large blockchains still suffer double spend attacks and serious reorgs, and catastrophic vulnerabilities are found in smart contracts holding tens of millions of dollars of value, we cannot assume that one single blockchain will or should rule them all.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-13-building-ergo-our-vision-for-defi/","subtitle":null,"title":"Building Ergo: Our Vision for DeFi"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.3.0","permalink":"https://ergoplatform.org/en/news/2020-08-08-ergo-platform-reference-client-3-3-0-has-been-released/","subtitle":"If you're running 3.2.x node, just remove wallet/registry subfolder in your ergo data folder (e.g. ~/.ergo). Unlock the wallet after running the node (you can lock it a minute later). If you had only one key in your wallet, lock it and unlock again to have the master key unlocked.","title":"Ergo Platform Reference Client 3.3.0 has been released"},{"contents":"Future dates at time of publication are subject to change\nMarch 2020: Command-line version of decentralised trustless mixer, ErgoMixer, launched\nApril 2020: Command-line version of decentralised exchange\nApril 2020: ErgoMixer with Web interface (simple PoC)\nJune 2020: Ergo and Emurgo announce joint research partnership, including integration of Ergo into Emurgo’s flagship Yoroi wallet\nJune 2020: ErgoMixer with GUI\nJune 2020: New Emurgo brand, Emurgo Research, releases first research report on UTXO-based contracts.\nJune 2020–ongoing: Joint Ergo/Emurgo research into Oracle pool design. Joint development of stablecoin based on oracle pools\nJuly 2020–ongoing: Joint DeFi research and integration in Yoroi as ‘MetaMask’-style solution for Ergo\nJuly 2020: ErgoPool.io: smart contract-based pool for self-sovereign miners\nAugust 2020: Oracle pools PoC launch\nAugust-September 2020: Ledger integration\nSeptember-October 2020: First Ergo network hardfork\nAutumn 2020: Launch of jointly-developed Ergo/Emurgo stablecoin on Ergo blockchain\nAutumn 2020: Algorithmic stablecoin added to ErgoMixer\nAutumn 2020: Crowdfunding UI launch\nNovember 2020: Private cross-chain swaps core functionality (commandline)\nNovember 2020: Ergo decentralised exchange (ErgoDEX) core functionality developed\nDecember 2020: Launch of GUI for ErgoDEX\nDecember 2020-January 2021: ErgoDEX gateways for atomic swaps with major coins\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-08-04-ergo-roadmap-for-2020/","subtitle":null,"title":"Ergo roadmap for 2020"},{"contents":"","link":"https://www.youtube.com/watch?v=7QpNqy2w5LY","permalink":"https://ergoplatform.org/en/news/2020-08-03-new-video-robert-kornacki-of-emurgo-does-a-deep-dive-into-the-ground-breaking-research-behind-the-oracle-pools-smart-contract-specification/","subtitle":"This is the very first UTXO based DApp specification to be released.","title":"\"New Video: Robert Kornacki of EMURGO does a deep dive into the ground breaking research behind the Oracle Pools Smart Contract Specification.\""},{"contents":"","link":"https://coinsbit.io/trade/ERG_BTC","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-coinsbit/","subtitle":null,"title":"Coinsbit"},{"contents":"","link":"https://www.probit.com/app/exchange/ERG-BTC","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-probit/","subtitle":null,"title":"Probit"},{"contents":"","link":"https://www.hotbit.io/exchange?symbol=ERG_BTC","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-hotbit/","subtitle":null,"title":"Hotbit"},{"contents":"","link":"https://x.vite.net/trade?symbol=ERG-000_BTC-000\u0026category=BTC","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-vite/","subtitle":null,"title":"Vite"},{"contents":"","link":"https://tidex.com/exchange/erg/btc","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-tidex/","subtitle":null,"title":"Tidex"},{"contents":"","link":"https://waves.exchange/dex-demo?assetId2=5dJj4Hn9t2Ve3tRpNGirUHy4yBK6qdJRAJYV21yPPuGz\u0026assetId1=8LQW8f7P5d5PZM7GtZEBgaqRPGSzS3DfPuiXrURJ4AJS","permalink":"https://ergoplatform.org/en/exchanges/2020-08-03-waves/","subtitle":null,"title":"Waves"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-07-31-decentralized-exchange-contracts-on-ergo/","permalink":"https://ergoplatform.org/en/news/2020-08-03-decentralized-exchange-contracts-on-ergo/","subtitle":"Ergo has expressive smart contracts and transactional model which allows for an implementation of trustless DEX protocol, in which signed buy and sell orders can be put into the blockchain independently by buyers and sellers.","title":"Decentralized Exchange Contracts on Ergo"},{"contents":"Ergo has expressive smart contracts and transactional model which allows for an implementation of trustless DEX protocol, in which signed buy and sell orders can be put into the blockchain independently by buyers and sellers. An off-chain matching service can observe the Ergo blockchain, find matching orders, and submit the swap transaction without knowing any secrets. The matching can be incentivized by DEX reward paid as part of a swap transaction. Anyone who first discover the match of the two orders can create the swap transaction and get a reward in ERGs. Partial matching is supported, meaning that target (buy/sell) order can be executed partially, in which case a new \u0026ldquo;residual\u0026rdquo; order(box) has to be created in the same swap transaction. Any order can be canceled anytime by the \u0026ldquo;owner\u0026rdquo;.\nSell order contract source.\nBuy order contract source.\nPartial matching Both contracts have token price and DEX fee parameters encoded on a compilation. This allows us to check the \u0026ldquo;residual\u0026rdquo; order assets, ERGs for a buy order, and tokens for a sell order.\nIn the buy order contract, we search for a residual box, checking that it has correct parameters and assets.\n// in case of partial matching new buy order box should be created with funds that are not matched in this tx val foundResidualOrderBoxes = OUTPUTS.filter { (b: Box) =\u0026gt; val tokenIdParamIsCorrect = b.R4[Coll[Byte]].isDefined \u0026amp;\u0026amp; b.R4[Coll[Byte]].get == tokenId val tokenPriceParamIsCorrect = b.R5[Long].isDefined \u0026amp;\u0026amp; b.R5[Long].get == tokenPrice val dexFeePerTokenParamIsCorrect = b.R6[Long].isDefined \u0026amp;\u0026amp; b.R6[Long].get == dexFeePerToken val contractParamsAreCorrect = tokenIdParamIsCorrect \u0026amp;\u0026amp; tokenPriceParamIsCorrect \u0026amp;\u0026amp; dexFeePerTokenParamIsCorrect val referenceMe = b.R7[Coll[Byte]].isDefined \u0026amp;\u0026amp; b.R7[Coll[Byte]].get == SELF.id val guardedByTheSameContract = b.propositionBytes == SELF.propositionBytes contractParamsAreCorrect \u0026amp;\u0026amp; referenceMe \u0026amp;\u0026amp; guardedByTheSameContract } source\nThen, we check that the following properties hold:\n Value (ERGs) of the \u0026ldquo;residual\u0026rdquo; order box is the value of the current box(order) minus ERGs value of the tokens we\u0026rsquo;re receiving in this swap transaction and minus the DEX fee for this swap transaction. Only one \u0026ldquo;residual\u0026rdquo; order box is created in this swap transaction.  // ERGs paid for the bought tokens val returnTokenValue = returnTokenAmount * tokenPrice // branch for total matching (all ERGs are spent and correct amount of tokens is bought) val totalMatching = (SELF.value - expectedDexFee) == returnTokenValue \u0026amp;\u0026amp; returnBox.value \u0026gt;= fullSpread // branch for partial matching, e.g. besides bought tokens we demand a new buy order with ERGs for // non-matched part of this order val partialMatching = { val correctResidualOrderBoxValue = (SELF.value - returnTokenValue - expectedDexFee) foundResidualOrderBoxes.size == 1 \u0026amp;\u0026amp; foundResidualOrderBoxes(0).value == correctResidualOrderBoxValue \u0026amp;\u0026amp; returnBox.value \u0026gt;= fullSpread } source\nIn the sell order contract, we search for a residual box, checking that it has correct parameters and assets.\n// in case of partial matching new sell order box should be created with tokens that are not matched in this tx // check that there is only one such box is made later in the code val foundResidualOrderBoxes = OUTPUTS.filter { (b: Box) =\u0026gt; val tokenIdParamIsCorrect = b.R4[Coll[Byte]].isDefined \u0026amp;\u0026amp; b.R4[Coll[Byte]].get == tokenId val tokenPriceParamIsCorrect = b.R5[Long].isDefined \u0026amp;\u0026amp; b.R5[Long].get == tokenPrice val dexFeePerTokenParamIsCorrect = b.R6[Long].isDefined \u0026amp;\u0026amp; b.R6[Long].get == dexFeePerToken val contractParamsAreCorrect = tokenIdParamIsCorrect \u0026amp;\u0026amp; tokenPriceParamIsCorrect \u0026amp;\u0026amp; dexFeePerTokenParamIsCorrect val referenceMe = b.R7[Coll[Byte]].isDefined \u0026amp;\u0026amp; b.R7[Coll[Byte]].get == SELF.id val guardedByTheSameContract = b.propositionBytes == SELF.propositionBytes contractParamsAreCorrect \u0026amp;\u0026amp; referenceMe \u0026amp;\u0026amp; guardedByTheSameContract } source\nThen, we check that the following properties hold:\n The difference between the token amount in the current box(order) and the \u0026ldquo;residual\u0026rdquo; order box determines the amount of ERGs seller receives for the tokens \u0026ldquo;sold\u0026rdquo; in this swap transaction (soldTokenAmount * tokenPrice). Value (ERGs) of the \u0026ldquo;residual\u0026rdquo; order box is the value of the current box(order) minus the DEX fee for this swap transaction. Only one \u0026ldquo;residual\u0026rdquo; order box is created in this swap transaction.  // branch for partial matching, e.g. besides received ERGs we demand a new sell order with tokens for // non-matched part of this order val partialMatching = { foundResidualOrderBoxes.size == 1 \u0026amp;\u0026amp; { val residualOrderBox = foundResidualOrderBoxes(0) val residualOrderTokenData = residualOrderBox.tokens(0) val residualOrderTokenAmount = residualOrderTokenData._2 val soldTokenAmount = selfTokenAmount - residualOrderTokenAmount val soldTokenErgValue = soldTokenAmount * tokenPrice val expectedDexFee = dexFeePerToken * soldTokenAmount val residualOrderTokenId = residualOrderTokenData._1 val tokenIdIsCorrect = residualOrderTokenId == tokenId val residualOrderValueIsCorrect = residualOrderBox.value == (SELF.value - expectedDexFee) val returnBoxValueIsCorrect = returnBox.value == soldTokenErgValue + fullSpread(soldTokenAmount) tokenIdIsCorrect \u0026amp;\u0026amp; soldTokenAmount \u0026gt;= 1 \u0026amp;\u0026amp; residualOrderValueIsCorrect \u0026amp;\u0026amp; returnBoxValueIsCorrect } } source\nTotal matching Both sell and buy orders can be executed in the swap transaction entirely. In this case, there is no requirement for the \u0026ldquo;residual\u0026rdquo; order box. For this path, we check that the following properties hold. For sell order:\n ERGs amount seller receives in this swap transaction have to be equal to amount of tokens in the current order times token price. val totalMatching = (returnBox.value == selfTokenAmount * tokenPrice + fullSpread(selfTokenAmount)) source  For buy order:\n Token value (token amount * token price, in ERGs) buyer receives in this swap transaction have to be equal to the value of the current box(order) minus DEX fee. val totalMatching = (SELF.value - expectedDexFee) == (returnTokenAmount * tokenPrice) \u0026amp;\u0026amp; returnBox.value \u0026gt;= fullSpread source  Bid-Ask spread Counter orders sorting check The spread is the difference between the buy(bid) order price and sell(ask) order price. We want to make sure that if there is a spread, the \u0026ldquo;older\u0026rdquo; order gets it. For this contract requires the counter orders (spending orders) have to be ordered by spread amount. So that ones with a bigger spread will be \u0026ldquo;consumed\u0026rdquo; first. In buy order contract:\n// check if this order should get the spread for a given counter order(height) val spreadIsMine = { (counterOrderBoxHeight: Int) =\u0026gt; // greater or equal since only a strict greater gives win in sell order contract // Denys: we have to decide who gets the spread if height is equal, without any reason I chose buy order counterOrderBoxHeight \u0026gt;= SELF.creationInfo._1 } // check that counter(sell) orders are sorted by spread in INPUTS // so that the bigger(top) spread will be \u0026#34;consumed\u0026#34; first val sellOrderBoxesAreSortedBySpread = { (boxes: Coll[Box]) =\u0026gt; boxes.size \u0026gt; 0 \u0026amp;\u0026amp; { val alledgedlyTopSpread = if (spreadIsMine(boxes(0).creationInfo._1)) { tokenPrice - boxes(0).R5[Long].getOrElse(0L) } else { 0L } boxes.fold((alledgedlyTopSpread, true), { (t: (Long, Boolean), box: Box) =\u0026gt; val prevSpread = t._1 val isSorted = t._2 val boxTokenPrice = box.R5[Long].getOrElse(0L) val boxTokenPriceIsCorrect = boxTokenPrice \u0026gt; 0 \u0026amp;\u0026amp; boxTokenPrice \u0026lt;= tokenPrice val spread = if (spreadIsMine(box.creationInfo._1)) { tokenPrice - boxTokenPrice } else { 0L } (spread, isSorted \u0026amp;\u0026amp; boxTokenPriceIsCorrect \u0026amp;\u0026amp; spread \u0026lt;= prevSpread) })._2 } } source\nWe also check the declared token price in the R5 register of the counter sell orders is in the correct range to prevent exploiting arithmetic overflow and other similar attacks.\nIn sell order contract:\n// check if this order should get the spread for a given counter order(height) val spreadIsMine = { (counterOrderBoxHeight: Int) =\u0026gt; // strictly greater since equality gives win in buy order contract // Denys: we have to decide who gets the spread if height is equal, without any reason I chose buy order counterOrderBoxHeight \u0026gt; SELF.creationInfo._1 } // check that counter(buy) orders are sorted by spread in INPUTS // so that the bigger(top) spread will be \u0026#34;consumed\u0026#34; first val buyOrderBoxesAreSortedBySpread = { (boxes: Coll[Box]) =\u0026gt; boxes.size \u0026gt; 0 \u0026amp;\u0026amp; { val alledgedlyTopSpread = if (spreadIsMine(boxes(0).creationInfo._1)) { boxes(0).R5[Long].getOrElse(0L) - tokenPrice } else { 0L } boxes.fold((alledgedlyTopSpread, true), { (t: (Long, Boolean), box: Box) =\u0026gt; val prevSpread = t._1 val isSorted = t._2 val boxTokenPrice = box.R5[Long].getOrElse(0L) // although buy order\u0026#39;s DEX fee is not used here, we check if its positive as a part of sanity check  val boxDexFeePerToken = box.R6[Long].getOrElse(0L) val spread = if (spreadIsMine(box.creationInfo._1)) { boxTokenPrice - tokenPrice } else { 0L } (spread, isSorted \u0026amp;\u0026amp; boxTokenPrice \u0026gt;= tokenPrice \u0026amp;\u0026amp; boxDexFeePerToken \u0026gt; 0L \u0026amp;\u0026amp; spread \u0026lt;= prevSpread) })._2 } } source\nWe also check the declared token price in the R5 register, and DEX fee per token in R6 of the counter buy orders is in the correct range.\nSpread calculation To check that the current order gets its spread, we need to calculate it first. With counter orders sorted by the spread amount, we start to \u0026ldquo;consume\u0026rdquo; them in that order, decreasing the number of tokens left in this match. In buy order contract:\n// aggregated spread we get from all counter(sell) orders val fullSpread = { spendingSellOrders.fold((returnTokenAmount, 0L), { (t: (Long, Long), sellOrder: Box) =\u0026gt; val returnTokensLeft = t._1 val accumulatedFullSpread = t._2 val sellOrderTokenPrice = sellOrder.R5[Long].get val sellOrderTokenAmount = sellOrder.tokens(0)._2 val tokenAmountFromThisOrder = min(returnTokensLeft, sellOrderTokenAmount) if (spreadIsMine(sellOrder.creationInfo._1)) { // spread is ours  val spreadPerToken = tokenPrice - sellOrderTokenPrice val sellOrderSpread = spreadPerToken * tokenAmountFromThisOrder (returnTokensLeft - tokenAmountFromThisOrder, accumulatedFullSpread + sellOrderSpread) } else { // spread is not ours  (returnTokensLeft - tokenAmountFromThisOrder, accumulatedFullSpread) } })._2 } source\nIn sell order contract we need to relay on both token price and DEX fee amount to calculate how many tokens are in that buy order. Besides that, since we cannot deduce token amount \u0026ldquo;sold\u0026rdquo; in this swap transaction from the return box value we make spread calculation parametrized with concrete token amount that we will know later in the code:\n// aggregated spread we get from all counter(buy) orders val fullSpread = { (tokenAmount: Long) =\u0026gt; spendingBuyOrders.fold((tokenAmount, 0L), { (t: (Long, Long), buyOrder: Box) =\u0026gt; val returnTokensLeft = t._1 val accumulatedFullSpread = t._2 val buyOrderTokenPrice = buyOrder.R5[Long].get val buyOrderDexFeePerToken = buyOrder.R6[Long].get val buyOrderTokenAmountCapacity = buyOrder.value / (buyOrderTokenPrice + buyOrderDexFeePerToken) val tokenAmountInThisOrder = min(returnTokensLeft, buyOrderTokenAmountCapacity) if (spreadIsMine(buyOrder.creationInfo._1)) { // spread is ours  val spreadPerToken = buyOrderTokenPrice - tokenPrice val buyOrderSpread = spreadPerToken * tokenAmountInThisOrder (returnTokensLeft - tokenAmountInThisOrder, accumulatedFullSpread + buyOrderSpread) } else { // spread is not ours  (returnTokensLeft - tokenAmountInThisOrder, accumulatedFullSpread) } })._2 } source\nCheck received spread With the spread amount determined, we need to check if the current order is indeed received the spread. In buy order contract we check that it\u0026rsquo;s included in return box value:\n// branch for total matching (all ERGs are spent and correct amount of tokens is bought) val totalMatching = (SELF.value - expectedDexFee) == returnTokenValue \u0026amp;\u0026amp; returnBox.value \u0026gt;= fullSpread // branch for partial matching, e.g. besides bought tokens we demand a new buy order with ERGs for // non-matched part of this order val partialMatching = { val correctResidualOrderBoxValue = (SELF.value - returnTokenValue - expectedDexFee) foundResidualOrderBoxes.size == 1 \u0026amp;\u0026amp; foundResidualOrderBoxes(0).value == correctResidualOrderBoxValue \u0026amp;\u0026amp; returnBox.value \u0026gt;= fullSpread } source\nIn the sell order contract, as soon as we know the token amount \u0026ldquo;sold\u0026rdquo; in this swap transaction, we check that return box value has the spread included. In total matching case we use total token amount in the current order:\n// branch for total matching (all tokens are sold and full amount ERGs received) val totalMatching = (returnBox.value == selfTokenAmount * tokenPrice + fullSpread(selfTokenAmount)) source\nIn partial matching case we know the amount of token \u0026ldquo;sold\u0026rdquo; from the residual order( val soldTokenAmount = selfTokenAmount - residualOrderTokenAmount) and check that the spread is included in the return box value:\nval returnBoxValueIsCorrect = returnBox.value == soldTokenErgValue + fullSpread(soldTokenAmount) source\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-07-31-decentralized-exchange-contracts-on-ergo/","subtitle":null,"title":"Decentralized Exchange Contracts on Ergo"},{"contents":"","link":"https://www.coinex.com/exchange?currency=usdt\u0026dest=erg","permalink":"https://ergoplatform.org/en/exchanges/2020-07-29-coinex/","subtitle":null,"title":"Coinex"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020-07-27-ergo-foundation-new-members-and-contests/","permalink":"https://ergoplatform.org/en/news/2020-07-29-blog-update-weve-new-foundation-members-and-contests/","subtitle":"We've got some more ERG to give back to the community: Miners \u0026 Writers, this one is for you!","title":"Blog Update: We've new Foundation members and contests!"},{"contents":"","link":"https://github.com/ergoplatform/ergo-appkit/releases/tag/v3.2.2","permalink":"https://ergoplatform.org/en/news/2020-08-03-ergo-appkit-3-2-2-has-been-released/","subtitle":"It includes: Support for multi ProveDHTuple and ProveDLog, FlowCard blog post, upgrade to ergo-wallet v3.2.3, support for data-inputs to TxBuilder","title":"Ergo AppKit 3.2.2 has been released"},{"contents":"Ergo Foundation, a community-driven entity, is welcoming its new member Robert Kornacki, head of research and development engineer at EMURGO https://emurgo.io. This addition will help with the development of the ecosystem, promotion, and the widespread adoption and use of the Ergo Platform and its native token (ERG). There are many more members nominated to join the foundation, everyone is also free to apply.\nErgo Foundation would like to announce two sponsored competitions: for open-source mining software, including optimizations for both Nvidia and AMD which should fit greatly incoming HF changes and enable better competition in case of the new POW algorithm in the cryptocurrency space. The pool of bounties 30000 ERGs, more details to follow.\nThe second contest is about visionary articles, the usefulness of cryptocurrency, and Ergo. The best articles will be chosen every two weeks. With lots of content, competitions can be weekly. In case of a lack of content, articles may join the next prize pools.\nTop article - 1000 ERGs\nSecond place - 700 ERGs\nThird place - 500 ERGs\nErgo Foundation aims to establish partnerships with organizations that will contribute to developing the Ergo ecosystem or that share the values of the Ergo Foundation https://ergoplatform.org/en/foundation/.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-07-27-ergo-foundation-new-members-and-contests/","subtitle":null,"title":"Ergo Foundation - New members and contests"},{"contents":"","link":"https://github.com/ergoplatform/explorer-backend/releases/tag/1.1.0","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergo-explorer-backend-1-1-0-has-been-released/","subtitle":"It includes: Fixed grabber bug causing chain statuses corruption in some cases, ResultSet deduplication enabled for search queries, more precise confirmations calculation","title":"Ergo Explorer Backend 1.1.0 has been released"},{"contents":"","link":"https://www.youtube.com/watch?v=fpEDJ1CM6ns","permalink":"https://ergoplatform.org/en/news/2020-07-29-video-how-to-set-up-and-configure-a-full-ergo-node-on-windows/","subtitle":"Great video made by a community member on setting up an Ergo full node on Windows","title":"Video: How to set up and configure a full Ergo node on Windows"},{"contents":"","link":"https://twitter.com/coinexcom/status/1286120069051887619","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergo-erg-is-listed-on-coinex-exchange/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on Coinex Exchange","title":"Ergo ($ERG) is listed on Coinex Exchange"},{"contents":"","link":"https://github.com/Emurgo/Emurgo-Research/blob/master/ergo/Governance-Stake-Slashing-Pool-Spec.md","permalink":"https://ergoplatform.org/en/news/2020-07-29-new-emurgo-research-this-week-we-bring-you-the-official-oracle-pools-smart-contract-spec/","subtitle":"\"This is the first UTXO dApp specification ever released and is an exciting step forward in the Emurgo Ergo DeFi-focused partnership\"","title":"\"New EMURGO Research: This week we bring you the official Oracle Pools Smart Contract Spec!\""},{"contents":"","link":"https://github.com/ergoplatform/ergo-contracts","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergo-contracts/","subtitle":"A repository of the Ergo smart contracts with compilation, testing, and formal verification tooling","title":"\"Ergo Contracts\""},{"contents":"","link":"https://medium.com/gains-associates/ergo-telegram-quiz-ama-june-13-8d77c48eca98","permalink":"https://ergoplatform.org/en/news/2020-07-29-summary-of-the-ama-with-ergo-platform/","subtitle":"AMA with GAINS community","title":"\"Summary of the AMA with Ergo Platform\""},{"contents":"","link":"https://ergopool.io","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergopool-is-live-on-mainnet/","subtitle":"The Mining Hub for Self-Sovereign Ergo Miners!","title":"\"Ergopool is live on mainnet\""},{"contents":"DeFi is the next major frontier for blockchain technology – but what does the current surge of interest mean for Ergo?\nThe narrative around blockchain technology is evolving in front of us. The use cases for smart contract platforms are becoming clearer by the day, encapsulated in the catch-all term of ‘DeFi’, or Decentralised Finance.\nDeFi services are often much like their traditional counterparts, including lending and derivatives platforms, as well as more exotic services. Unlike their conventional analogues, though, these are open platforms, accessible by anyone and built with the transparency and security that come from the blockchains on which they are hosted.\nThe DeFi surge The last two weeks have seen the nascent DeFi space change rapidly, catalysed by the launch of lending platform Compound’s governance token, COMP. One of the inherent benefits of DeFi is transparency, and the impact of this move can clearly be tracked on websites like DeFi Pulse.\nCompound almost immediately took the top spot in terms of Total Value Locked (TVL), pushing the Maker Protocol into second place. From a baseline of $100 million, Compound rose to over $600 million TVL in only ten days, as tens of thousands of users flocked to take advantage of the platform’s distribution of COMP tokens in the new craze of ‘Yield farming’.\nBut it certainly wasn’t all back for the rest. In the same period of time, the Maker Protocol hit an all-time high for the amount of Dai generated using its Vaults. Meanwhile Sythetix, a synthetic assets platform, has doubled its TVL.\nThis is not like a bear market rally in the regular crypto world, where value is simply shuffled between BTC and alts, while the general trajectory is down. Something else is at work here.\nUnconventional thinking The reason may rest on another inherent property of DeFi platforms: composability. Because DeFi dApps are transparent and open, they can be built upon and adapted, creating new dApps easily. And then those dApps themselves can be plugged into other applications, adapted and redeployed in a virtuous circle of usage.\nCompound’s rise goes hand-in-hand with the rise of other DeFi initiatives because it is so easy to connect different platforms in the DeFi world. It’s almost hard to view these as distinct platforms at all, when the boundaries are so porous. Assets can be leveraged, lent and deployed on one dApp in order to take advantage of the benefits currently offered by another. And there’s evidence – thanks to the transparency of the blockchain – that’s exactly what’s happening.\nDeFi demands some unconventional thinking. Instead of viewing the sector in the fairly natural human terms of competition, who is #1 and what their lead is over #2, it requires a paradigm shift and a recognition that composability means collaboration by default. It’s not only desirable, but unstoppable – inseparable from what DeFi is, at its core. Open, collaborative financial services.\nFor Ergo, the surge of interest in the sector is an exciting development and confirms the decision to prioritise diverse smart contract and DeFi functionality. It also points to the need for interoperability between blockchains, enabling any smart contract protocol to interact with any other.\nErgo is well on the way to that end with atomic swaps, which will facilitate cross-platform activity – and ultimately, the use of ERG and Ergo assets in Ethereum and other blockchains’ DeFi services, and vice versa.\nDeFi will clearly be a big part of financial services provision in the coming years, and Ergo will bring unique contributions to the space.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020-07-02-ergo-and-the-explosion-of-defi/","subtitle":null,"title":"Ergo and the explosion of DeFi"},{"contents":"The joint research on oracle pools will be implemented in the Ergo stablecoin project.\nOracles are one of the critical elements of DeFi, providing a link between the siloed and self-contained world of the blockchain, and real-world data. It is imperative that dApps have access to reliable price data, among other information, in order to execute effectively and securely.\nNew research from the Ergo-Emurgo partnership offers a new way to approach the problem of achieving consensus and posting data to the blockchain: Oracle Pools.\nDespite the importance of oracles in providing data feeds to dApps, the research notes that ‘oracles schemes today lack transparency, accountability, and operational robustness’. This makes them a potential single point of failure, threatening the security of any software that relies on them. In the case of a stablecoin, it can mean the risk of losing its peg, and opening it to attack and exploits.\nOracle pools The concept of oracles pools was designed for Ergo’s extended UTXO smart contract model, though the high-level overview can be adapted for use in Account-based systems (like Ethereum).\n Oracle pools are a new model which attempt to address said issues, while also providing further new capabilities. From guaranteeing the data posting schedule, incorporating game theoretic incentives + disincentives, built-in governance, potential dynamic entry, and building oracle datapoint hierarchies of confidence, there are many possibilities unlocked with this model.\n Oracle pools involve several oracles operating together, with different shares in the pool, and receiving payouts based on the reliability of the data they provide. (To determine the ‘true’ value of the data, outliers are removed and the data points averaged.) To participate, an oracle needs to post collateral, and can be ‘fined’ for failure to provide high-quality data on time.\nThus – as in the PoW consensus approach itself – honest oracles are rewarded, while fraudulent or unreliable ones waste their resources.\nStablecoin When the new model is implemented, it will become a key part of the technology that will underpin the Ergo stablecoin. (This will take an algorithmic or collateralised approach, rather than being a fiat-backed coin like USDT or USDC.)\nFurther details about the new stablecoin will be published in due course, with the new project expected to launch later in 2020.\nTo find out more about Oracle pools, read the new research.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_06_30_ergo_emurgo_oracles/","subtitle":null,"title":"Ergo-Emurgo partnership yields new model for oracles"},{"contents":"","link":"https://github.com/Emurgo/Emurgo-Research/blob/master/oracles/Oracle-Pools.md","permalink":"https://ergoplatform.org/en/news/2020-07-29-new-emurgo-research-we-present-a-brand-new-model-oracle-pools-which-reimagines-oracles-from-the-ground-up-this-research-is-part-of-the-emurgo-ergo-partnership/","subtitle":"Oracle Pools","title":"\"New EMURGO Research: We present a brand new model, Oracle Pools, which reimagines oracles from the ground up. This research is part of the Emurgo Ergo partnership\""},{"contents":"","link":"https://www.ergoforum.org/t/lets-sign-collectively-distributed-signatures-api/259","permalink":"https://ergoplatform.org/en/news/2020-07-29-lets-sign-collectively-distributed-signatures-api/","subtitle":"Another step to unveil real threshold on-chain signatures to the masses!","title":"\"Let’s sign collectively! Distributed signatures API\""},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.7","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergo-platform-reference-client-3-2-7-has-been-released/","subtitle":"It contains:  Generation of block candidate with certain transactions included ( #929 ) Fix for #1035 (incorrect cost computation on signer side) Double-checks for inputs and outputs of generated transaction.","title":"Ergo Platform Reference Client 3.2.7 has been released"},{"contents":"","link":"https://github.com/ergoMixer/","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergomixer-v1-0-0-is-available-for-download/","subtitle":"Big thanks to team of anons!","title":"\"Ergomixer v1.0.0 is available for download\""},{"contents":"","link":"https://thedailychain.com/ergo-with-founder-alex-chepurnoy/","permalink":"https://ergoplatform.org/en/news/2020-07-29-ergo-with-founder-alex-chepurnoy-the-daily-chain/","subtitle":"\"Ergo is 'Bitcoin-like', but brings with it the latest in blockchain technology and research\"","title":"ERGO with Founder Alex Chepurnoy - The Daily Chain"},{"contents":"","link":"https://twitter.com/Sistemkoin/status/1273263813824000000","permalink":"https://ergoplatform.org/en/news/2020_06_20/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on Sistemkoin Exchange","title":"Ergo ($ERG) is listed on Sistemkoin Exchange"},{"contents":"Cardano and Ergo take quite different approaches to DeFi and blockchain development, but there are specific areas in which they significantly overlap. This allows the possibility of fruitful collaboration, with benefits to two distinct ecosystems – and the blockchain space as a whole.\nThe recent partnership announced between Emurgo and Ergo has been positively received by both communities. For good reason: this is an exceptional opportunity to pool resources into an important and emerging area of research, while allowing both projects to use the insights gained in their own ways and for their own roadmaps.\nIn some ways, Cardano and Ergo are quite different. Cardano, for example, is a proof-of-stake platform, developed in Haskell and with smart contracts written in the custom Haskell-based Plutus language.\nErgo, meanwhile, is a proof-of-work platform based on the Scorex framework, which was also created by Ergo’s lead developer Alexander Chepurnoy (@kushti). Its smart contracts are written in ErgoScript, which draws features from Scala.\nUTXO smart contracts Where they overlap, and the most promising area for collaboration, is in their use of the extended UTXO model. (You can read more about Ergo’s use of UTXOs here.)\nBasing smart contracts on an extended UTXO model is a relatively new idea. Platforms like Ethereum use an Account model, which has very different implications. Recent research by Robert Kornacki (R\u0026amp;D Engineer at Emurgo) explains this in more detail:\n Extended UTXO systems enable full fledged turing complete (across transactions) smart contracts. This is a novel innovation that allows the latest generation of blockchains to reclaim the original model that Bitcoin used, but now with a lot more power.\nGiven that smart contract powered UTXO systems are nascent, there is a distinct lack of known design patterns which developers can rely on when building dApps. Looking at account-based models like Ethereum, encoding protocols in the UTXO model is as comparably different as writing imperative code is to functional.\nThe UTXO approach has the ability to revolutionise smart contracts, and the findings of the collaboration will doubtless prove valuable to both Cardano and Ergo as they implement their different roadmaps and technologies.\n DeFi collaboration This is a great example of how DeFi thrives on collaboration, rather than competition. Open source systems benefit each other, making each other stronger and tapping into each others’ networks rather than taking away from them.\nA great example of this is the Yoroi wallet, which will become a kind of MetaMask for engaging with Ergo-based dApps as well as the Cardano ecosystem. Meanwhile, features that Ergo has already implemented (such as NiPoPoW) and will implement in the future offer a precedent for Cardano and other blockchains, even if those features cannot directly be imported.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_06_11_emurgo_ergo/","subtitle":null,"title":"The opportunities of the Ergo/Emurgo partnership"},{"contents":"","link":"https://emurgo.io/en/blog/emurgo-to-partner-with-ergo-and-build-blockchain-based-decentralized-financial-solutions","permalink":"https://ergoplatform.org/en/news/2020_06_09/","subtitle":"EMURGO, a global blockchain solutions firm \u0026 a founding entity of the globally recognized Cardano protocol, announces today a strategic partnership with Ergo - a proof-of-work blockchain protocol built to be a platform for applications with a main focus on providing simple solutions for financial contracts with its UTXO-based smart contracts.","title":"EMURGO to Partner with Ergo and Build Blockchain-Based Decentralized Financial Solutions"},{"contents":"The collaboration will encompass a range of objectives – including exploration of a decentralised stablecoin solution.\nErgo, the smart contracts platform designed by former IOHK engineers, and Emurgo, a global blockchain solutions firm and one of the founding entities of Cardano, have entered into a partnership with the aim of furthering the DeFi space with ambitious new research and technology.\nResearch-driven technology Both Ergo and Emurgo have a reputation for taking an academically-rigorous approach to development, basing their technology on peer-reviewed research by top cryptographers and blockchain specialists.\nThe purpose of the collaboration is the creation of new decentralised fintech applications, with a particular interest in enterprise users. One promising area of research and development will be a joint stablecoin project. Emurgo brings deep expertise in Cardano’s technical infrastructure, while Ergo’s team has pioneered UTXO-based smart contracts and Sigma protocols.\nYoroi integration The partnership will also see Ergo’s native network token (ERG) added to Emurgo’s Yoroi wallet. Yoroi is a secure desktop and mobile lite wallet for Cardano.\n‘This is a fantastic opportunity to work with a well-respected technology partner, whose areas of expertise perfectly complement our own,’ comments Alexey Chepurnoy, the founder and lead developer of Ergo. ‘The values of the two organisations are closely aligned, particularly with regards to the emphasis on implementing the latest research. Moreover, integration with Emurgo’s Yoroi wallet will see Ergo placed before tens of thousands of new users, further improving the strength of the Ergo community and the decentralisation of the network.’\nAbout Emurgo Emurgo is a global blockchain technology company providing solutions for developers, startups, enterprises and governments. Emurgo develops enterprise-grade applications, builds developer tools, invests in startups, and provides blockchain education.\nThe company has offices and manages projects in Singapore, Japan, the USA, India, and Indonesia, and is a founding member of the Cardano protocol – arguably the most research-driven project in the blockchain space. Emurgo has recently launched a key piece of technology, the Traceability Solution, signalling its entry into the enterprise space.\nAbout Ergo The Ergo platform, meanwhile, is a proof-of-work based blockchain that takes a unique approach to smart contracts and dApps. Ergo builds on the strongest and best-established features of the Bitcoin protocol, adding extensive new features for DeFi.\nThese include UTXO-based smart contracts and Sigma protocols: efficient, zero-knowledge protocols that enable implementation of tasks that would be impossible, risky or expensive on other platforms. This includes out-of-the-box support for custom ring and threshold signatures.\nTogether, Ergo and Emurgo will develop solutions to meet the growing demand from forward-thinking enterprises, enabling them to improve efficiency, security and privacy. Interoperability between Ergo and Cardano will facilitate implementation of both bespoke and larger projects.\nFor more information about Ergo, visit ergoplatform.org\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_06_09_press_release/","subtitle":null,"title":"Press release: Ergo Foundation partners with Emurgo to research and develop new DeFi solutions"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.6","permalink":"https://ergoplatform.org/en/news/2020_05_31/","subtitle":"This release is fixing a problem from 3.2.5 with possibility of duplicate inputs for transaction assembler, see ( #1126 ) for details","title":"Ergo Mainnet 3.2.6 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.5","permalink":"https://ergoplatform.org/en/news/2020_05_26/","subtitle":"Support for offchain boxes spending ( #1032 ), downloading logic fix for the case when best full block is not on the best header-chain","title":"Ergo Mainnet 3.2.5 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.4","permalink":"https://ergoplatform.org/en/news/2020_05_18/","subtitle":"Build transaction with token burning (PR #1101), default transaction complexity limit raised to 250K (PR #1104) and fixes","title":"Ergo Mainnet 3.2.4 released"},{"contents":"","link":"https://eprint.iacr.org/2020/560.pdf","permalink":"https://ergoplatform.org/en/news/2020_05_15/","subtitle":"We present ZeroJoin, a practical privacy-enhancing protocol for blockchain transactions.","title":"ZeroJoin: Combining ZeroCoin and CoinJoin (Alexander Chepurnoy and Amitabh Saxena)"},{"contents":"We have three great new developments to announce to the Ergo community, all of which will boost our user base and decentralisation!\nWe have not just one but three outstanding developments for the Ergo ecosystem to announce! Together, these will make it easier than ever before to acquire, trade, store and spend ERG – and will open up a huge new potential community of users, developers and hodlers.\nCoinsbit listing and airdrop Firstly, ERG has been listed on Coinsbit: a major trading platform that enables fiat deposits and withdrawals via debit and credit card. Ergo will be listed in three pairs:\n ERG/BTC ERG/USDT ERG/USD  We anticipate this will bring new traders and liquidity to the currency. The Coinsbit Telegram group has around 120,000 members, so this is a great opportunity to welcome new people to the community.\nTo celebrate this landmark development and promote Ergo to new traders, we are holding a joint airdrop. The conditions are as follows:\n Join Ergo’s Telegram chat: https://t.me/ergoplatform Register on Coinsbit and complete KYC Send your Coinsbit username to @Coinsbit on Telegram Receive your 5 ERG airdrop!  The airdrop will run for just 10 days and is limited to the first 5,000 participants, so don’t delay!\nCypra wallet The second major development is that Ergo will be integrated with the Cypra wallet. This is a fantastic multi-currency desktop and mobile wallet. It’s secure, open-source and non-custodial – making it super easy and convenient to deal with your coins!\nCypra is designed to address the worst shortcomings of conventional wallets, exchanges and payment services. It enables users to spend their crypto on real-world purchases with minimal friction and the lowest crypto-to-fiat conversion fees.\nYou can find out more in Cypra’s one-page summary. Check it out, keep your ERG safe and user them in a variety of cool ways!\nErgo mining pool Lastly, we will have Ergo’s first censorhip resistant mining pool with collaterals!\nThis is a really interesting development, since Ergo includes protection against ordinary pools by design. This is a feature implemented to improve decentralisation and accessibility for smaller, regular miners.\nJason, the pool owner, has created a decentralised pool using a smart contract that ensures miners who connect to the pool get paid. This is an intriguing example of smart contracts being used to bypass or change the consensus of a platform. It’s DeFi and community participation in action.\nThere are plans to implement the Stratum protocol and efficient mining software after the pool launches.\nIf you’d like to find out more about the theory behind pool mining on Ergo, we have an academic paper that was presented at Financial Cryptography 2020.\nThat’s all for now – but stay tuned, because we have more developments on the way!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_05_14_updates/","subtitle":null,"title":"Ergo update, 14 May 2020: New exchange, wallet and first mining pool with collaterals!"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_05_14_updates/","permalink":"https://ergoplatform.org/en/news/2020_05_14/","subtitle":"Integration with Cypra wallet, Coinsbit listing and censorhip resistant mining pool","title":"Ergo update, 14 May 2020: New exchange, wallet and first mining pool with collaterals!"},{"contents":"","link":"https://ergoplatform.org/en/hall_of_fame/","permalink":"https://ergoplatform.org/en/news/2020_05_13/","subtitle":"Ergo Platform moving towards being true community-driven Proof-of-Work cryptocurrency","title":"\"Team\" page is replaced with \"Hall of Fame\""},{"contents":"","link":"https://www.facebook.com/coinsbit.io.cr/posts/2308490386121520","permalink":"https://ergoplatform.org/en/news/2020_05_13_2/","subtitle":"We're happy to announce that Ergo ($ERG) is listed on Coinsbit Exchange","title":"Ergo ($ERG) is listed on Coinsbit Exchange"},{"contents":"","link":"https://bpsaa.vision/new-member-announcement-ergo","permalink":"https://ergoplatform.org/en/news/2020_05_13_3/","subtitle":"Ergo is a smart contracts and DeFi platform that offers powerful but safe smart contracts, with Sigma protocols enabling flexible, highly composable applications out of the box.","title":"Ergo joins BPSAA thinktank"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.3","permalink":"https://ergoplatform.org/en/news/2020_05_12/","subtitle":"Fixes and improvements. Details in the description of the release","title":"Ergo Platform Reference Client 3.2.3 released"},{"contents":"Ergo allows any user to run a full node with low resources – meaning you can help maintain the network with a device as simple as a Raspberry Pi.\nIn a previous post, we looked at Ergo’s SPV mode, which allows for secure, efficient mobile clients. This enables users to make transactions using almost any device.\nAt the other end of the scale, you might want to run a full node. If you’re a miner, this will require that you download the full blockchain, because you’ll need the whole UTXO (unspent outputs) set to mine new blocks. But you can still run a full node without that UTXO set – vastly reducing the specification and expense of the hardware needed.\nErgo blocks In Ergo, just like Bitcoin, Ethereum and other blockchains, blocks are broken into sections. In Bitcoin, there’s simply a block header and the transactions themselves. But in Ergo, we have some extra sections that enable new functionality:\n Header Transactions Extensions Proofs of UTXO transformation  The ‘extension’ section contains certain mandatory fields (including links for NiPoPoW, once per 1,024 block epoch) and parameters for miner voting, such as current block size. It can also contain arbitrary fields.\nWhat this means in practice is that different types of node and client can download only those sections of the blocks they need – reducing the demands for storage, bandwidth and CPU cycles.\nLite full nodes While miners need to download everything, lite full nodes only need the transactions and proofs. This means they have a cryptographic guarantee of transactions, without holding the full UTXO set itself.\nLite full nodes check the proofs generated by full nodes (including miners) who do hold the full blockchain, providing a guarantee of ledger validity. In Ethereum, these nodes are called Stateless Clients.\nFor Ergo, it means you can run a full node and maintain the network with a device as simple as a Raspberry Pi with 512 MB RAM. This provides the ideal balance between ensuring the security of the network and placing an unnecessary burden on users who wish to do so – improving decentralisation and democratising participation in the Ergo network and community.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_05_08_lite_full_nodes/","subtitle":null,"title":"Building Ergo: Lite full nodes"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_05_08_lite_full_nodes/","permalink":"https://ergoplatform.org/en/news/2020_05_08/","subtitle":"The extension section contains certain mandatory fields including links for NiPoPoW and parameters for miner voting, such as current block size.","title":"Building Ergo: Lite full nodes"},{"contents":"Stablecoins are a major use case for DeFi but come in various different forms. The stablecoin space is still relatively young and underserved – but that’s changing fast.\nStablecoins are one of the most important and popular DeFi products, enabling users to hedge and store value on the blockchain, without having to use exchanges or other centralised providers.\nAs a smart contracts and DeFi platform, Ergo is well suited for building all kinds of dApps, including stablecoins. You’ll certainly be hearing more from us in the future about a stablecoin on the Ergo blockchain, but until then, we want to introduce and unpack the idea as context for what’s coming.\nDifferent stablecoin approaches There are various ways to peg a crypto token to the dollar or another fiat currency. The easiest way is to hold dollars in a bank account, and issue one token for every dollar you have. This is exactly the approach that Tether (USDT) takes. This offers users the ability to store and transfer USD easily, without using an exchange. However, this approach is still highly centralised; you have to trust Tether that they have enough dollars in their bank account to cover the issued tokens. Tether is well known for being opaque and refusing proper audits. The token could also be shut down if a regulator managed to freeze their accounts.\nThere are various backed stablecoins on the market, which take broadly the same approach. Tokens like USDC and Gemini dollars are much the same, but they are far more transparent, and operate within a clear regulatory framework. Then there are projects like TrustToken, which underpins the TrueUSD token (TUSD); this is much the same again, though takes a more distributed approach, with both a high degree of transparency and multiple banking partners.\nAll of these necessarily have a degree of centralisation and risk, because they rely on banking partners – and those accounts can potentially be frozen, shut down or even raided.\nOther projects – notably the Maker Protocol – attempt to address this with a fully decentralised model. Maker’s Dai is an algorithmic stablecoin: a ‘synthetic’ dollar that is not backed by real dollars as USDT, USDC and other stablecoins are.\nDai are issued from ‘Vaults’ backed by crypto collateral (mostly ETH). A system of smart contracts and oracles (decentralised price feeds) ensures that every Dai issued is collateralised by at least $1.50; if the ratio falls too low, the Vault is closed and the Dai repurchased automatically. It’s a complex and impressive system, and the largest project in the DeFi space.\nSome stablecoins are more stable than others Stablecoins have been around since at least 2014, though the first attempts had limited success. The earliest algorithmic coins, like NuBits and BitUSD, did not have the benefit of smart contracts platforms (which were only available with the launch of Ethereum in 2015). They tended to be centralised or semi-centralised, and didn’t work well in practice. (NuBits, for example, lost its peg and has completely collapsed.)\nTether, which has been around since 2014, has grown into a multi-billion-dollar phenomenon, with tens of billions of dollars of daily volumes. However, while Tether generally keeps its peg pretty well, occasional quirks of the market and fears about the company’s reserves mean it has not always been worth $1 (once dropping as low as $0.90). USDC, which is more trustworthy and transparent, tends to have lower spreads and a more reliable peg.\nMeanwhile Dai, as the foremost algorithmic stablecoin, has historically done well. It aims to maintain a ‘soft’ peg, with decentralised monetary policy nudging it back towards $1 if market conditions push it too far away from this. This has generally been successful; the only time prices have deviated significantly was on the enormous market volatility of ‘Black Thursday’ in March, which saw a massive sell-off of almost every fiat and crypto asset.\nAlgo, collateralised, back or a combination? And so the existing stablecoins take one or more of several approaches to keeping the token pegged to the dollar. The simplest, but also the most centralised, is to back the token with actual dollars. You can also back it with crypto, so long as you ensure there is enough collateral to cover the tokens issued in the event of market volatility. Algorithmic stablecoins use price feeds and decentralised monetary policy to make it more or less attractive to buy or sell the tokens, helping to ensure the price gravitates towards $1.\nEvery approach has its strengths and weaknesses. Ergo will be announcing details of its own implementations in the coming weeks, and explaining why its developers are taking the approach they are.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_05_05_stablecoins/","subtitle":null,"title":"Introduction to stablecoins"},{"contents":"There’s often a tension in the crypto world between security and convenience. That trade-off is unacceptable if we want these technologies to be widely used. Here’s how Ergo addresses one common and very important issue.\nWe all know that the most secure way to use Bitcoin, or any crypto, is to download a copy of the blockchain and run a full node yourself. That way, every time you or anyone else makes a transaction, your client checks the blockchain to ensure it’s valid. You don’t have to trust anyone else.\nA full Bitcoin node checks all the blocks in the blockchain (using headers) and makes sure there are no fraudulent transactions. It’s a very secure way of using crypto – but there’s a problem. It requires significant bandwidth, storage and processing power. That kind of commodity hardware is expensive, and using a full node to validate and make transactions is in any case unsuitable for mobile devices. This is particularly true for Bitcoin, where the blockchain is over 270 GB and counting.\nSPV Simplified Payment Verification (SPV) is designed to address this problem, as described in the Bitcoin white paper:\n It is possible to verify payments without running a full network node. A user only needs to keep a copy of the block headers of the longest proof-of-work chain, which he can get by querying network nodes until he\u0026rsquo;s convinced he has the longest chain, and obtain the Merkle branch linking the transaction to the block it\u0026rsquo;s timestamped in. He can\u0026rsquo;t check the transaction for himself, but by linking it to a place in the chain, he can see that a network node has accepted it, and blocks added after it further confirm the network has accepted it.  Satoshi notes that this is not a perfect solution, and is vulnerable to an attacker overpowering the network and fooling SPV users.\nMoreover, while SPV mode is intended for resource-limited devices, even this ‘lite’ approach is not always feasible. Ethereum’s headers alone total around 5 GB to download. Thus Ethereum mobile clients do not validate chain validity and so blindly have to trust third parties.\nThere are proposals to reduce the requirements for SPV mode by checking just a few random headers, instead of all of them. But it’s hard to do that securely.\nEfficient SPV Several years have been spent researching and developing secure protocols that allow for efficient SPV clients. The two best-known and most reliable protocols are NiPoPoWs and FlyClient.\nErgo implements NiPoPoWs, or Non-interactive Proof-of-Proof-of-Work. This technology can be explored in full on this dedicated website: https://nipopows.com:\n  Non-Interactive Proofs of Proof-of-Work (NIPoPoWs) are short stand-alone strings that a computer program can inspect to verify that an event happened on a proof-of-work-based blockchain without connecting to the blockchain network and without downloading all block headers. For example, these proofs can illustrate that a cryptocurrency payment was made.\n  NIPoPoWs allow very efficient mobile wallets to be created. SPV wallets are already very lightweight compared to full nodes because they only require the download of block headers, not the whole blockchain. NIPoPoW wallets need to download only a small sample of block headers, around 250, when SPV clients need to download half a million block headers. The sample needed changes but doesn\u0026rsquo;t grow much in size as the blockchain grows larger by the years, even after decades of data has been accumulated.\n  This enables us to build a mobile SPV client that requires around just 100KB of block headers to be downloaded.\nA super-efficient Ergo wallet with SPV security is in development, so stay tuned for more updates!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_05_1_spv_security/","subtitle":null,"title":"Building Ergo: SPV security"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_05_1_spv_security/","permalink":"https://ergoplatform.org/en/news/2020_05_01/","subtitle":"Ergo implements NiPoPoWs, or Non-interactive Proof-of-Proof-of-Work. This technology can be explored in full on this dedicated website: https://nipopows.com/","title":"Building Ergo: SPV security "},{"contents":" With thanks to Robert Kornacki for polishing of the draft.\n Introduction ErgoScript is the smart contract language used by the Ergo blockchain. While it has concise syntax adopted from Scala/Kotlin, it still may seem confusing at first because conceptually ErgoScript is quite different compared to conventional languages which we all know and love. This is because Ergo is a UTXO based blockchain, whereas smart contracts are traditionally associated with account based systems like Ethereum. However, Ergo\u0026rsquo;s transaction model has many advantages over the account based model and with the right approach it can even be significantly easier to develop Ergo contracts than to write and debug Solidity code.\nBelow we will cover the key aspects of the Ergo contract model which makes it different:\nParadigm The account model of Ethereum is imperative. This means that the typical task of sending coins from Alice to Bob requires changing the balances in storage as a series of operations. Ergo\u0026rsquo;s UTXO based programming model on the other hand is declarative. ErgoScript contracts specify conditions for a transaction to be accepted by the blockchain (not changes to be made in the storage state as result of the contract execution).\nScalability In the account model of Ethereum both storage changes and validity checks are performed on-chain during code execution. In contrast, Ergo transactions are created off-chain and only validation checks are performed on-chain thus reducing the amount of operations performed by every node on the network. In addition, due to immutability of the transaction graph, various optimization strategies are possible to improve throughput of transactions per second in the network. Light verifying nodes are also possible thus further facilitating scalability and accessibility of the network.\nShared state The account-based model is reliant on shared mutable state which is known to lead to complex semantics (and subtle million dollar bugs) in the context of concurrent/ distributed computation. Ergo\u0026rsquo;s model is based on an immutable graph of transactions. This approach, inherited from Bitcoin, plays well with the concurrent and distributed nature of blockchains and facilitates light trustless clients.\nExpressive Power Ethereum advocated execution of a turing-complete language on the blockchain. It theoretically promised unlimited potential, however in practice severe limitations came to light from excessive blockchain bloat, subtle multi-million dollar bugs, gas costs which limit contract complexity, and other such problems. Ergo on the flip side extends UTXO to enable turing-completeness while limiting the complexity of the ErgoScript language itself. The same expressive power is achieved in a different and more semantically sound way.\nWith the all of the above points, it should be clear that there are a lot of benefits to the model Ergo is using. In the rest of this article I will introduce you to the concept of FlowCards - a dApp developer component which allows for designing complex Ergo contracts in a declarative and visual way.\nFrom Imperative to Declarative In the imperative programming model of Ethereum a transaction is a sequence of operations executed by the Ethereum VM. The following Solidity function implements a transfer of tokens from sender to receiver. The transaction starts when sender calls this function on an instance of a contract and ends when the function returns.\n// Sends an amount of existing coins from any caller to an address function send(address receiver, uint amount) public { require(amount \u0026lt;= balances[msg.sender], \u0026#34;Insufficient balance.\u0026#34;); balances[msg.sender] -= amount; balances[receiver] += amount; emit Sent(msg.sender, receiver, amount); } The function first checks the pre-conditions, then updates the storage (i.e. balances) and finally publishes the post-condition as the Sent event. The gas which is consumed by the transaction is sent to the miner as a reward for executing this transaction.\nUnlike Ethereum, a transaction in Ergo is a data structure holding a list of input coins which it spends and a list of output coins which it creates preserving the total balances of ERGs and tokens (in which Ergo is similar to Bitcoin).\nTurning back to the example above, since Ergo natively supports tokens, therefore for this specific example of sending tokens we don\u0026rsquo;t need to write any code in ErgoScript. Instead we need to create the \u0026lsquo;send\u0026rsquo; transaction shown in the following figure, which describes the same token transfer but declaratively.\nThe picture visually describes the following steps, which the network user needs to perform:\n Select unspent sender\u0026rsquo;s boxes, containing in total tB \u0026gt;= amount of tokens and B \u0026gt;= txFee + minErg ERGs. Create an output target box which is protected by the receiver public key with minErg ERGs and amount of T tokens. Create one fee output protected by the minerFee contract with txFee ERGs. Create one change output protected by the sender public key, containing B - minErg - txFee ERGs and tB - amount of T tokens. Create a new transaction, sign it using the sender\u0026rsquo;s secret key and send to the Ergo network.  What is important to understand here is that all of these steps are preformed off-chain (for example using Appkit Transaction API) by the user\u0026rsquo;s application. Ergo network nodes don\u0026rsquo;t need to repeat this transaction creation process, they only need to validate the already formed transaction. ErgoScript contracts are stored in the inputs of the transaction and check spending conditions. The node executes the contracts on-chain when the transaction is validated. The transaction is valid if all of the conditions are satisfied.\nThus, in Ethereum when we \u0026ldquo;send amount from sender to recipient\u0026rdquo; we are literally editing balances and updating the storage with a concrete set of commands. This happens on-chain and thus a new transaction is also created on-chain as the result of this process.\nIn Ergo (as in Bitcoin) transactions are created off-chain and the network nodes only verify them. The effects of the transaction on the blockchain state is that input coins (or Boxes in Ergo\u0026rsquo;s parlance) are removed and output boxes are added to the UTXO set.\nIn the example above we don\u0026rsquo;t use an ErgoScript contract but instead assume a signature check is used as the spending pre-condition. However in more complex application scenarios we of course need to use ErgoScript which is what we are going to discuss next.\nFrom Changing State to Checking Context In the send function example we first checked the pre-condition (require(amount \u0026lt;= balances[msg.sender],...)) and then changed the state (i.e. update balances balances[msg.sender] -= amount). This is typical in Ethereum transactions. Before we change anything we need to check if it is valid to do so.\nIn Ergo, as we discussed previously, the state (i.e. UTXO set of boxes) is changed implicitly when a valid transaction is included in a block. Thus we only need to check the pre-conditions before the transaction can be added to the block. This is what ErgoScript contracts do.\nIt is not possible to \u0026ldquo;change the state\u0026rdquo; in ErgoScript because it is a language to check pre-conditions for spending coins. ErgoScript is a purely functional language without side effects that operates on immutable data values. This means all the inputs, outputs and other transaction parameters available in a script are immutable. This, among other things, makes ErgoScript a very simple language that is easy to learn and safe to use. Similar to Bitcoin, each input box contains a script, which should return the true value in order to 1) allow spending of the box (i.e. removing from the UTXO set) and 2) adding the transaction to the block.\nIf we are being pedantic, it is therefore incorrect (strictly speaking) to think of ErgoScript as the language of Ergo contracts, because it is the language of propositions (logical predicates, formulas, etc.) which protect boxes from \u0026ldquo;illegal\u0026rdquo; spending. Unlike Bitcoin, in Ergo the whole transaction and a part of the current blockchain context is available to every script. Therefore each script may check which outputs are created by the transaction, their ERG and token amounts (we will use this capability in our example DEX contracts), current block number etc.\nIn ErgoScript you define the conditions of whether changes (i.e. coin spending) are allowed to happen in a given context. This is in contrast to programming the changes imperatively in the code of a contract.\nWhile Ergo\u0026rsquo;s transaction model unlocks a whole range of applications like (DEX, DeFi Apps, LETS, etc), designing contracts as pre-conditions for coin spending (or guarding scripts) directly is not intuitive. In the next sections we will consider a useful graphical notation to design contracts declaratively using FlowCard Diagrams, which is a visual representation of executable components (FlowCards).\nFlowCards aim to radically simplify dApp development on the Ergo platform by providing a high-level declarative language, execution runtime, storage format and a graphical notation.\nWe will start with a high level of diagrams and go down to FlowCard specification.\nFlowCard Diagrams The idea behind FlowCard diagrams is based on the following observations: 1) An Ergo box is immutable and can only be spent in the transaction which uses it as an input. 2) We therefore can draw a flow of boxes through transactions, so that boxes flowing in to the transaction are spent and those flowing out are created and added to the UTXO. 3) A transaction from this perspective is simply a transformer of old boxes to the new ones preserving the balances of ERGs and tokens involved.\nThe following figure shows the main elements of the Ergo transaction we\u0026rsquo;ve already seen previously (now under the name of FlowCard Diagram).\nThere is a strictly defined meaning (semantics) behind every element of the diagram, so that the diagram is a visual representation (or a view) of the underlying executable component (called FlowCard).\nThe FlowCard can be used as a reusable component of an Ergo dApp to create and initiate the transaction on the Ergo blockchain. We will discuss this in the coming sections.\nNow let\u0026rsquo;s look at the individual pieces of the FlowCard diagram one by one.\n1. Name and Parameters Each flow card is given a name and a list of typed parameters. This is similar to a template with parameters. In the above figure we can see the Send flow card which has five parameters. The parameters are used in the specification.\n2. Contract Wallet This is a key element of the flow card. Every box has a guarding script. Often it is the script that checks a signature against a public key. This script is trivial in ErgoScript and is defined like the def pk(pubkey: Address) = { pubkey } template where pubkey is a parameter of the type Address. In the figure, the script template is applied to the parameter pk(sender) and thus a concrete wallet contract is obtained. Therefore pk(sender) and pk(receiver) yield different scripts and represent different wallets on the diagram, even though they use the same template.\nContract Wallet contains a set of all UTXO boxes which have a given script derived from the given script template using flow card parameters. For example, in the figure, the template is pk and parameter pubkey is substituted with the `sender' flow card parameter.\n3. Contract Even though a contract is a property of a box, on the diagram we group the boxes by their contracts, therefore it looks like the boxes belong to the contracts, rather than the contracts belong to the boxes. In the example, we have three instantiated contracts pk(sender), pk(receiver) and minerFee. Note, that pk(sender) is the instantiation of the pk template with the concrete parameter sender and minerFee is the instantiation of the pre-defined contract which protects the miner reward boxes.\n4. Box name In the diagram we can give each box a name. Besides readability of the diagram, we also use the name as a synonym of a more complex indexed access to the box in the contract. For example, change is the name of the box, which can also be used in the ErgoScript conditions instead of OUTPUTS(2). We also use box names to associate spending conditions with the boxes.\n5. Boxes in the wallet In the diagram, we show boxes (darker rectangles) as belonging to the contract wallets (lighter rectangles). Each such box rectangle is connected with a grey transaction rectangle by either orange or green arrows or both. An output box (with an incoming green arrow) may include many lines of text where each line specifies a condition which should be checked as part of the transaction. The first line specifies the condition on the amount of ERG which should be placed in the box. Other lines may take one of the following forms:\n amount: TOKEN - the box should contain the given amount of the given TOKEN R == value - the box should contain the given value of the given register R boxName ? condition - the box named boxName should check condition in its script.  We discuss these conditions in the sections below.\n6. Amount of ERGs in the box Each box should store a minimum amount of ERGs. This is checked when the creating transaction is validated. In the diagram the amount of ERGs is always shown as the first line (e.g. B: ERG or B - minErg - txFee). The value type ascription B: ERG is optional and may be used for readability. When the value is given as a formula, then this formula should be respected by the transaction which creates the box.\nIt is important to understand that variables like amount and txFee are not named properties of the boxes. They are parameters of the whole diagram and representing some amounts. Or put it another way, they are shared parameters between transactions (e.g. Sell Order and Swap transactions from DEX example below share the tAmt parameter). So the same name is tied to the same value throughout the diagram (this is where the tooling would help a lot). However, when it comes to on-chain validation of those values, only explicit conditions which are marked with ? are transformed to ErgoScript. At the same time, all other conditions are ensured off-chain during transaction building (for example in an application using Appkit API) and transaction validation when it is added to the blockchain.\n7. Amount of T token A box can store values of many tokens. The tokens on the diagram are named and a value variable may be associated with the token T using value: T expression. The value may be given by formula. If the formula is prefixed with a box name like boxName ? formula, then it is should also be checked in the guarding script of the boxName box. This additional specification is very convenient because 1) it allows to validate the visual design automatically, and 2) the conditions specified in the boxes of a diagram are enough to synthesize the necessary guarding scripts. (more about this below at \u0026ldquo;From Diagrams To ErgoScript Contracts\u0026rdquo;)\n8. Tx Inputs Inputs are connected to the corresponding transaction by orange arrows. An input arrow may have a label of the following forms:\n name@index - optional name with an index i.e. fee@0 or @2. This is a property of the target endpoint of the arrow. The name is used in conditions of related boxes and the index is the position of the corresponding box in the INPUTS collection of the transaction. !action - is a property of the source of the arrow and gives a name for an alternative spending path of the box (we will see this in DEX example)  Because of alternative spending paths, a box may have many outgoing orange arrows, in which case they should be labeled with different actions.\n9. Transaction A transaction spends input boxes and creates output boxes. The input boxes are given by the orange arrows and the labels are expected to put inputs at the right indexes in INPUTS collection. The output boxes are given by the green arrows. Each transaction should preserve a strict balance of ERG values (sum of inputs == sum of outputs) and for each token the sum of inputs \u0026gt;= the sum of outputs. The design diagram requires an explicit specification of the ERG and token values for all of the output boxes to avoid implicit errors and ensure better readability.\n10. Tx Outputs Outputs are connected to the corresponding transaction by green arrows. An output arrow may have a label of the following formname@index, where an optional name is accompanied with an index i.e. fee@0 or @2. This is a property of the source endpoint of the arrow. The name is used in conditions of the related boxes and the index is the position of the corresponding box in the OUTPUTS collection of the transaction.\nExample: Decentralized Exchange (DEX) Now let\u0026rsquo;s use the above described notation to design a FlowCard for a DEX dApp. It is simple enough yet also illustrates all of the key features of FlowCard diagrams which we\u0026rsquo;ve introduced in the previous section.\nThe dApp scenario is shown in the figure below:\nThere are three participants (buyer, seller and DEX) of the DEX dApp and five different transaction types, which are created by participants. The buyer wants to swap ergAmt of ERGs for tAmt of TID tokens (or vice versa, the seller wants to sell TID tokens for ERGs, who sends the order first doesn\u0026rsquo;t matter). Both the buyer and the seller can cancel their orders any time. The DEX off-chain matching service can find matching orders and create the Swap transaction to complete the exchange.\nThe following diagram fully (and formally) specifies all of the five transactions that must be created off-chain by the DEX dApp. It also specifies all of the spending conditions that should be verified on-chain.\nLet\u0026rsquo;s discuss the FlowCard diagram and the logic of each transaction in details:\nBuy Order Transaction A buyer creates a Buy Order transaction. The transaction spends E amount of ERGs (which we will write E: ERG) from one or more boxes in the pk(buyer) wallet. The transaction creates a bid box with ergAmt: ERG protected by the buyOrder script. The buyOrder script is synthesized from the specification (see below at \u0026ldquo;From Diagrams To ErgoScript Contracts\u0026rdquo;) either manually or automatically by a tool. Even though we don\u0026rsquo;t need to define the buyOrder script explicitly during designing, at run time the bid box should contain the buyOrder script as the guarding proposition (which checks the box spending conditions), otherwise the conditions specified in the diagram will not be checked.\nThe change box is created to make the input and output sums of the transaction balanced. The transaction fee box is omitted because it can be added automatically by the tools. In practice, however, the designer can add the fee box explicitly to the a diagram. It covers the cases of more complex transactions (like Swap) where there are many ways to pay the transaction fee.\nCancel Buy, Cancel Sell Transactions At any time, the buyer can cancel the order by sending CancelBuy transaction. The transaction should satisfy the guarding buyOrder contract which protects the bid box. As you can see on the diagram, both the Cancel and the Swap transactions can spend the bid box. When a box has spending alternatives (or spending paths) then each alternative is identified by a unique name prefixed with ! (!cancel and !swap for the bid box). Each alternative path has specific spending conditions. In our example, when the Cancel Buy transaction spends the bid box the ?buyer condition should be satisfied, which we read as \u0026ldquo;the signature for the buyer address should be presented in the transaction\u0026rdquo;. Therefore, only buyer can cancel the buy order. This \u0026ldquo;signature\u0026rdquo; condition is only required for the !cancel alternative spending path and not required for !swap.\nSell Order Transaction The Sell Order transaction is similar to the BuyOrder in that it deals with tokens in addition to ERGs. The transaction spends E: ERG and T: TID tokens from seller\u0026rsquo;s wallet (specified as pk(seller) contract). The two outputs are ask and change. The change is a standard box to balance transaction. The ask box keeps tAmt: TID tokens for the exchange and minErg: ERG - the minimum amount of ERGs required in every box.\nSwap Transaction This is a key transaction in the DEX dApp scenario. The transaction has several spending conditions on the input boxes and those conditions are included in the buyOrder and sellOrder scripts (which are verified when the transaction is added to the blockchain). However, on the diagram those conditions are not specified in the bid and ask boxes, they are instead defined in the output boxes of the transaction.\nThis is a convention for improved usability because most of the conditions relate to the properties of the output boxes. We could specify those properties in the bid box, but then we would have to use more complex expressions.\nLet\u0026rsquo;s consider the output created by the arrow labeled with buyerOut@0. This label tells us that the output is at the index 0 in the OUTPUTS collection of the transaction and that in the diagram we can refer to this box by the buyerOut name. Thus we can label both the box itself and the arrow to give the box a name.\nThe conditions shown in the buyerOut box have the form bid ? condition, which means they should be verified on-chain in order to spend the bid box. The conditions have the following meaning:\n tAmt: TID requires the box to have tAmt amount of TID token R4 == bid.id requires R4 register in the box to be equal to id of the bid box. script == buyer requires the buyerOut box to have the script of the wallet where it is located on the diagram, i.e. pk(buyer)  Similar properties are added to the sellerOut box, which is specified to be at index 1 and the name is given to it using the label on the box itself, rather than on the arrow.\nThe Swap transaction spends two boxes bid and ask using the !swap spending path on both, however unlike !cancel the conditions on the path are not specified. This is where the bid ? and ask ? prefixes come into play. They are used so that the conditions listed in the buyerOut and sellerOut boxes are moved to the !swap spending path of the bid and ask boxes correspondingly.\nIf you look at the conditions of the output boxes, you will see that they exactly specify the swap of values between seller\u0026rsquo;s and buyer\u0026rsquo;s wallets. The buyer gets the necessary amount of TID token and seller gets the corresponding amount of ERGs. The Swap transaction is created when there are two matching boxes with buyOrder and sellOrder contracts.\nFrom Diagrams To ErgoScript Contracts What is interesting about FlowCard specifications is that we can use them to automatically generate the necessary ErgoTree scripts. With the appropriate tooling support this can be done automatically, but with the lack of thereof, it can be done manually. Thus, the FlowCard allows us to capture and visually represent all of the design choices and semantic details of an Ergo dApp.\nWhat we are going to do next is to mechanically create the buyOrder contract from the information given in the DEX flow card.\nRecall that each script is a proposition (boolean valued expression) which should evaluate to true to allow spending of the box. When we have many conditions to be met at the same time we can combine them in a logical formula using the AND binary operation, and if we have alternatives (not necessarily exclusive) we can put them into the OR operation.\nThe buyOrder box has the alternative spending paths !cancel and !swap. Thus the ErgoScript code should have OR operation with two arguments - one for each spending path.\n/** buyOrder contract */ { val cancelCondition = {} val swapCondition = {} cancelCondition || swapCondition } The formula for the cancelCondition expression is given in the !cancel spending path of the buyOrder box. We can directly include it in the script.\n/** buyOrder contract */ { val cancelCondition = { buyer } val swapCondition = {} cancelCondition || swapCondition } For the !swap spending path of the buyOrder box the conditions are specified in the buyerOut output box of the Swap transaction. If we simply include them in the swapCondition then we get a syntactically incorrect script.\n/** buyOrder contract */ { val cancelCondition = { buyer } val swapCondition = { tAmt: TID \u0026amp;\u0026amp; R4 == bid.id \u0026amp;\u0026amp; @contract } cancelCondition || swapCondition } We can however translate the conditions from the diagram syntax to ErgoScript expressions using the following simple rules\n buyerOut@0 ==\u0026gt; val buyerOut = OUTPUTS(0) tAmt: TID ==\u0026gt; tid._2 == tAmt where tid = buyerOut.tokens(TID)\u000b R4 == bid.id ==\u0026gt; R4 == SELF.id where R4 = buyerOut.R4[Coll[Byte]].get script == buyer ==\u0026gt; buyerOut.propositionBytes == buyer.propBytes  Note, in the diagram TID represents a token id, but ErgoScript doesn\u0026rsquo;t have access to the tokens by the ids so we cannot write tokens.getByKey(TID). For this reason, when the diagram is translated into ErgoScript, TID becomes a named constant of the index in tokens collection of the box. The concrete value of the constant is assigned when the BuyOrder transaction with the buyOrder box is created. The correspondence and consistency between the actual tokenId, the TID constant and the actual tokens of the buyerOut box is ensured by the off-chain application code, which is completely possible since all of the transactions are created by the application using FlowCard as a guiding specification. This may sound too complicated, but this is part of the translation from diagram specification to actual executable application code, most of which can be automated.\nAfter the transformation we can obtain a correct script which checks all the required preconditions for spending the buyOrder box.\n/** buyOrder contract */ def DEX(buyer: Addrss, seller: Address, TID: Int, ergAmt: Long, tAmt: Long) { val cancelCondition: SigmaProp = { buyer } // verify buyer\u0026#39;s sig (ProveDlog)  val swapCondition = OUTPUTS.size \u0026gt; 0 \u0026amp;\u0026amp; { // securing OUTPUTS access  val buyerOut = OUTPUTS(0) // from buyerOut@0  buyerOut.tokens.size \u0026gt; TID \u0026amp;\u0026amp; { // securing tokens access  val tid = buyerOut.tokens(TID) val regR4 = buyerOut.R4[Coll[Byte]] regR4.isDefined \u0026amp;\u0026amp; { // securing R4 access  val R4 = regR4.get tid._2 == tAmt \u0026amp;\u0026amp; // from tAmt: TID  R4 == SELF.id \u0026amp;\u0026amp; // from R4 == bid.id  buyerOut.propositionBytes == buyer.propBytes // from script == buyer  } } } cancelCondition || swapCondition } A similar script for the sellOrder box can be obtained using the same translation rules. With the help of the tooling the code of contracts can be mechanically generated from the diagram specification.\nConclusions Declarative programming models have already won the battle against imperative programming in many application domains like Big Data, Stream Processing, Deep Learning, Databases, etc. Ergo is pioneering the declarative model of dApp development as a better and safer alternative to the now popular imperative model of smart contracts.\nThe concept of FlowCard shifts the focus from writing ErgoScript contracts to the overall flow of values (hence the name), in such a way, that ErgoScript can always be generated from them. You will never need to look at the ErgoScript code once the tooling is in place.\nHere are the possible next steps for future work:\n  Storage format for FlowCard Spec and the corresponding EIP standardized file format (Json/XML/Protobuf). This will allow various tools (Diagram Editor, Runtime, dApps etc) to create and use *.flowcard files.\n  FlowCard Viewer, which can generate the diagrams from *.flowcard files.\n  FlowCard Runtime, which can run *.flowcard files, create and send transactions to Ergo network.\n  FlowCard Designer Tool, which can simplify development of complex diagrams . This will make designing and validation of Ergo contracts a pleasant experience, more like drawing rather than coding. In addition, the correctness of the whole dApp scenario can be verified and controlled by the tooling.\n  References  Ergo Ergo Appkit Introduction to Appkit Appkit Examples ErgoDex ScalaDocs ErgoTree Specification  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_29_flow_cards/","subtitle":null,"title":"FlowCards: A Declarative Framework for Development of Ergo dApps"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_29_flow_cards/","permalink":"https://ergoplatform.org/en/news/2020_04_29/","subtitle":"Ergo is pioneering the declarative model as a better and safer alternative to the now popular imperative model of smart contracts.","title":"FlowCards: A Declarative Framework for Development of Ergo dApps"},{"contents":"Because a blockchain is a siloed, self-contained system by design, interacting with other blockchain protocols is challenging. Atomic Swaps enable cross-chain exchange of digital assets, avoiding the need for centralised exchanges.\nBlockchains are excellent at decentralised value transfer within their own domains. That is, you can send BTC to any Bitcoin address securely and easily, and you can send LTC to any Litecoin address securely and easily too.\nBut because blockchains are based on consensus between miners, they are not designed to interface with other blockchains. Trading assets on different blockchains has therefore traditionally involved third parties like exchanges and OTC desks – with all the risks and inefficiencies they bring.\nCross-chain swaps Atomic swaps solve this problem by enabling cryptocurrencies to be traded across blockchains. This allows trustless exchange of assets, quickly and efficiently. Here’s how they work in theory:\n  Alice and Bob agree to exchange some cryptocurrency. Alice will send Bob 1 BTC, and Bob will send Alice 50,000 ERG. Neither party trusts the other, so neither wants to send their crypto first.\n  Alice generates a secret – a long random number – and hashes it. She then creates a transaction on the Bitcoin blockchain with a script attached, locking 1 BTC and specifying a condition: when the secret (pre-image) to the hash she has created is revealed, the BTC will be sent to Bob’s address. The hash can safely be included in the transaction script, because the pre-image cannot be calculated from it.\n  Bob then similarly creates a transaction on the Ergo blockchain, including a script with the same hash Alice has used. When the pre-image is revealed, 50,000 locked ERG will be sent from Bob’s address to Alice’s address. Because Bob doesn’t have the pre-image, he can’t execute Alice’s transaction before he has created his own.\n  Once Alice sees that Bob has created his transaction on the Ergo blockchain, she can publish the secret and execute his transaction. Because the pre-image is now public, Bob can also use it to execute the script that will send him his BTC.\n  Neither party can delete their transactions and scripts once they have been posted to the blockchain. They may include a condition that the transaction will expire within a certain time, to avoid their coins being locked indefinitely if Alice does not reveal the secret.\n  Ergo’s atomic swaps\n  They are called ‘atomic’ swaps because the orders are either executed in their entirety, or not at all – a kind of fill-or-kill order. But while that’s useful up to a point, it doesn’t allow for active trading, like you would be able to do on an exchange.\nErgo’s implementation of atomic swaps develops the concept further. It’s relatively easy to swap coins or custom tokens trustlessly across any Bitcoin-like blockchains. But beyond that, Ergo allows partial swaps. Just like on a regular exchange, orders can be partially filled, if that’s what the trader wants.\nThis means it’s possible to build a fully-fledged decentralised exchange (DEX) that enables cross-chain trading: a totally trustless version of existing crypto exchanges. There’s no need for any gateways, token wrapping or other potential bottlenecks or points of failure.\nYou can find out more about Ergo’s implementation of atomic swaps and intra-chain and cross-chain token swaps in the ErgoScript white paper.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_24_atomic_swaps/","subtitle":null,"title":"Building Ergo: Atomic Swaps"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_24_atomic_swaps/","permalink":"https://ergoplatform.org/en/news/2020_04_24/","subtitle":"Ergo allows partial swaps. Just like on a regular exchange, orders can be partially filled, if that’s what the trader wants.","title":"Building Ergo: Atomic Swaps"},{"contents":"Blockchains are siloed systems that can only reference their own data, established by consensus. Oracles are the solution to the problem of working with external information, which is vital for many everyday use cases.\nBlockchains are intentionally self-contained. They reference information only recorded within their immediate ecosystem, that has been agreed upon by a majority of miners. Since the whole point of a blockchain, based on consensus, is that there are no sources of centralisation or single points of failure, that poses a problem.\nWhat happens when you want to engage with external information? Many blockchain-based applications need to process data from the real world. That might be financial information, such as market data and prices from exchanges, for DeFi applications; it could be sporting results, for eSports predictions markets; it could even be atmospheric noise information, for random number generators.\nIntroducing Oracles Oracles are the software that serves as a link between these real-world sources of data and the siloed world of the blockchain. They are simple in principle, since they only need to create a series of transactions with the necessary data (ideally formatted in an easily-accessible way) at regular intervals.\nHowever, while anyone can record information to an open blockchain, that is a source of centralisation. So how do you trust an oracle?\nThe answer is: you don’t. Just like the blockchain’s consensus method itself, you need multiple oracles pulling data from multiple sources, then coming to agreement about the value to record to the blockchain. So you don’t need to trust an individual miner, and you don’t need to trust an individual oracle.\nExample: bitcoin price data As an example, let’s say we want to record bitcoin’s closing price every day to the Ergo blockchain, to give us a long-term and reliable source of price data.\nWe could take a dozen – or even a hundred – different data feeds, each pulling data from a major exchange. Coinbase, Bitstamp, Kraken, and so on. We make sure that many exchanges are represented, and while it’s good to have several examples of data from the same exchange, we don’t want any exchange over-represented.\nThen the parties need to reach consensus about the price. Let’s say there are 100 parties and prices involved. There are different ways they could do that:\n Take the mean of all the prices they provide Discard the highest and lowest 20 prices, and take the mean of the remaining 60 prices Select the median price Weight the prices, with the central cluster of prices having greater weight, and take the mean  The aim is to discard or downweight any outliers, which could be due to extreme price fluctuations on a single exchange, API outages, or dishonest oracle data providers, while retaining many good data points to ensure a single reliable record of price.\nOracles are a hugely important part of the blockchain ecosystem. Once you have robust oracles in place, you can create all kinds of DeFi applications – including stablecoins, which are a vital part of the blockchain economy, and one we’ll be exploring on Ergo in the coming months.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_04_building_ergo_oracles/","subtitle":null,"title":"Building Ergo: Oracles"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_04_building_ergo_oracles/","permalink":"https://ergoplatform.org/en/news/2020_04_23/","subtitle":"Blockchains are siloed systems that can only reference their own data, established by consensus. Oracles are the solution to the problem of working with external information, which is vital for many everyday use cases.","title":"Building Ergo: Oracles"},{"contents":"We’ve designed Ergo with long-term economic sustainability in mind, and storage rent is one of the ways we’re ensuring miners stay profitable well into the future. One community member, Robert, describes this function as ‘on-chain garbage collection’ that reduces the problem of blockchain bloat – and even makes it profitable.\nThe 2020 block reward reduction will probably be the most important halving Bitcoin ever experiences. This is the point where the narrative of programmatic scarcity and digital gold will truly be proven, in the context of the sharpest economic downturn in living memory. In previous halvings, Bitcoin has still been in its infancy, a niche experiment. Future halvings will confirm the principle. But this one is the watershed.\nLooking ahead, though, what happens in 20 or 30 years, when block rewards have fallen so far that miners have to rely on tx fees and potentially other sources of revenue? Will Bitcoin be sustainable? What will be the impact on the ecosystem?\nThe simple answer is that we don’t know.\nMining rewards are a key feature in maintaining the security of proof-of-work blockchains like Bitcoin and Ergo. And so, while we have deliberately kept many of Bitcoin’s tried and tested features, we have updated this one to give miners a boost when block rewards have fallen to zero.\nLost coins Digital scarcity is an important feature of Ergo. Like Bitcoin, ERG are designed to be a finite resource and long-term store of value. We do not agree with the principle of infinite inflation.\nAnd yet, this has to be balanced against the needs to pay miners to secure the blockchain and process transactions. Without adequate compensation for miners, there is no viable blockchain at all. Ergo approaches this by slowly recycling lost coins, in a feature we call ‘Storage rent’.\nStudies suggest that as many as 4 million BTC may have been lost forever. These are coins that were mined in the early days of Bitcoin and stored on hard drives that were subsequently thrown away or destroyed because the owners forgot about them or thought they were worthless, as well as coins in addresses for which the private keys have been lost. (And, of course, there’s Satoshi’s estimated holdings of 1 million BTC, which may never move.)\nWhere coins have genuinely been permanently taken out of circulation in this way, it makes sense to have a mechanism to recover them and put them back into the blockchain economy. That way, we can preserve digital scarcity without unnecessarily accelerating it. In other words, by attempting to stick to the intended algorithmic supply for any given point in time.\nErgo’s halving schedule is faster than Bitcoin’s. Block rewards start at 75 ERG, and decrease steadily after the first two years. There is no ‘long tail’ of emission, and after eight years block rewards will fall to zero. After that, total supply will be fixed. The number of ERG in existence will never be more than 97,739,925.\nStorage fees From that point, however, miners will need further incentives to secure the network. Miners have ongoing costs in terms of bandwidth and storage, and in cases where coins are simply left for years, there is typically no charge for reflecting the value of securing them. The tx fee that is paid up-front in Bitcoin is the only charge ever made for storing those coins.\nIn Ergo, in addition to transaction fees, miners will also be able to collect storage rent fees on UTXOs that have not been moved for four years or more.\nFees will be deducted slowly, over time – the unmoved UTXOs will not simply be appropriated by miners. Anyone who wants to avoid this simply needs to move their balances once every four years, which is not an onerous requirement for helping incentivise miners and avoiding the deflationary consequences of lost coins. You can read more about how fees will be levied in this paper.\nIn this way, Ergo seeks to ensure a balance between maintaining digital scarcity, on the one hand, and giving miners long-term incentives to secure the blockchain, on the other – long past the point where new coins have ceased to be released.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_21_ergo_positioning/","subtitle":null,"title":"Building Ergo: Storage rent"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_21_ergo_positioning/","permalink":"https://ergoplatform.org/en/news/2020_04_21/","subtitle":"One community member, Robert, describes this function as ‘on-chain garbage collection’ that reduces the problem of blockchain bloat – and even makes it profitable.","title":"Building Ergo: Storage rent"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_02_use_cases/","permalink":"https://ergoplatform.org/en/news/2020_04_03_1/","subtitle":"The need to reform the global financial system has been clear since the last crisis in 2008. Now, COVID-19 has forced our hands. We cannot delay, and the best way to start is from the grassroots.","title":"Ergo use case: Local Exchange Trading System (LETS)"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_04_02_use_hot_potato/","permalink":"https://ergoplatform.org/en/news/2020_04_03/","subtitle":"As the next financial crisis takes hold, it’s clear that conventional monetary policy is at its limit. Smart contract platforms like Ergo enable more innovative, targeted implementations of economic stimulation that the conventional banking sector cannot achieve.","title":"Ergo use case: ‘hot potato’ monetary policy"},{"contents":"The need to reform the global financial system has been clear since the last crisis in 2008. Now, COVID-19 has forced our hands. We cannot delay, and the best way to start is from the grassroots.\nAs lockdowns across the world effectively shut down whole sectors and a large part of the economy, we are entering a new era at breakneck pace. Central banks are taking unprecedented action in the form of money printing but, just like last time around, they will almost certainly fail at the ‘last mile’ (intentionally or otherwise): while their efforts will benefit the financial sector and the wealthy, the funds will not reach those small businesses and individuals who need them the most.\nCrossing the last mile Technology like the Ergo platform can address this problem efficiently, building bridges into and within our local economies without the need for commercial or central banks. A key principle of Ergo, and one stated in the white paper, is that it is for regular people. The developers have spent considerable time building technology that can be applied to real-world use cases. (This is the idea behind ‘Smart contracts for the people’, for example.)\nLETS In the present circumstances, a Local Exchange Trading System (LETS) would be a strong use case for Ergo. A LETS is a mutual credit association in which individual members are allowed to borrow from a common pot of money. All the loans are written into a ledger. Naturally, a blockchain system allows for strict and more granular rules around the size of loans and their use, as well as user privacy.\nFor example, let’s assume Alice has a zero balance. She wants to buy a litre of milk from Bob, and borrows the agreed price of 2 euros from the common pot. Alice’s account now registers -2 euros and Bob’s +2 euros. Bob can spend his balance with other participants of the LETS, and the creation of credit allows for economic activity and velocity of money even where people have, temporarily, no cash. Of course, limits on borrowing can be imposed – and even on positive ones, to prevent hoarding within the LETS. Such a system can be built trustlessly on Ergo.\nCrisis measures Systems like this have historically become popular during times of crisis. The first system of this kind was established by Michael Linton in a Canadian town stuck in depression back in 1981. LETS were also popular during the 1998-2002 Argentine Great Depression.\nMost LETS groups consist of 50 to 250 members, with paper-based credit notes and ledgers maintained by a committee. However, it is unsurprising that paper-based LETS have suffered from problems such as counterfeit notes, dishonest activity by administrators, and so on (much like centralised crypto exchanges). A blockchain-based LETS could be vastly superior to any previous system.\nMoreover, building lots of small credit systems on the same blockchain enables interoperability and novel financial products designed to strengthen the system as a whole. Hundreds of different LETS could exist, for individuals and small businesses, with different participation criteria, different credit limits, collateralisation requirements and other parameters. And yet they could still be connected by gateways allowing liquidity to move between different LETS, if required – while avoiding exposure to toxic debt.\nWhat use cases do you have for Ergo to address the broken financial system? Let us know.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_02_use_cases/","subtitle":null,"title":"Ergo use case: Local Exchange Trading System (LETS)"},{"contents":"As the next financial crisis takes hold, it’s clear that conventional monetary policy is at its limit. Smart contract platforms like Ergo enable more innovative, targeted implementations of economic stimulation that the conventional banking sector cannot achieve.\nConventional monetary policy is a hammer. It works as far as it goes, but if all you have is a hammer then every problem starts to look like a nail.\nWhen the Global Financial Crisis hit over a decade ago, central banks did what they were used to doing. Cutting interest rates means it’s cheaper to borrow money, so there’s more cash in the system that can be spent and will circulate in the economy – paying for goods and services, funding employment and allowing life to continue something like as normal.\nThat, at any rate, is the theory. It’s what central banks do in recessions to stimulate economic activity. When times are better, they raise interest rates to make it more expensive to borrow money and prevent the economy from overheating (including asset bubbles).\nThe outer limits This is a blunt tool, but it works, up to a point. In the 2008 crisis, the problem was more severe – so severe, in fact, that interest rates were slashed to zero. Banks were still afraid to lend because they didn’t know the quality of the collateral they were offered in return, those notorious mortgage-backed securities.\nSo the central banks undertook a programme of Quantitative Easing (QE). This entailed creating huge amounts of cash that didn’t exist before, then purchasing various assets from the banks. The idea was that the central bank would take on the risk and the assets, and commercial banks would then use this gift of liquidity to lend to small businesses and individuals, allowing them to continue operating as before.\nIt didn’t work. Little of that newly-created money went to small businesses. Instead, banks used it to shore up their own balance sheets and make their own finances safer, investing only in low-risk assets rather than risky SMEs. Ultimately that cash filtered through to assets like the stock market and property, making the wealthy even more wealthy while the poorer were priced out of the market.\nHelicopter money Today, as we experience the greatest financial challenge of our lifetimes – greater than even the Global Financial Crisis – central banks are considering even more unorthodox approaches. One of these is ‘helicopter money’. This involves cash being simply airdropped directly to citizens, either in the form of tax breaks or as money straight into their bank accounts. America has discussed giving $1,200 to every adult. Other nations are exploring the same idea.\nBut there’s a problem with this, too.\nJust like the banks, ordinary citizens are worried about their finances. So instead of going out and spending (where ‘going out’ is even possible), they pay down their debt. That newly-printed money goes nowhere.\nThat’s really as far as central banks can go. But a platform like Ergo can offer different types of money, with different conditions attached via smart contracts, incentivising different behaviour in different circumstances. And that enables a whole different range of monetary policy tools.\n‘Hot potato’ money In normal times, banks seek to maintain an inflation rate of around 2%. This means money is worth less over time. So instead of saving it all, and seeing the value of their savings fall, citizens have the incentive to spend it and circulate it within the economy.\nToo much inflation, of course, is a bad thing. Get money printing wrong and you have hyperinflation like Venezuela or Zimbabwe, and your economy collapses.\nBut what if we kept inflation low, but created a limited amount of a special class of money that had to be used quickly if it was to retain its value at all? We’ll call this ‘hot potato’ money, because it has to be passed on fast.\nUsing a blockchain and smart contracts, this would be a simple matter of creating a new token that could be freely transferred and traded, just like any other token. And it could be backed by reserves (held with the central bank, commercial banks or any other entity). But the difference would be that it has to be spent within a month of receiving it, or those tokens are locked, their value is lost to the holder and the funds that back them are freed up to return to the reserve holder.\nSo this would be regular money that people had to spend: use it or lose it. If they hoard it, it becomes useless. And we can ensure that it is not used to pay down debt by including conditions that ensure it cannot be used by the banking sector. Of course, Ergo’s Sigma protocols can be used to figure out what has been spent, where, without knowing individual spending habits – enabling even more targeted stimulus.\nThis idea likely has far-reaching implications – and possibly unintended consequences. What would the result be, for example, of creating different ‘classes’ of money that were only semi-interchangeable? Would this introduce unwelcome, even dangerous friction?\nThis and other questions would need to be explored further. What’s clear is that central banks are already experimenting with unconventional monetary policy and are fast reaching the end of the road. We can continue that experiment with better, more powerful and targeted tools.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_04_02_use_hot_potato/","subtitle":null,"title":"Ergo use case: ‘hot potato’ monetary policy"},{"contents":"Ergo enables new models of financial interaction, underpinned by smart contracts built on flexible and powerful Sigma protocols but easily accessible to developers.\nOne of the most exciting things about blockchain is the possibility of making digital agreements without any trusted intermediaries. In the simplest use case, pioneered by Bitcoin, Alice can send a payment directly to Bob, wherever the two of them are located around the world, with no bank or any trusted third party needed. However, with the functionality of a modern blockchain like Ergo, it is possible to make far more complex and sophisticated financial agreements than simple payments. Take the following example.\nGold-backed tokens Alice uses ERGs to purchase gold-backed tokens from Bob. Bob stores the gold in a secure vault, and uses the blockchain to issue one token for every Troy ounce of gold he has. Alice can then use these tokens freely in different contracts, transferring and trading them under whatever conditions she specifies in the smart contract code. When Alice wants to sell the tokens for physical gold, she can conduct another transaction with Bob, receiving ERG in return, at market price.\nThe point of blockchain contracts is to eliminate the need for trust. While the purchase transaction is now trustless, in this instance Alice still needs to trust Bob about two things. Firstly, Bob may refuse to swap the gold tokens back to ERG at the correct price when Alice wants to sell. Secondly, Bob may default on his obligations – running away with the gold, or misusing the funds he receives and running a fractional reserve.\nExtending the contracts To address these issues, we can create an Oracle, or decentralised price feed. This uses multiple sources of external data to record the price of gold to the blockchain at regular intervals. This price feed will be the reference point for the redemption contract that manages the sale of Alice’s gold with Bob (or any other participant). Thus the system automatically enforces the right price when a swap takes place.\nThe second situation requires a third-party insurer, Charlie, whose service is also hosted on the blockchain with a smart contract. When Alice purchases gold from Bob, she additionally buys an insurance contract from Charlie. The payment can be dependent on factors including the amount of insurance required, and Bob’s reputation – again, managed by a decentralized feedback mechanism. Now, if Bob defaults, Alice will automatically receive the value of her gold tokens, with Charlie effectively acting as a buyer of last resort.\nProgrammable contracts There are, of course, many other example use cases like this one. We can also extend this use case, adding further economic actors. For example, Charlie may sell shares in his insurance business to Dave and other participants, providing them with a proportion of revenues in return for ensuring he has the capital he needs to cover any liabilities from the outset.\nHowever, even the most complex use case is simpler than general-purpose software that can be used to program any contract. After all, generalised logic must be both far-reaching and secure. Moreover, even a specialised contract is made up of many steps, each of which is fairly simple. Thus another requirement for a general-purpose platform is that it should simplify the process of writing contracts, making them as accessible (and safe) as possible. This can be achieved with the use of template agreements, with customisable parameters. The insurance contract above could be based on a module with flexible parameters, for example. This could be used and reused in many different circumstances.\nErgo’s approach This is essentially the approach that Ergo takes, providing superior support for real-world financial agreements. It does this through:\n Support for multi-stage contracts (watch details for developers) A simple high-level language, ErgoScript, enabling clear descriptions of contractual logic Support for formal verification of contracts for improved security guarantees (Ergo Platform deployed its first formally verified p2p crowdfunding contract just three months after the network launched) Easy Oracle creation Native support for complex signature schemes  In short, creating financial contracts on the blockchain isn’t just about the functionality you provide. It’s about making that functionality safe and accessible, as well as powerful. Ergo achieves this and more.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_03_29_ergo_use/","subtitle":null,"title":"Ergo use cases: safe, simple financial contracts"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.2","permalink":"https://ergoplatform.org/en/news/2020_03_24/","subtitle":"Fixes and improvements. Details in the description of the release","title":"Ergo Mainnet 3.2.2 released"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_03_20_ergo_mixer/","permalink":"https://ergoplatform.org/en/news/2020_03_23/","subtitle":"A powerful mixer that works by pooling funds and enabling participants to spend them without anyone knowing who made the transactions","title":"Introducing Σ3 - ErgoMixer"},{"contents":"Ergo’s smart contracts and DeFi functionality are built on Sigma protocols – a powerful, flexible class of zero-knowledge proofs. Find out more about why they’re so important, and how they put Ergo head and shoulders above the competition.\nCryptography is a fascinating area, and one of the most exciting and intriguing concepts it offers are zero-knowledge proofs. In simple terms, a zero-knowledge proof allows someone to prove they know the solution to a problem without actually revealing the solution itself.\nLet’s say someone picks up a phone in a bar. You can prove it’s yours by hiding the screen, entering the unlock code and showing the unlocked screen to the person who found it. This is a simple example of a zero-knowledge proof: you have proven you own the phone without giving away any sensitive information.\nIn cryptography, most practical problems are associated with secrets. The most popular application lies in digital signatures, used by millions of people around the world every day. Essentially, these involve saying: ‘This message proves I know the private key associated with this public key – but I’m not revealing the private key itself’. (Not every digital\nsignature scheme uses zero-knowledge proofs, but the most popular do.)\nSigma protocols Among the hundreds or even thousands of zero-knowledge protocols, there is a sub-class of efficient and composable proof-of-knowledge protocols called Sigma Protocols. These are also known as Generalized Schnorr Proofs. Sigma protocols can be represented as digital signatures in a straightforward way, so we can effectively think of them as signatures in the context of blockchain.\nA Schnorr signature is a simple Sigma protocol signature, then. Schnorr signatures have been proposed as an alternative to Bitcoin’s current signatures. (It is one of the most efficient signature schemes, which is why it would be beneficial for Bitcoin.)\nHowever, there are dozens of other Sigma protocols. One of the great things about them is that they are composable, using simple AND and OR logic. So you can ask for a signature with the following statement: ‘Prove to me knowledge of either this secret OR that secret’ (this is a one-of-two ring signature). Or you can ask, ‘Prove to me knowledge of any two of these three secrets’ (a two-of-three ring signature). Those are just two simple examples; there are many more, and they can be far more complex and sophisticated.\nErgo: Sigma + blockchain When combined with a blockchain, these composable proofs enable some very powerful use cases. The logic for proofs can include conditions based on blockchain state. For example, ‘If the deadline block height has been reached, Alice can provide knowledge of a secret key for a refund. OR a ring signature from Alice and Bob is required to spend coins.’ Or ‘If this account holds a minimum of 100 ERG, Alice OR Bob can remove funds above that amount.’\nThus some very interesting and flexible DeFi applications can be built on Ergo, using secure, straightforward and efficient Sigma protocols.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_03_16_ergo_sigma/","subtitle":null,"title":"Building Ergo: Sigma protocols"},{"contents":"The project uses Ergo’s Sigma protocols to enable efficient, trustless mixing of funds, enabling a high degree of privacy while ensuring security is not compromised.\nErgoMixer command-line demo tool along with detailed technical description can be found at https://github.com/anon92048/ergo-mixer-demo .\nErgo’s Sigma protocols can be used to create many interesting and exciting DeFi use cases, with greater simplicity, efficiency and security than other smart contract platforms offer. Created by one of Ergo’s community members @anon92408, Σ3 (‘Sigma Three’) is a powerful mixer that works by pooling funds and enabling participants to spend them without anyone knowing who made the transactions.\nHow does it work? While understanding the full operation of the mixer will require some in-depth knowledge of cryptography, the root concept is fairly simple. (For those who want to learn the details, you can find out more in the white paper.)\nParticipants send coins to a pool, and these can be spent by different members. However, the use of Sigma protocols – specifically ring signatures – means that it’s impossible to know which member spent them.\nTake the simplest case of a pool in which a ‘box’ of coins can be spent by either Alice or Bob. Either Alice or Bob can sign a transaction and move the coins, but no external observer will be able to tell which of the two signed it. This is different to multi-signature transactions, in which (say) 2 of 3 participants have to sign a tx; with multi-sig, it is known which two do the signing.\nThus anyone observing from the outside would have a 50:50 chance of guessing whether Alice or Bob moved those coins. But that process is iterated, over and over again, with different users. After many rounds, with many users, it’s effectively impossible to know who owns the coins. Still, the coins never leave the control of their original owner – there is no risk of lost funds.\nErgoScript This process can be implemented natively on the blockchain, as is the case with ZCash. This has a similar process hardwired into the blockchain – which works, but imposes limits on the blockchain.\nIt would be possible to implement something similar with Ethereum, since Ethereum has Turing-complete smart contracts and any computational task can be executed. But it would be clunky and inefficient, and the result would be expensive and possibly risky.\nErgo allows this kind of use case to be implemented easily, using Sigma protocols. ErgoScript includes native support for all the cryptographic and blockchain functionality required to create Σ3 on the Ergo chain, securely and efficiently.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_03_20_ergo_mixer/","subtitle":null,"title":"Introducing Σ3 – ErgoMixer"},{"contents":"Ergo takes the most secure and best-established features of Bitcoin and implements advanced new cryptographic features on its rock-solid foundations. This series explores the choices we have made in creating Ergo, with the first article unpacking the advantages of the UTXO model.\nWhen you’re dealing with financial value, you cannot afford to take chances. Every architecture decision in a cryptocurrency platform has implications. While there are different ways to solve the same problem, some solutions are better tested and more reliable than others.\nLike Bitcoin, Ergo uses the ‘UTXO’ (unspent transaction outputs) model, rather than the Account model used by platforms like Ethereum. There are a number of reasons why we have made this choice, but first it’s worth explaining a little about how the UTXO or ‘Box’ model works.\nMost people think that the balance of an account is a simple number that is updated when you send or receive funds. This is the obvious way to approach the problem; after all, it is effectively how money works in the real world. Your bank account has a balance that is increased or decreased when different transfers are made in and out. This is how the ‘Account’ model operates: your balance on the blockchain is altered by transactions to and from the account.\nHow much dough? The UTXO model, pioneered by Bitcoin, is quite different. You can think of this a bit like a person holding a series of lumps of bread dough. Their balance is the sum of these lumps, or UTXOs. Lumps can be divided or combined, before they are sent to a new address, but you always know where they came from. For example:\nAlice has 100g of bread dough (100 ERG). She breaks off a lump of 75g and gives it to Bob, keeping 25g of ‘change’ for herself. Charlie has 250g of dough. He breaks off 150g and gives it to Bob, keeping 100g of change for himself. Bob breaks 20g of dough off the 150g lump he received from Charlie, and combines the resulting 130g with the 75g he received from Alice. He gives the total of 205g to Dave, keeping the 20g change for himself. Dave now has 205g of bread dough, which used to belong to Charlie. Before Charlie owned it, 75g used to belong to Alice, while 130g used to belong to Bob.\nIn the UTXO model, ‘lumps’ of coins can be combined and divided, but unlike bread dough, they aren’t mixed together. You can follow the history of funds right back to the coinbase transaction in which those coins were first mined. That’s very different to the Account model, where the balance of each account is simply changed. (You can, of course, check the blockchain to make sure the Account says what it should, but that’s not intrinsically necessary like it is with the UTXO approach.)\nWhy UTXO? The UXTO model has several implications. For a start, each object is immutable – lumps of coins cannot be ‘edited’ like an Account balance is edited when a transaction is made. The balance is calculated from the transaction history, right back to the point those coins first came into existence.\nThat makes security much simpler, because either a UTXO exists in the form you are expecting, or it does not exist at all. With the account model, you need to carefully check that the account you’re dealing with is in the state it should be (and developers typically don’t do that properly). This also makes UTXOs more friendly for offchain protocols, like sidechains and the Lightning Network.\nAccounts make it easier to store the ‘state’, but easy doesn’t always mean better. With Ergo’s extended UTXO model, state transitions are more explicit and so they are cleaner – there are no unwanted surprises. It might be a little bit more burdensome to deal with, but it’s a lot better and more straightforward in terms of security.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_03_03_building_utxo/","subtitle":null,"title":"Building Ergo: UTXO vs Account"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_03_03_building_utxo/","permalink":"https://ergoplatform.org/en/news/2020_03_03/","subtitle":"This series explores the choices we have made in creating Ergo, with the first article unpacking the advantages of the UTXO model","title":"Building Ergo: UTXO vs Account"},{"contents":"  Ergo Platform Roadmap for 2020 has been released, the plan is minimum and very realistic https://ergoplatform.org/en/blog/2020_02_02/\n  Miners tested raising computational cost limit per block via voting with success\n  \u0026ldquo;Bypassing Non-Outsourceable Proof-of-Work Schemes Using Collateralized Smart Contracts\u0026rdquo; https://ia.cr/2020/044 was presented by Alex Chepurnoy at WTSC workshop associated with Financial Cryptography and Data Security 2020 in Malaysia\n  Few AMA sessions have been held with the Ergo team by Probit, ViteXExchange, and CryptoDaku. https://bitcointalk.org/index.php?topic=5150971.msg53894939#msg53894939\n  Anon92048 is working on non-custodial and non-interactive mixer implementing ErgoMix\n  Frontpage was updated https://ergoplatform.org/en/\n  Welcome to Smart Money article published https://ergoplatform.org/en/blog/2020_02_12_welcome_to_smart_money/\n  Dev meeting summary https://twitter.com/ergoplatformorg/status/1230119289878872064\n  Finally Coingecko has updated info about Ergo https://www.coingecko.com/en/coins/ergo\n  Ergo Mainnet 3.2.1 released https://github.com/ergoplatform/ergo/releases/tag/v3.2.1\n  Ergo Playgrounds - Run contracts + off-chain code in the browser https://www.ergoforum.org/t/ergo-playgrounds-run-contracts-off-chain-code-in-the-browser/185\n  Coinbarn, a simple wallet for Ergo has been published in the Chrome store! https://chrome.google.com/webstore/detail/coinbarn-wallet/pachdpadffdgjhmmgpdjkpnlhkdhbfgf Desktop versions can be found here https://github.com/coinbarn/coinbarn-extension/releases/\n  The new bounty campaign, in partnership with Magnum wallet went live https://twitter.com/Magnum_Wallet/status/1232959453529616385\n  http://erg.ezpool.io/ went out of private testing mode and is offering both Nvidia and AMD optimized miners. Congratulations to the pool creator who broke non-outsourceable PoW scheme\n  Most active exchanges - Probit, Tidex, Waves Exchange https://ergoplatform.org/en/exchanges/\n  Please join the Ergo community to help with development and promotion! Our Telegram: https://t.me/ergoplatform | Discord: https://discordapp.com/invite/gYrVrjS | Twitter: https://twitter.com/ergoplatformorg | Github: https://github.com/ergoplatform\n  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_03_03_digest/","subtitle":null,"title":"Ergo Platform Ecosystem Digest - February 2020"},{"contents":"","link":"https://chrome.google.com/webstore/detail/coinbarn-wallet/pachdpadffdgjhmmgpdjkpnlhkdhbfgf","permalink":"https://ergoplatform.org/en/news/2020_02_26/","subtitle":"Desktop versions can be found here https://github.com/coinbarn/coinbarn-extension/releases/","title":"Coinbarn, a simple wallet for Ergo has been published in Chrome store"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.1","permalink":"https://ergoplatform.org/en/news/2020_02_19/","subtitle":"Mempool and miner made friendly to transactions spending outputs of offchain transactions, parameter for syncing detection during headers-chain download and more","title":"Ergo Mainnet 3.2.1 released"},{"contents":"It’s the smartest crypto you’ve never heard of. Ergo takes the best of Bitcoin and integrates Sigma protocols so powerful they make Ethereum look like it would lose a game of chess against your cat. If you’re tired of spin and hype over solid tech, Ergo will remind you that in crypto, it’s always been fashionable to be intelligent. Bright is the new black, people, and Ergo is set to dazzle you.\nDeFi is set to be the major blockchain trend for 2020. Many new smart contract platforms are positioning to become one of the handful of big players in the space. With a strong head start, competent development team and impressive network, Ethereum’s place in this billion-dollar (and growing) movement is assured. The others must offer something different – dramatically different – to differentiate themselves against this background. Ergo is a smart contracts and DeFi platform that may have what it takes to carve out a niche in this fast-moving and competitive new sector.\nPowerful But Safe Contracts Ethereum is an exceptional platform, but there are things it does not do well. Its Turing-complete smart contracts are powerful, but dangerous – as incidents from The DAO to the Parity wallet exploits have proven, with tens of millions of dollars in collateral damage. With complexity comes uncertainty, and potentially catastrophic vulnerabilities. Contracts can be expensive to run, and depending on network conditions may execute unpredictably – or not at all.\nErgo takes a fundamentally different approach to smart contract development. The team, which has extensive experience with blockchain platforms, frameworks and organisations from Nxt and Waves to Scorex and IOHK, has adopted a declarative model for programming whereby it’s always known in advance how much code will cost to run – and, indeed, whether it will run precisely as intended. While that might on the surface limit code complexity, it’s nevertheless possible to create Turing-complete scripts by iterating processes across multiple blocks. That means Ergo can support versatile dApps that run predictably, with known costs, and don’t have any of the dangers of unrestricted functionality.\nSigma protocols The platform is unashamedly conservative, basing as many features as possible on Bitcoin – after all, Bitcoin is the most battle-tested crypto network in existence. Ergo’s UTXO model, PoW mining and finite supply draw on Bitcoin’s approaches to consensus and economic incentives.\nBut Ergo also incorporates cutting-edge research into new cryptographic processes, using Sigma protocols to enable DeFi applications that would be either complex and messy or simply impossible on other platforms. Sigma protocols are a well-known class of zero-knowledge proofs that allow developers to implement very powerful processes very elegantly. For example, what if you want to build a privacy service that allows any one of a dozen different accounts to spend funds from an address – but no one can tell who has made each transfer? Such a ‘ring contract’ is possible with Ethereum, but it would require a clunky and expensive workaround. With Ergo’s Sigma protocols, it’s possible to implement this kind of use case and many others quickly, efficiently and – above all – securely. Sigma protocols have not been deployed in such generic form within crypto before. Yet this kind of out-of-the-box functionality is hugely valuable, especially when no other DeFi platform offers it.\nGet involved Ergo’s team has been working on the project for over two years, attracting interest from some major players in the crypto space (including Cardano’s Charles Hoskinson) but avoiding mainstream attention until now. With the platform’s core functionality now substantially complete, the developers are seeking to expand the network, form new partnerships and make a mark in the nascent DeFi movement.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_02_12_welcome_to_smart_money/","subtitle":null,"title":"Welcome to Smart Money"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_02_04_january_digest/","permalink":"https://ergoplatform.org/en/news/2020_02_04/","subtitle":"January 2020","title":"Ergo Platform Ecosystem Digest"},{"contents":"  Ergo Foundation has been established (https://ergoplatform.org/en/foundation/)\n  Security audit of most critical parts of the reference protocol client is done, report is available (https://ergoplatform.org/en/blog/2020_01_12_security_audit/)\n  New paper is out, \u0026ldquo;Bypassing Non-Outsourceable Proof-of-Work Schemes Using Collateralized Smart Contracts\u0026rdquo; (https://eprint.iacr.org/2020/044.pdf). This paper describes how to build a pool for Ergo based on smart contracts with collaterals.\n  Public Discord server has been created (https://discordapp.com/invite/gYrVrjS), please join!\n  Ergo Platform reference protocol client 3.2.0 released (https://github.com/ergoplatform/ergo/releases/tag/v3.2.0). Updates are coming reguralry!\n  CoinBarn wallet is still under review in ChromeStore, but released a desktop version (https://twitter.com/coinbarn/status/1211026427686064133). CoinBarn is the simplest wallet for Ergo, and it is supporting custom tokens!\n  Ergo now has a command-line wallet also, called ErgoTool. An introductory article on the ErgoTool: https://ergoplatform.org/en/blog/2019_12_31_ergo_tool/\n  ErgoCast #2 published: https://ergocast.io/\n  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_02_04_january_digest/","subtitle":null,"title":"Ergo Platform Ecosystem Digest - January 2020"},{"contents":"Ergo community made a lot in 2019:  Very stressful but successful mainnet launch A lot of updates for Ergo protocol reference client to improve its stability and enhance functionality. Wallets: Magnum, CoinBarn (coming to ChromeStore, binaries available), UI panel in the node First applications, in form of command-line scripts, so not for regular users yet: a tool for crowdfunding campaigns, Ergo Notary, Ergo Oracle. Few Ergo improvement proposals, already implemented! Few tools to build applications, such as ErgoAppKit, ErgoTool, Kiosk. A lot of contracts proposed on the forum, such as interest-free loan contract, zero-coupon bond scheme (the Yield protocol), auction and so on. It seems Ergo is very suitable for decentralized finance, even more, for simple and self-sovereign interacting peer-to-peer financial contracts! First crowdfunding campaign (https://www.ergoforum.org/t/simple-crowdfunding/70) and mixing (https://www.ergoforum.org/t/lets-play-with-ergomix/108) done! Few new research papers published or presented, namely \u0026ldquo;Multi-stage UTXO contracts\u0026rdquo;, \u0026ldquo;On Contractual Money\u0026rdquo;, \u0026ldquo;Bypassing Non-Outsourceable Proof-of-Work Schemes Using Collateralized Smart Contracts\u0026rdquo;, (see documents).  , not to say about progress in social aspects of ecosystem development (establishing Dev Fund Board, Ergo Foundation, first grants given, and so on).\nSo we are showing possibilities of Ergo, not just talking about them. However, most of demonstrations are not for a regular user yet.\nWith that in mind, Ergo Foundation would like to propose the following development plan for 2020:  UI for crowdfunding Implementation of ErgoMix, the first non-interactive mixing scheme utilizing Ergo\u0026rsquo;s support for complex cryptographic protocols, and UI for it (for desktop and mobiles, at least Android). More mixing schemes to be developed in 2021. Implementation of decentralized exchange (DEX) based on atomic swaps, contracts are described in the smart contract language whitepaper. Ring, threshold and composite signatures support in the node. Ergo Development Fund members are already co-singing spendings using threshold signatures preserving zero-knowledge, now the time to bring such exciting possibilities to the mass adoption. New smart contract development stack with possibility of writing contracts in a subset of Scala language along and support for formal verification. Ledger or Trezor support.  Please note that this plan is minimum and very realistic. For example, the new smart contract development stack with formal verification is mostly done already.\nErgo Foundation is trying to maximize broader participation in ecosystem growth. Howeever, the ecosystem is still in the process of bootstrapping. So core developers will start or lead development where needed. Foundation is willing to provide grants to achieve the goals to increase external participation. The Foundation also accepts donations to increase its possibilities towards implementing the roadmap.\nWith this minimum set of tools we will be ready to have more in 2021: mutual credit systems, p2p loan contracts, bonds, algorithmic stablecoins etc. However, this things could be implemented right now, so please join the ecosystem and build for it! Also, in 2021 we can get the \u0026ldquo;Universal dApp Interface \u0026amp; Package Standard\u0026rdquo; (https://www.ergoforum.org/t/universal-dapp-interface-package-standard/153) implemented, which could be a real game-changer in the dApp industry!\n ","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_02_02/","subtitle":null,"title":"Ergo Platform Roadmap for 2020"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_02_02/","permalink":"https://ergoplatform.org/en/news/2020_02_02/","subtitle":"Please note that this plan is minimum and very realistic","title":"Ergo Platform Roadmap for 2020"},{"contents":"","link":"https://discordapp.com/invite/gYrVrjS","permalink":"https://ergoplatform.org/en/news/2020_01_23/","subtitle":"You are welcome to join us","title":"Ergo Platform Discord Server has been created"},{"contents":"","link":"https://eprint.iacr.org/2020/044.pdf","permalink":"https://ergoplatform.org/en/news/2020_01_17/","subtitle":"In this work, we propose a concrete example of such a mechanism which is using collateralized smart contracts","title":"Bypassing Non-Outsourceable Proof-of-Work Schemes Using Collateralized Smart Contracts"},{"contents":"","link":"https://ergoplatform.org/en/foundation/","permalink":"https://ergoplatform.org/en/news/2020_01_17_2/","subtitle":"Join us and help build the decentralized future","title":"Introducing the Ergo Foundation, a community-driven entity"},{"contents":"We would like to announce that Ergo has successfully passed security audit of certain (most critical) parts of the code. This time the audit was done by Jean-Philipee Aumasson (aka veorq, https://aumasson.jp/ ).\nThe detailed report is below. Nothing critical is found. Comments on issues found:\n  On wallet password, we\u0026rsquo;ll provide a recommendation in next versions of the protocol client. Not sure hard enforcement on password will take place, but we\u0026rsquo;ll do more consultations on this.\n  Changing \u0026ldquo;n\u0026rdquo; and \u0026ldquo;k\u0026rdquo; parameters makes sense when launching new network only. Changing this parameters in mining node will make blocks produced invalid for other nodes. Changing this parameters in protocol client means going on another fork (blocks coming from the honest protocol participants will be rejected). So no need for extra checks maybe, as people launching new networks will set \u0026ldquo;n\u0026rdquo; and \u0026ldquo;k\u0026rdquo; properly.\n  Currently the Ergo node (as well as other blockchain protocol clients and wallets we\u0026rsquo;re aware of, as well as cryptographic libraries we\u0026rsquo;re using) do not provide protection from side-channel attacks running locally (e.g. timing attacks or memory inspection by malware or viruses). So please protect machines you\u0026rsquo;re running wallets on!\n  ==========================================================================================================\n% Ergo security assessment % Jean-Philippe Aumasson % 07/Dec/19\nSummary We were solicited by Ergo to perform a security assessment of several components of their Ergo Platform:\n Sigma protocol proofs creation and verification Wallet\u0026rsquo;s secure storage of secrets Proof-of-Work validation  ​This brief report summarizes our assessment and describes our findings and mitigation recommendations.\nSigma protocol proofs ​The Ergo protocol relies on ErgoScript, a scripting language supporting sigma-statements, which can be proven and verified through non-interactive proofs of knowledge.\nThese proofs are statements described as a tree of AND, OR, and threshold conditions, whose leaves are proofs of knowledge of a discrete-logarithm problem.\nThe proof of the sigma-statement is then made non-interactive thanks to the Fiat-Shamir transform.\nThis logic is specified in the ErgoScript paper, and the specific proving and verification routines described in its Appendix A.\n​Implementation challenges are then to:\n  Define encoding of the proofs that are safe and efficient, and implement serialization and deserialization that always succeeds in processing valid input, and that always gracefully fails to process invalid input.\n  Implement the proving and verification functionalities correctly, in compliance with the specification, and most importantly such that no invalid statement can successfully pass verification.\n  We reviewed these two aspects, based on the code in the repository sigmastate-interpreter, and on the ErgoScript paper, carefully comparing the intended behavior (in Appendix A) with the actual behavior as implemented.\n​We notably reviewed code from the SigSerializer, Interpreter, and ProverInterpreter traits and objects.\n​We mainly sought bugs from the following classes:\n ​Unsafe processing of malformed input Unsafe processing of unusually long or short input Behavior when large tree depth or recursion level Unsafe use Scala types and structures Inappropriate variable types Integer overflows Race conditions Logic bugs  ​Despite extensive review, we did not identify any security issue.\nThe protocol\u0026rsquo;s logic and internals are nonetheless relatively complex, and we believe the highest risk is in the parsing and verification of proofs. To exploit such issues, however, an attacker would have to create a semantically correct script that somehow benefits them, yet that passes verification when it does not ought to.\nRegarding software security, Scala eliminates certain classes of bugs, but Scala code may still suffer from bugs due to Scala\u0026rsquo;s specific behavior or to unhandled errors.\nWallet Ergo\u0026rsquo;s wallet functionality enables its users to store a secret on disk and recover it, initializing the wallet with a new seed when it\u0026rsquo;s first used.\n​This logic is mainly defined in ErgoWalletActor, and a key component regarding secrets' storage is JsonSecretStorage.\n​The first time a wallet is create, the InitWallet command does the following:\n  Generate settings.walletSettings.seedStrengthBits random bits, as initial entropy. By default, 160 bits are generated.\n  Generate a BIP39 from the random bits generated, which can be seen as an encoding of the entropy bits. The standard BIP39 logic is used, with optional password.\n  Derive a seed from the mnemonic using BIP39\u0026rsquo;s PBKDF2-based derivation logic.\n  Encrypt this seed to disk with AES-GCM, using a random nonce, and a key derive from the password using PBKDF2-HMAC-SHA256 with 128000 iterations, using a random salt.\n  To unlock a wallet already created, a user provides the password and the wallet attempts to decrypt the stored data.\n​To restore an existing account from a BIP39 passphrase, a similar process as initialization is performed, except that the wallet will derive the seed from the mnemonic instead of picking random mnemonic.\n​The two risks we identified here are:\n  The absence of checks on the password\u0026rsquo;s length: since the password is sufficient to access the seed given the wallet\u0026rsquo;s on-disk stored secret, the password should in theory have at least as much entropy as the mnemonic, and in practice should be practically hard to crack. We thus recommend to enforce a minimal password length, for example of 16 characters.\n  Copies of secret values (password, seed, and derive private keys) are likely to remain in memory after wallet software execution, which is an intrinsic limitation garbage-collected languages such as Scala.\n  Another process or user sharing the same memory address space could potentially recover the secrets, and they could also appear in crash dumps. To the best of our knowledge, there is no effective mitigation in pure Scala.\n​\nPoW validation ​After previously reviewing the security of the Autolykos PoW, we performed another round of review focusing on its latest verification logic, and notably the changes in the commit eb0f85a.\n​The main relevant file is AutolykosPowScheme,and other important operations are for example implemented in HeadersProcessor and ModifierValidator.\n​We checked that the implemented verification logic is consistent with that specified in the Autolykos specifications, and that it is properly integrated in the block header validation logic.\n​We believe the following points should be addressed:\n  Stricter validation of k and n: although the class enforces k\u0026lt;=32 (number of elements in the solution) and n\u0026lt;31 (log2 of the total number of elements), weak could still be created from the authorized parameters. The validate() function may therefore have additional validation that n and k are equal to the intended values.\n  Assert that k and n are positive values, since currently negative ones (as Ints) would pass the assert statements.\n  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2020_01_12_security_audit/","subtitle":null,"title":"Security Audit (by Jean Philippe Aumasson)"},{"contents":"","link":"https://ergoplatform.org/en/blog/2020_01_12_security_audit/","permalink":"https://ergoplatform.org/en/news/2020_01_12/","subtitle":"We would like to announce that Ergo has successfully passed security audit of certain (most critical) parts of the code","title":"Security Audit (by Jean Philippe Aumasson)"},{"contents":"","link":"https://twitter.com/chepurnoy/status/1214518013418000384","permalink":"https://ergoplatform.org/en/news/2020_01_08/","subtitle":"Alexander Chepurnoy: \"your paper Bypassing Non-Outsourceable Proof-of-Work Schemes Using Collateralized Smart Contracts has been accepted for publication at WTSC@FC20\"","title":""},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.2.0","permalink":"https://ergoplatform.org/en/news/2020_01_07/","subtitle":"This release introduces breaking changes and improvements, ~3-4x faster-bootstrapping 👍 Resync needed, more details in the description of the release 🔥 ","title":"Ergo Mainnet 3.2.0 released"},{"contents":"","link":"https://twitter.com/coinbarn/status/1211026427686064133","permalink":"https://ergoplatform.org/en/news/2020_01_04/","subtitle":"Download binaries for MacOS, Windows and Linux","title":"Coinbarn wallet now has its desktop version"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_12_31_ergo_tool/","permalink":"https://ergoplatform.org/en/news/2020_01_04_2/","subtitle":"ErgoTool is a command line interface (CLI) for Ergo blockchain","title":"Make Your Own Ergo Wallet: Managing Ergo Coins with ErgoTool"},{"contents":"Introduction ErgoTool is a command line interface (CLI) for Ergo blockchain. You can use ErgoTool without running your own Ergo node. Even though running a node is the most secure way to communicate with the Ergo blockchain network, ErgoTool however, aims to provide more foundational tools at your disposal. Surely, you still can use it with your own running node.\nIn this post we will walk through simple steps to generate a mnemonic phrase, create a local secret storage and use it to send ERGs between addresses, all with the help of ErgoTool commands.\nGetting Started First of all we need to install ErgoTool on our system from sources by following the installation instructions. In the directory where we cloned ErgoTool there is ergo-tool.sh script which we are going to use to run commands. Run the following command to check ErgoTool is installed correctly.\n$ ./ergo-tool.sh help command name is not specified (run ergo-tool without arguments to list commands) Command Name:\thelp Usage Syntax:\tergo-tool help \u0026lt;commandName\u0026gt; Description:\tprints usage help for a command Doc page:\thttps://aslesarenko.github.io/ergo-tool/api/org/ergoplatform/appkit/ergotool/HelpCmd.html Let\u0026rsquo;s see what we get here. ErgoTool outputs the error message with the information about help command. This is a typical output of ErgoTool when one of the known commands is specified, but it is used incorrectly. As we can learn from the message, the help command requires us to specify additional \u0026lt;commandName\u0026gt; argument. Also, each command has an API doc page with all the details about command execution, so its url is shown here.\nCreate a New Mnemonic Phrase Mnemonic is a random sequence of characters which is used to generate a master key according to Hierarchical Deterministic Wallets specification. For convenience random sequence of english words is used, but this is not required. Run the following command to generate a new mnemonic phrase:\n$ ./ergo-tool.sh mnemonic bird harbor wheat innocent business disease busy quick yellow trust time oil enter situate moon Write it down on a paper and keep in a safe and secret place. As an additional security measure you can create an arbitrary mnemonic password. In some sense it can serve like an additional non-vocabulary word in the mnemonic. Mnemonic password is optional and is used for additional security. If you decide to use mnemonic password you should also write it down and keep in a secret and probably different from mnemonic place.\nImportant, both mnemonic phrase and mnemonic password are required to restore secret keys, if you lose any of them then you will not be able to regenerate you master key again.\nNext let\u0026rsquo;s use the generated mnemonic to create a storage with a master secret key.\nCreate a New Encrypted Storage For better security neither mnemonic phrase nor password is required by ErgoTool to perform the transaction signing. Instead, the secret key from the encrypted storage is required to sign spending transaction. We can generate a secret key and store it in an encrypted storage using createStorage command.\n$ ./ergo-tool.sh help createStorage Command Name:\tcreateStorage Usage Syntax:\tergo-tool createStorage [\u0026lt;storageDir\u0026gt;=\u0026#34;storage\u0026#34;] [\u0026lt;storageFileName\u0026gt;=\u0026#34;secret.json\u0026#34;] Description:\tCreates an encrypted storage file for the mnemonic entered by the user Doc page: https://aslesarenko.github.io/ergo-tool/api/org/ergoplatform/appkit/ergotool/CreateStorageCmd.html $ ./ergo-tool.sh createStorage Enter mnemonic phrase\u0026gt; bird harbor wheat innocent business disease busy quick yellow trust time oil enter situate moon Mnemonic password\u0026gt; Repeat mnemonic password\u0026gt; Storage password\u0026gt; Repeat storage password\u0026gt; Storage File: storage/secret.json A master secret key is generated from the (mnemonic phrase, mnemonic password) pair and saved encrypted in the storage/secret.json file. Mnemonic itself is not stored in the file and there is no way to restore it from the file, even if you know the passwords.\nPlease take care to enter correct mnemonic password, the one you chose and saved before. Since a mnemonic password is optional you can leave it empty by pressing enter.\nIf you forget the storage password (aka encryption password), you will not be able to use that storage file anymore, however, you can always restore your secret keys from (mnemonic phrase, mnemonic password) pair and thus create a new storage file with a new password.\nKeep your storage file and storage password in secret, anyone who obtain both your storage file and storage password will be able to decipher it and access secret keys.\nExtracting Data From Storage Secret storage contains master secret key and as a result can be used to compute both the public key and the pay-to-public-key address which correspond to that secret key. The extractStorage command is doing just that.\n$ ./ergo-tool.sh help extractStorage Command Name:\textractStorage Usage Syntax:\tergo-tool extractStorage \u0026lt;storage file\u0026gt; address|masterKey|publicKey|secretKey mainnet|testnet Description:\tReads the file, unlocks it using password and extract the requested property from the given storage file. Doc page:\thttps://aslesarenko.github.io/ergo-tool/api/org/ergoplatform/appkit/ergotool/ExtractStorageCmd.html $ ./ergo-tool.sh extractStorage storage/secret.json address mainnet Storage password\u0026gt; 9iHiSAg3ko2ZGxR2vhc1Aem3tShqfzEPDAF7XK5cdtbZ3Ut2CCf Here the command transforms the secret key to the corresponding public key and then creates the pay-to-public-key address on the mainnet.\nThe same way we can obtain public key, private key and other data from the storage.\n$ ./ergo-tool.sh extractStorage storage/secret.json secretKey mainnet Storage password\u0026gt; 55dfde63c9b6b4f47683592e85ee997ba2e93507f38ba3f9c82933bcfbc677ca $ ./ergo-tool.sh extractStorage storage/secret.json publicKey mainnet Storage password\u0026gt; 03f07aecb145a85920bf6e9be80efe5f1cd1a165b45ad3aa8e5c4ca3ba50856bb8 Listing Unspent Boxes ErgoTool has the special command to list all available (aka unspent) boxes for a given address.\n$ ./ergo-tool.sh listAddressBoxes 9f4QF8AD1nQ3nJahQVkMj8hFSVVzVom77b52JU7EW71Zexg6N8v BoxId NanoERGs 4840cb6facc20b765085db0ad24768ed0c5e7afd413e8e58e597c33a993f8119 4987000000 if we specify --print-json option, then ErgoTool will output all the boxes in json format\n$ ./ergo-tool.sh listAddressBoxes --print-json 9f4QF8AD1nQ3nJahQVkMj8hFSVVzVom77b52JU7EW71Zexg6N8v [{\u0026#34;boxId\u0026#34;:\u0026#34;4840cb6facc20b765085db0ad24768ed0c5e7afd413e8e58e597c33a993f8119\u0026#34;,\u0026#34;value\u0026#34;:4987000000,\u0026#34;ergoTree\u0026#34;:\u0026#34;0008cd02472963123ce32c057907c7a7268bc09f45d9ca57819d3327b9e7497d7b1cc347\u0026#34;,\u0026#34;creationHeight\u0026#34;:125646,\u0026#34;assets\u0026#34;:[],\u0026#34;additionalRegisters\u0026#34;:{},\u0026#34;transactionId\u0026#34;:\u0026#34;820c688f4b9d709924ba0186ee930a7df374d8852920bc769fc1f1d0b313e5ab\u0026#34;,\u0026#34;index\u0026#34;:2}] Transfer Coins Now, with secret key stored securely in the encrypted storage file, we can use ErgoTool to transfer coins from our address to some other recipient address. The command to do that is send.\n./ergo-tool.sh help send Command Name:\tsend Usage Syntax:\tergo-tool send \u0026lt;storageFile\u0026gt; \u0026lt;recipientAddr\u0026gt; \u0026lt;amountToSend\u0026gt; Description:\tsend the given \u0026lt;amountToSend\u0026gt; to the given \u0026lt;recipientAddr\u0026gt; using the given \u0026lt;storageFile\u0026gt; to sign transaction (requests storage password) Doc page:\thttps://aslesarenko.github.io/ergo-tool/api/org/ergoplatform/appkit/ergotool/SendCmd.html The storage file is necessary in order to access secret key and generate a signature. The storage password will be requested by ErgoTool to unlock and decipher the file content. The command send supports the --dry-run option which forces ErgoTool to create the signed transaction, but instead of sending it to the blockchain, ErgoTool prints the transaction on the console.\n$ ./ergo-tool.sh send --dry-run storage/E1.json 9hHDQb26AjnJUXxcqriqY1mnhpLuUeC81C4pggtK7tupr92Ea1K 5000000 Storage password\u0026gt; Creating prover... Ok Loading unspent boxes from at address 9f4QF8AD1nQ3nJahQVkMj8hFSVVzVom77b52JU7EW71Zexg6N8v... Ok Signing the transaction... Ok Tx: { \u0026#34;id\u0026#34;: \u0026#34;2633733a1d81b8fc747d984bdc36fac42cb52118b5057375b081b4c543c62b0e\u0026#34;, \u0026#34;inputs\u0026#34;: [ { \u0026#34;boxId\u0026#34;: \u0026#34;4840cb6facc20b765085db0ad24768ed0c5e7afd413e8e58e597c33a993f8119\u0026#34;, \u0026#34;spendingProof\u0026#34;: { \u0026#34;proofBytes\u0026#34;: \u0026#34;060e7c99c9c9cecf89ec5c3e7b692075e0b3415318f8064c64f7f01401ac29c6637b44535151e51d43d4cd25e05ad459dbe33718a99a22dd\u0026#34;, \u0026#34;extension\u0026#34;: {} } } ], \u0026#34;dataInputs\u0026#34;: [], \u0026#34;outputs\u0026#34;: [ { \u0026#34;boxId\u0026#34;: \u0026#34;4eaed414ae763158126859bbf912fa9ffb9ea67ac13d81d473b1c81ec65b06fd\u0026#34;, \u0026#34;value\u0026#34;: 5000000, \u0026#34;ergoTree\u0026#34;: \u0026#34;ErgoTree(0,WrappedArray(),Right(ConstantNode(SigmaProp(ProveDlog(ECPoint(6ba5cf,8ae5ac,...))),SSigmaProp)),80,[B@1117fff48)\u0026#34;, \u0026#34;creationHeight\u0026#34;: 130508, \u0026#34;assets\u0026#34;: [], \u0026#34;additionalRegisters\u0026#34;: {}, \u0026#34;transactionId\u0026#34;: \u0026#34;2633733a1d81b8fc747d984bdc36fac42cb52118b5057375b081b4c543c62b0e\u0026#34;, \u0026#34;index\u0026#34;: 0 }, { \u0026#34;boxId\u0026#34;: \u0026#34;059b426fe2aaef10b6a9a618f0c5b4e97d4dd9931328bf4f52bcf92b0943a42c\u0026#34;, \u0026#34;value\u0026#34;: 1000000, \u0026#34;ergoTree\u0026#34;: \u0026#34;ErgoTree(16,WrappedArray(IntConstant(0), IntConstant(0), ConstantNode(Coll(16,2,4,-96,11,8,-51,2,121,-66,102,126,-7,-36,-69,-84,85,-96,98,-107,-50,-121,11,7,2,-101,-4,-37,45,-50,40,-39,89,-14,-127,91,22,-8,23,-104,-22,2,-47,-110,-93,-102,-116,-57,-89,1,115,0,115,1),Coll[SByte$]), ConstantNode(Coll(1),Coll[SInt$]), IntConstant(1)),Right(BoolToSigmaProp(AND(ConcreteCollection(WrappedArray(EQ(Height$(163),SelectField(ExtractCreationInfo(ByIndex(Outputs$(165),ConstantPlaceholder(0,SInt$),None)),1)), EQ(ExtractScriptBytes(ByIndex(Outputs$(165),ConstantPlaceholder(1,SInt$),None)),SubstConstants(ConstantPlaceholder(2,Coll[SByte$]),ConstantPlaceholder(3,Coll[SInt$]),ConcreteCollection(WrappedArray(CreateProveDlog(DecodePoint(MinerPubkey$(172)))),SSigmaProp))), EQ(SizeOf(Outputs$(165)),ConstantPlaceholder(4,SInt$))),SBoolean)))),4836,[B@111805c40)\u0026#34;, \u0026#34;creationHeight\u0026#34;: 130508, \u0026#34;assets\u0026#34;: [], \u0026#34;additionalRegisters\u0026#34;: {}, \u0026#34;transactionId\u0026#34;: \u0026#34;2633733a1d81b8fc747d984bdc36fac42cb52118b5057375b081b4c543c62b0e\u0026#34;, \u0026#34;index\u0026#34;: 1 }, { \u0026#34;boxId\u0026#34;: \u0026#34;0638ddb0fe6a8cc6ca4f981f71777f4a6e8aad72d57fdf945b24e0ef4ca714e1\u0026#34;, \u0026#34;value\u0026#34;: 4981000000, \u0026#34;ergoTree\u0026#34;: \u0026#34;ErgoTree(0,WrappedArray(),Right(ConstantNode(SigmaProp(ProveDlog(ECPoint(472963,7c85fd,...))),SSigmaProp)),80,[B@111816258)\u0026#34;, \u0026#34;creationHeight\u0026#34;: 130508, \u0026#34;assets\u0026#34;: [], \u0026#34;additionalRegisters\u0026#34;: {}, \u0026#34;transactionId\u0026#34;: \u0026#34;2633733a1d81b8fc747d984bdc36fac42cb52118b5057375b081b4c543c62b0e\u0026#34;, \u0026#34;index\u0026#34;: 2 } ] } Note the \u0026ldquo;ergoTree\u0026rdquo; scripts are deserialized and printed as abstract syntax trees. This printing format can be regulated by additional options so that the scripts can be printed as human readable ErgoScript. (Not yet implemented, but somewhere on the roadmap.)\nIf we exclude --dry-run option, the transaction will be sent and included in the blockchain.\n$ ./ergo-tool.sh send storage/E1.json 9hHDQb26AjnJUXxcqriqY1mnhpLuUeC81C4pggtK7tupr92Ea1K 5000000 Storage password\u0026gt; Creating prover... Ok Loading unspent boxes from at address 9f4QF8AD1nQ3nJahQVkMj8hFSVVzVom77b52JU7EW71Zexg6N8v... Ok Signing the transaction... Ok Sendng the transaction... Ok Server returned tx id: \u0026#34;c5710af17f5124a232a5ef731fdf94a493025334c2a7d5a79e9923210972b962\u0026#34; The newly created transaction will be broadcast all over the blockchain and miners start to include it in a new block. Once the new block with our transaction is mined and accepted by the network our transfer is confirmed and we can see it in Explorer.\nWe can also list boxes of the recipient address and see the coin we created among others (until it is spent by the recipient)\n$ ./ergo-tool.sh listAddressBoxes 9hHDQb26AjnJUXxcqriqY1mnhpLuUeC81C4pggtK7tupr92Ea1K BoxId NanoERGs 252c5ce38fc367001ea48fa6813e6252ebc169288d9b5392c572edb55380b3cd 5000000 6df9dbf08b4859b7e280afbd0822dcf20dba5bf8e3e33b78fe278df6597276f1 2000000 d47f958b201dc7162f641f7eb055e9fa7a9cb65cc24d4447a10f86675fc58328 1000000 e050a3af38241ce444c34eb25c0ab880674fc23a0e63632633ae14f547141c37 1000000 b50ed8c2953fd33b52af816c4caa63ec5b6d236a262a5a192534695c3478da78 1000000 26d6e08027e005270b38e5c5f4a73ffdb6d65a3289efb51ac37f98ad395d887c 10000000000 Security Notes ErgoTool is created with security in mind and tries its best to safeguard the usage of sensitive information like mnemonic phrases (which are never stored persistently), passwords (which are never shown on the screen) etc. In addition, secret keys are never stored on local disk unencrypted and surely never sent anywhere.\nConclusion ErgoTool is designed to look and feel like a typical CLI utility:\n which is easy to use and fast to run from command line can be scriptable via shell scripts has built-in usage help  At the same time ErgoTool is designed to be easily extensible:\n implemented in high-level language Scala reuses the core libraries which are used in Ergo network client open-sourced and fully documented  This last point is especially important as many new commands can be easily added to ErgoTool, thanks to its architecture. If you need a specific feature or a command please file an issue or maybe even a PR.\nThe extensibility of ErgoTool is a subject of the next planned blog post, stay tuned!\nReferences  Ergo Site Ergo Sources Ergo Appkit Ergo Tool  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_31_ergo_tool/","subtitle":null,"title":"Make Your Own Ergo Wallet: Managing Ergo Coins with ErgoTool"},{"contents":"Ergo GPU Mining This article will help you start mining Ergo using a GPU.\nErgo mining is based on Autolykos, a Proof-of-Work algorithm designed to be ASIC and pool resistant. Miners have to perform memory-hard computations~(at least 4 GB memory is needed, but the current most efficient implementation utilizes between 8 GB of vRAM) that makes Ergo friendly for GPU mining. In addition, Autolykos requires access to private keys, thereby preventing mining pool formation. As soon as a correct solution is found, the miner broadcasts the block along with the solution and is able to collect the block reward after a delay of 720 blocks using the secret he used during mining. The rest of the network verifies the solution using the miner\u0026rsquo;s public key and this verification can be done very efficiently, requiring less than a kilobyte of memory.\nPrerequisites In order to mine, you need the following setup:\n A full node with wallet initialized and fully synced. A computer with a GPU that is recognized by your OS. Ergo mining software for your operating system. Ergo supports both AMD and NVidia GPUs.  Ergo mining requires a configured and synchronized Ergo node and at least one GPU for mining. You may use multiple GPUs if you wish (to multiply your hashing power) but you only need one Ergo node.\nNote that Ergo no longer works in Java 8 due to its lack of strong cryptography. You must use Java \u0026gt;= 9\nThe links for setting up the mining software are:\n Nvidia Miner AMD Miner  !!!WARNING!!! Since Autolykos utilizes private keys, you should never use untrusted mining software. Check that the software is open-source and validated by the community\nSync node and Initialize Wallet Follow the steps of setting up a node as described in the tutorial.\nEdit the config file of the node and add the following line.\nergo.node.mining = true\nEnsure that the wallet is initialized and you are in possession of the correct mnemonic sentence.\nFinally, ensure that the node is synced as described here.\nConfigure and run the miner On the computer where the miner will be running, create a file called config.json with the following content\n{ \u0026#34;seed\u0026#34;: \u0026#34;Attention!!! Replace this with your mnemonic sentence and keep it secret or you will get robbed\u0026#34;, \u0026#34;node\u0026#34;: \u0026#34;http://192.168.1.100:9053\u0026#34;, \u0026#34;keepPrehash\u0026#34;: false } where:\n seed is the mnemonic sentence from your node\u0026rsquo;s wallet obtained in the previous step. node is the URL of your node. keepPrehash is an optimization parameter. If set to true, the miner will consume at most 8GB of memory. If set to false the miner will consume at most 4GB of memory, but its performance will be for about 25% lower.  Run your miner using the command ./auto.out config.json (for Linux) or miner.exe config.json (for Windows) and enjoy receiving block rewards!\nOnce you have received any mining rewards, you can view the balance as described here and then withdraw the funds as described here.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_22_mining_for_fun/","subtitle":null,"title":"Mining Ergo for Fun and Profit"},{"contents":"","link":"https://twitter.com/avslesarenko/status/1209432757128089600","permalink":"https://ergoplatform.org/en/news/2019_12_24/","subtitle":null,"title":"ErgoTool: A Command Line Interface for Ergo blockchain"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1209173611124330501","permalink":"https://ergoplatform.org/en/news/2019_12_24_2/","subtitle":"https://github.com/robkorn/blockchain-ruminations/blob/master/universal_dApp_interface.md","title":"Universal dApp Interface \u0026 Package Standard"},{"contents":"","link":"https://twitter.com/chepurnoy/status/1209124149802745856","permalink":"https://ergoplatform.org/en/news/2019_12_23/","subtitle":"(combining cryptographic sigma-protocols with predicates on blockchain state and spending transaction)","title":"Early description of Ergo contractual approach"},{"contents":"","link":"https://twitter.com/chepurnoy/status/1209027361150308352","permalink":"https://ergoplatform.org/en/news/2019_12_23_2/","subtitle":"Ergo is using highly efficient AVL+ tree implementation for authenticating the state, proof size is few times smaller than in Ethereum! details: https://eprint.iacr.org/2016/994","title":"Ergo is using highly efficient AVL+ tree"},{"contents":"","link":"https://twitter.com/chepurnoy/status/1208820234406318080","permalink":"https://ergoplatform.org/en/news/2019_12_22/","subtitle":"https://github.com/ergoplatform/ergo/wiki/Mining-Ergo-for-Fun-and-Profit","title":"New tutorial: 'Mining Ergo for Fun and Profit'"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.5","permalink":"https://ergoplatform.org/en/news/2019_12_19/","subtitle":"Node UI (/panel) updated, cross-build for Scala 2.11 and few fixes. Details in the description of the release","title":"Ergo Mainnet 3.1.5 released"},{"contents":"Since the launch of the Ergo mainnet half a year ago, there has been an incredible amount of development and progress in the Ergo ecosystem. Auction smart contracts, crowdfunding, zero interest loans, privacy preserving protocols, and much more. Every week or two there\u0026rsquo;s some truly novel idea or development put out, however if you\u0026rsquo;re just an average blockchain enthusiast it\u0026rsquo;s likely you haven\u0026rsquo;t heard too much.\nWhy is that? The reason is that the Ergo ecosystem is making incredible strides forward in the technology side of things, however there is a distinct lack of content to consume for the average user who is interested. Great, Ergo has NiPoPoW support, but what the heck does that mean and why does it matter?\nTo aid in mending this, I am proud to announce the launch of the Ergo Cast.\nThe Ergo Cast is the Ergo ecosystem\u0026rsquo;s premier podcast where we dive into the nitty-gritty details in a fun and approachable format. The goal is to bring life to the technology by explaining why it\u0026rsquo;s so unique while showing off the distinct personalities behind the avatars who are developing it all.\nI, Robert Kornacki, am the host of the podcast and will be guiding you through understanding Ergo one episode at a time with the help of other key members in the community who will come on.\nA lot of time was spent in getting this project from a mere idea in the back of my head, all the way to now being publicly released so that we could have this as a small Christmas present for the community who have been very supportive of the project as a whole.\nThe podcast will start out on a monthly schedule and is available via Youtube, MP3 RSS Feed, and Itunes Podcasts, all of which you can easily find by going to https://ergocast.io. Each episode has time stamps so that you can easily skim through and learn about all the topics that you actually care about.\nIn, Episode #1: Understanding Ergo And It\u0026rsquo;s History , I was joined by Alex Chepurnoy who is one of the core developers and as a matter of fact, the original person who came up with the idea of building Ergo in the first place. We went in depth on why Ergo matters, why it was a necessity that it came to be, what are some of key differentiating benefits of Ergo, and we even covered the history behind what caused Alex to start an entire new cryptocurrency project from the ground-up.\nIf that got you interested, here is a list of all of the topics we hit during the whole episode:\n The Science Behind Ergo Ergo Smart Contracts At A High Level Ergo\u0026rsquo;s ASIC \u0026amp; Pool Resistant PoW Algorithm Summary Of Numerous Innovations Ergo Implements Ergo Smart Contract Implementation Successes What Inspired You To Create Ergo In The First Place How To Join The Ergo Community Biggest Roadblock And Success In Launching Ergo Who Is Ergo For? Local Currencies On Ergo (Kenya Ex. Potential Use Case) Blockchains Actually Becoming Useful \u0026amp; Why Ergo Exists Closing Remarks  All of the topics above are linked timestamps so you can jump right in by going to the Ergo Cast Website.\nI\u0026rsquo;ll be looking forward to helping break down Ergo into digestible episodes month-by-month, and hope to hear from you, the community, on what you\u0026rsquo;d like to see in the following episodes.\nHope you enjoy the episode and have a great Christmas holiday,\n-Robert Kornacki\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_16_podcast/","subtitle":null,"title":"The Ergo Cast: Understanding Ergo One Episode At A Time"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_12_12_new_quest/","permalink":"https://ergoplatform.org/en/news/2019_12_12/","subtitle":"Part I: Technical Aspects","title":"A New Quest for Decentralization"},{"contents":"While most active conversations today in the space are about wider adoption of the blockchain technology (which often means selling out to the Wall St.) and competition with systems like Visa and Mastercard (which often means giving up with decentralization or introducing unclear security assumptions in the name of efficiency), there is the obvious need to revisit the roots of the cryptocurrency movement, which are mostly about decentralization. Many questions to be answered in clear here. Is it okay when 90% of mining power in Bitcoin can gather in one room? Is it okay when 2 or 3 mining pools control majority of hashing power, so can do censorship? Is it okay when almost all the new nodes avoid processing a blockchain from its genesis block? Is it okay when a Proof-of-Work coin developers are doing a hard-fork changing the consensus algorithm to make it GPU-friendly again? Can we summarize all the issues with decentralization? Can we cover most of issues with technical means?\nDecentralization is about many issues lying in many fields, of technical, social, and hybrid kinds. Researchers and developers are trying to find technical solutions, preferably, elegant and efficient. However, for many issues such solutions are not known, thus social solutions are also needed.\nIn this article I will cover only technical aspects of decentralization, namely, decentralization of mining and decentralization of verification.\nDecentralization of Mining The two biggest concerns about decentralization of mining are specialized hardware (such as ASICs) and centralized pools.\nWith ASICs, a big player capable to invest enough money into R\u0026amp;D can get unfair advantage from privately owned efficient hardware. In principle, for any kind of computational activity it is always possible to develop specialized hardware performing better than commodity computing units, such and CPUs and GPUs. However, for different computational tasks R\u0026amp;D efforts and possible outcome could vary a lot. Reasoning behind a search for a perfect (or close enough to perfect) could be quite complex (see e.g. 30 pages long Equihash paper).\nFor most of Proof-of-Work cryptocurrencies (including Bitcoin, Ethereum, ZCash), 2 to 4 centralized mining pools\ncontrol majority of mining power. This could mean easy censorship or frontrunning on applications (for example, reordering exchange orders), as in centralized pools only pool decides block candidate for the whole pool to work on. As a possible outcome, non-outsourceable mining schemes can prevent centralized pools formation. Only Ergo Platform is known for deploying a practical non-outsourceable Proof-of-Work scheme (based on a supposedly memory-harder problem from the Equihash paper) called Autolykos.\nAs an example where social decentralization issues meet the decentralization of mining, sometimes developers of Proof-of-Work are introducing hard-forks to make a Proof-of-Work algorithm GPU-friendly again once ASICs are going to dominate in the mining market for the coin, however, it is always not quite clear why totally legit activity is banned and why developers (along with some users) can do hard-fork for this particular reason.\nDecentralization of Verification Decentralization of verification is about possibility to check validity of blockchain history. Such check provides confidence that nothing bad (i.e not conforming to a protocol) was injected to the blockchain and thus give a user a right to reject malicious chain even if it has absorbed more work than alternatives. There were many talks about such the right in the Bitcoin community when it was partly hot about User-Activated Soft Fork (UASF) idea, and recent article \u0026ldquo;Who secures Bitcoin?\u0026quot; is summarizing this way of thinking well.\nIf verification can be done in reasonable time only by an entity able to spend millions on renting a datacenter, obviously a network is not decentralized. Ideally, it should be possible to check integrity of the whole blockchain on commodity hardware, like a decent laptop.\nHowever, new blockchains also tend to absorb more and more features, and they are not coming for free. Then the huge topic in the research community is about how to make possible to check integrity of the whole blockchain with pruned blocks or system state (or both) under plausible assumptions. Possible solutions here are about bootstrapping state snapshot and blockchain suffix on top of it (popular in Ethereum protocol clients, and formalized in an academic paper even), stateless clients (partially stateless, as implemented in Ergo Platform or fully stateless which do exist only in research papers currently).\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_12_new_quest/","subtitle":null,"title":"A New Quest for Decentralization, Part I: Technical Aspects"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.4","permalink":"https://ergoplatform.org/en/news/2019_12_04_2/","subtitle":"This minor release includes new API method /script/executeWithContext and new integration tests.","title":"Ergo Mainnet 3.1.4 released"},{"contents":"","link":"https://github.com/coinbarn/ergo-ts","permalink":"https://ergoplatform.org/en/news/2019_12_04_1/","subtitle":"The library for Ergo platform, written in TypeScript, and compiled to JavaScript","title":"Typescript library for Ergo with the support of custom tokens and complex transactions"},{"contents":" With thanks to Robert Kornacki and Denys Zadorozhnyi.\n Ergo Appkit is a library for polyglot development of Ergo Applications based on GraalVM. GraalVM has many great use cases. Expanding on that, in this article we will go through some of the Appkit features inherited from GraalVM and take you step-by-step in learning how to take advantage of them.\n 0. Example Scenario 1. Java Ergo App Development 2. Low-footprint, Fast-startup Ergo Applications 3. Develop Ergo Applications in JavaScript, Python, Ruby 4. Ergo Native Shared Libraries 5. Debug Your Polyglot Ergo Application  Example Scenario We will create a simple console application (called FreezeCoin) in Java which uses the Appkit library. By using Appkit, we will be able to easily send a new transaction to an Ergo node programatically. The transaction will transfer a given amount of Erg into a new box protected by the following Ergo contract written in ErgoScript (see this introduction and more advanced examples to learn more about ErgoScript).\n// Freezer Contract { // Parameters  // freezeDeadline: Int - some future block number after which the box can be spent  // ownerPk: SigmaProp - public key of the new box owner  sigmaProp(HEIGHT \u0026gt; freezeDeadline) \u0026amp;\u0026amp; ownerPk } In short, a box (and therefore the funds within the box) are locked under a contract (or script) on the Ergo blockchain. In order for the box to be spent, the contract must evaluate to true. Thus the individual who wishes to spend the box must ensure that the contract evaluates to true based off of the encoded logic within it.\nOur Freezer contract above checks the following conditions before allowing the box to be spent:\n  The current block number of the Ergo blockchain (aka blockchain HEIGHT) is greater than the specified deadline\n  The spending transaction must be signed by the owner of the secret key corresponding to the ownerPk public key.\n  The first condition forbids anyone from spending the box before the Ergo blockchain grows to the given height. Because new blocks on the blockchain are mined approximately every 2 minutes on average, using the current blockchain height it is easy to define any duration of delay we wish such as 1 day, 1 week, or 1 month. (i.e. (60 / 2) * 24 * 7 = 5040, which is the # of blocks per week).\nWe will now be going in depth on how we can take this Freezer Contract and integrate it with the Apkit library in order to create the FreezeCoin console application so that anyone and everyone can choose to freeze their coins if they so wish. (Granted, this contract/dApp is not actually useful, however it is an effective simple example for displaying how this technology stack works so that you yourself can build useful dApps down the line.)\n1. Java Ergo App Development Appkit aims to provide a set of interfaces which can be used idiomatically in Java. You will feel right at home using Appkit if you are a Java veteran.\nPlease follow the setup instructions for GraalVM and Appkit if you wish to reproduce the examples below.\nTo use Appkit in our Java implementation of FreezeCoin we must add the following dependency in the gradle file\ndependencies { implementation(\u0026#34;org.ergoplatform\u0026#34;, \u0026#34;ergo-appkit_2.12\u0026#34;, \u0026#34;3.1.0\u0026#34;, \u0026#34;compile\u0026#34;) ... } Furthermore at runtime Appkit/our application needs to connect with an Ergo Node via REST API. Often, the node will be running locally and made available at http://localhost:9052/. This is the standard scenario for anyone who has set up a full-node by following these instructions and is using the default configuration.\nHenceforth we will assume that you have setup and started your Ergo Node so that it is available for testing of the application.\nNext, our application will need to know how to be able to a connect to our local running node, in addition to other various settings in order to function properly. We will use a json file with the following configuration parameters which our FreezeCoin app will load at startup.\nfreeze_coin_config.json:\n{ \u0026#34;node\u0026#34;: { \u0026#34;nodeApi\u0026#34;: { \u0026#34;apiUrl\u0026#34;: \u0026#34;http://localhost:9052/\u0026#34;, \u0026#34;apiKey\u0026#34;: \u0026#34;put your secret apiKey generated during node setup here\u0026#34; }, \u0026#34;wallet\u0026#34;: { \u0026#34;mnemonic\u0026#34;: \u0026#34;the mnemonic key used to initialize or restore the wallet of the node\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;the password you chose to protect the wallet\u0026#34;, \u0026#34;mnemonicPassword\u0026#34;: \u0026#34;the password you chose to protect the mnemonic\u0026#34; }, \u0026#34;networkType\u0026#34;: \u0026#34;TESTNET\u0026#34; }, \u0026#34;parameters\u0026#34;: { \u0026#34;newBoxSpendingDelay\u0026#34;: \u0026#34;30\u0026#34;, \u0026#34;ownerAddress\u0026#34;: \u0026#34;3WzR39tWQ5cxxWWX6ys7wNdJKLijPeyaKgx72uqg9FJRBCdZPovL\u0026#34; } } Here apiKey is the secret key required for API authentication which can be acquired as described here. Your mnemonic is the secret phrase obtained during setup of a new wallet.\nHow our app will work is that the user will launch it from the command line and provide one argument. This argument is the amount of value (in NanoErgs) which they wish to freeze/lock under the Freezer contract which we wrote above.\nOur first step for our FreezeCoin app will be to read the configuration json file we just created and to accept the command line argument from the user:\npublic static void main(String[] args) { long amountToSend = Long.parseLong(args[0]); // positive value in NanoErg  ErgoToolConfig conf = ErgoToolConfig.load(\u0026#34;freeze_coin_config.json\u0026#34;); // the rest of the code discussed below  ... } With these acquired, we can now obtain the spending delay and the owner address which were defined in the json config file.\nint newBoxSpendingDelay = Integer.parseInt(conf.getParameters().get(\u0026#34;newBoxSpendingDelay\u0026#34;)); Address ownerAddress = Address.create(conf.getParameters().get(\u0026#34;ownerAddress\u0026#34;)); Next we need to connect to the running Ergo node from our Java application so that we can use the data we just parsed and post something on-chain. This is done by creating an ErgoClient instance which uses our pre-defined values for our node from the json config file as well.\nErgoNodeConfig nodeConf = conf.getNode(); ErgoClient ergoClient = RestApiErgoClient.create(nodeConf); Now that we have an instance of ErgoClient, we can execute any block of code and have access to the current blockchain context.\nString txJson = ergoClient.execute((BlockchainContext ctx) -\u0026gt; { // use ctx here to create and sign a new transaction  // then send it to the node }); The lambda passed to execute is called when the current blockchain context is loaded from the Ergo node. In this lambda we shall put our application logic.\nFirst we start with some auxiliary steps.\n// access the wallet embedded in the Ergo node // (using the wallet specified via mnemonic we put in freeze_coin_config.json) ErgoWallet wallet = ctx.getWallet(); // calculate total amount of NanoErgs we need to send to the new box // including paying for transaction fees long totalToSpend = amountToSend + Parameters.MinFee; // request for unspent boxes that cover the required amount of NanoErgs from the wallet Optional\u0026lt;List\u0026lt;InputBox\u0026gt;\u0026gt; boxes = wallet.getUnspentBoxes(totalToSpend); if (!boxes.isPresent()) throw new ErgoClientException( \u0026#34;Not enough coins in your specified wallet to pay \u0026#34; + totalToSpend, null); // create a \u0026#34;prover\u0026#34;, which is a special object that will be used for signing the transaction // the prover should be configured with your wallet\u0026#39;s secrets, which are necessary to generate signatures (aka proofs) ErgoProver prover = ctx.newProverBuilder() .withMnemonic( nodeConf.getWallet().getMnemonic(), nodeConf.getWallet().getPassword()) .build(); At this point we have the input boxes chosen for our spending transaction, but we now need to create an output box with the specified amountToSend and locked under the Freezer contract.\n// the only way to create a transaction is using the tx builder obtained from the context // the builder uses the context to access necessary blockchain data. UnsignedTransactionBuilder txB = ctx.newTxBuilder(); // create new box using new builder obtained from the transaction builder // in this case we compile a new ErgoContract from the Freezer ErgoScript code OutBox newBox = txB.outBoxBuilder() .value(amountToPay) .contract(ctx.compileContract( ConstantsBuilder.create() .item(\u0026#34;freezeDeadline\u0026#34;, ctx.getHeight() + newBoxSpendingDelay) .item(\u0026#34;ownerPk\u0026#34;, ownerAddress.getPublicKey()) .build(), \u0026#34;{ sigmaProp(HEIGHT \u0026gt; freezeDeadline) \u0026amp;\u0026amp; ownerPk }\u0026#34;)) .build(); Note, in order to compile ErgoContract from the Freezer script source code the compileContract method requires that we provide values for named constants which are used within the script. If no such constants are used, then ConstantsBuilder.empty() can be passed to it.\nIn this case we pass the public key of the new box owner into the ownerPk placeholder in the script. To repeat from earlier, this means that the box can only be spent by the owner of the corresponding secret key.\nNext, we create an unsigned transaction using all the data we\u0026rsquo;ve put together thus far.\n// provide the transaction builder with which boxes we are going to spend, which outputs // should be created, the total transaction fees, and the address for change to be sent to UnsignedTransaction tx = txB.boxesToSpend(boxes.get()) .outputs(newBox) .fee(Parameters.MinFee) .sendChangeTo(prover.getP2PKAddress()) .build(); And finally we:\n Use the prover to sign the built transaction Thus obtain a SignedTransaction instance Use the blockchain context to send the signed transaction to the Ergo node.  The resulting txId can be used to refer to this transaction later however we do not use it here.\nSignedTransaction signed = prover.sign(tx); String txId = ctx.sendTransaction(signed); return signed.toJson(true); As you may have noticed, for our final step we show off that it is possible to serialize the signed transaction into a Json string with pretty printing turned on. Look at the full source code of the example for more details and for using it as a template in your own application.\n Now with all of the code set in stone, we can run our FreezeCoin application using the following steps (assuming you are in the directory where you cloned ergo-appkit-examples).\n$ pwd the/directory/you/cloned/ergo-appkit-examples $ ./gradlew clean shadowJar This will assemble the build/libs/appkit-examples-3.1.0-all.jar file containing our FreezeCoin Java application and all of its dependencies in a single fat jar. Note, this step has to be repeated after any changes are made to the Java source code of our application.\nHaving created our application, we can now use our FreezeCoin app:\n$ java -cp build/libs/appkit-examples-3.1.0-all.jar \\  org.ergoplatform.appkit.examples.FreezeCoin 1000000000 You will get something along the lines of this output in the console.\nAnd with that your transaction was accepted by the Ergo node and broadcast into the network where it shall lay await in the transaction pool to be added to a block. Once a miner selects and adds it to a block, your coins will be officially \u0026ldquo;frozen\u0026rdquo; within the newly created box based off of the values you provided to the FreezeCoin application.\nThe example assumes the Ergo node (and the embedded wallet) is owned by the FreezeCoin user. However this is not strictly required and the Appkit interfaces can be used to create and send new transactions using arbitrary public Ergo nodes.\n2. Low-footprint, Fast-startup Ergo Applications As you may know, using Java for short-running processes has a lot of drawbacks. Applications tend to suffer from long startup times and relatively high memory usage.\nLet\u0026rsquo;s run FreezeCoin using the time command to get the real (wall-clock elapsed time) it takes the entire program to run from start to finish. We use the -l flag to print the memory usage as well.\n$ /usr/bin/time -l java -cp build/libs/appkit-examples-3.1.0-all.jar \\  org.ergoplatform.appkit.examples.FreezeCoin 1000000000 ... 4.97 real 8.41 user 0.69 sys 513703936 maximum resident set size 0 average shared memory size 0 average unshared data size 0 average unshared stack size 125010 page reclaims 1216 page faults 0 swaps 0 block input operations 0 block output operations 13 messages sent 86 messages received 1 signals received 2384 voluntary context switches 17409 involuntary context switches As seen above, this tiny application took 2 parallel threads almost 4 seconds to run. Most of that time can be attributed to the JVM startup and the background JIT compiler running. This is quite sub-par performance, and we know we can do a lot better.\nLuckily, GraalVM provides us with the perfect solution.\nWe can solve this inherent issue with the JVM by compiling the Java code ahead-of-time into a native executable image via GraalVM. This skips over the need to use the Java just-in-time compiler at runtime.\nThe experience for us (the developer using GraalVM) is quite similar to a conventional compiler like gcc. Note, we may need to run ./gradlew clean shadowJar first.\n$ ./gradlew clean shadowJar $ native-image --no-server \\  -cp build/libs/appkit-examples-3.1.0-all.jar\\  --report-unsupported-elements-at-runtime\\  --no-fallback -H:+TraceClassInitialization -H:+ReportExceptionStackTraces\\  -H:+AddAllCharsets -H:+AllowVMInspection -H:-RuntimeAssertions\\  --allow-incomplete-classpath \\  --enable-url-protocols=http,https org.ergoplatform.appkit.examples.FreezeCoin freezecoin [freezecoin:3133] classlist: 35,217.78 ms [freezecoin:3133] (cap): 6,063.07 ms [freezecoin:3133] setup: 8,268.99 ms [freezecoin:3133] (typeflow): 60,238.25 ms [freezecoin:3133] (objects): 33,009.06 ms [freezecoin:3133] (features): 4,796.86 ms [freezecoin:3133] analysis: 102,876.01 ms [freezecoin:3133] (clinit): 11,642.43 ms [freezecoin:3133] universe: 13,718.96 ms [freezecoin:3133] (parse): 5,053.18 ms [freezecoin:3133] (inline): 18,317.24 ms [freezecoin:3133] (compile): 44,806.82 ms [freezecoin:3133] compile: 72,288.24 ms [freezecoin:3133] image: 7,955.29 ms [freezecoin:3133] write: 2,872.25 ms [freezecoin:3133] [total]: 243,813.30 ms The simple command above produces a complete native executable called freezecoin.\nTo emphasize, this executable isn’t a mere launcher for the JVM. In fact it doesn’t link to the JVM or bundle the JVM in any way. native-image compiles the FreezeCoin code, as well as any Java libraries it depends on, all the way down to simple machine code.\nIf we look at the libraries which freezecoin uses you can see that it only uses standard system libraries. Thus, we can move just this one executable to another system which doesn\u0026rsquo;t have a JVM installed and it will run there without issue.\n$ otool -L freezecoin # ldd freezecoin on Linux freezecoin: /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4) /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1455.12.0) /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11) If we time this new freezecoin executable, we can see that it starts approximately 8x faster, and uses around 6x less memory. What this means is that you don’t feel that palpable pause you always get when running a short-running program with the JVM.\n$ DYLD_LIBRARY_PATH=$GRAAL_HOME/jre/lib /usr/bin/time -l ./freezecoin 1800000000 0.43 real 0.15 user 0.03 sys 81289216 maximum resident set size 0 average shared memory size 0 average unshared data size 0 average unshared stack size 20079 page reclaims 0 page faults 0 swaps 0 block input operations 0 block output operations 13 messages sent 86 messages received 0 signals received 11 voluntary context switches 138 involuntary context switches This is just one of the great benefits of GraalVM which we get to take advantage of with Appkit.\n3. Develop Ergo Applications in JavaScript, Python, Ruby GraalVM supports so called polyglot programming in which different components of an application can be developed using the most suitable language and then seamlessly combine together at runtime. In this way a unique library written in say Java can be used in a node.js application written in JavaScript for example.\nTo support polyglot programming GraalVM platform has it\u0026rsquo;s own high performance implementations of popular languages. We are going to take advantage of this for our FreezeCoin example project to show you how easy this is to use your preferred language.\nBefore running the examples below (in JavaScript, Python and Ruby) please make sure that you have the Java version of FreezeCoin working locally in order to ensure everything is set up correctly.\nJavaScript GraalVM can run JavaScript and Node.js applications out of the box. It is compatible with the ECMAScript 2019 specification. Additionally, js and node launchers accept special --jvm and --polyglot command line options which allow JS scripts to access Java objects and classes.\nGiven that being the case, a JS implementation of FreezeCoin can be easily written using the Appkit API interface. Please see the full source code of FreezeCoin JS implementation for details. The following command use node launcher to execute FreezeCoin.js script.\n$ node --jvm --vm.cp=build/libs/appkit-examples-3.1.0-all.jar \\  js-examples/FreezeCoin.js 1000000000 Note, the paths in the command are relative to the root of ergo-appkit-examples project directory.\nPython GraalVM can run Python scripts, though the Python implementation is still experimental (see also compatibility section for details).\nPython example of FreezeCoin can be executed using the following command\n$ graalpython --jvm --polyglot --vm.cp=build/libs/appkit-examples-3.1.0-all.jar \\  python-examples/FreezeCoin.py 1900000000 Ruby GraalVM can run Ruby scripts using TruffleRuby implementation, which is however still experimental (see also compatibility section for details). TruffleRuby aims to be fully compatible with the standard implementation of Ruby, MRI, version 2.6.2\nRuby example of FreezeCoin can be executed using the following command\n$ truffleruby --polyglot --jvm --vm.cp=build/libs/appkit-examples-3.1.0-all.jar \\  ruby-examples/FreezeCoin.rb 1900000000 4. Ergo Native Shared Libraries Another great benefit of GraalVM is that we can compile Java classes down into a native shared library instead of an executable.\nTo do this we declare one or more static methods as the @CEntryPoint.\npublic class FreezeCoin { ... /** * Entry point callable from C which wraps {@link FreezeCoin#sendTx} */ @CEntryPoint(name = \u0026#34;sendTx\u0026#34;) public static void sendTxEntryPoint( IsolateThread thread, SignedWord amountToSendW, CCharPointer configFileNameC, CCharPointer resBuffer, UnsignedWord bufferSize) throws FileNotFoundException { long amountToSend = amountToSendW.rawValue(); // Convert the C strings to the target Java strings.  String configFileName = CTypeConversion.toJavaString(configFileNameC); String txJson = sendTx(amountToSend, configFileName); // put resulting string into provided buffer  CTypeConversion.toCString(txJson, resBuffer, bufferSize); } ... } We can then compile down to a shared library and an automatically generated header file. Notice the use of the --shared option.\n$ native-image --no-server \\  -cp build/libs/appkit-examples-3.1.0-all.jar\\  --report-unsupported-elements-at-runtime\\  --no-fallback -H:+TraceClassInitialization -H:+ReportExceptionStackTraces\\  -H:+AddAllCharsets -H:+AllowVMInspection -H:-RuntimeAssertions\\  --allow-incomplete-classpath \\  --enable-url-protocols=http,https --shared -H:Name=libfreezecoin -H:Path=c-examples $ otool -L c-examples/libfreezecoin.dylib c-examples/libfreezecoin.dylib: .../c-examples/libfreezecoin.dylib (compatibility version 0.0.0, current version 0.0.0) /usr/lib/libSystem.B.dylib (compatibility version 1.0.0, current version 1252.50.4) /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation (compatibility version 150.0.0, current version 1455.12.0) /usr/lib/libz.1.dylib (compatibility version 1.0.0, current version 1.2.11) Now we have the ability to write a C program which uses the library. The interface to our native library does have a bit of boilerplate (because the VM needs to manage a heap, threads, a garbage collector and more), and thus we need to create an instance and provide it our main thread.\n#include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;stdio.h\u0026gt; #include \u0026lt;libfreezecoin.h\u0026gt; int main(int argc, char **argv) { graal_isolate_t *isolate = NULL; graal_isolatethread_t *thread = NULL; if (graal_create_isolate(NULL, \u0026amp;isolate, \u0026amp;thread) != 0) { fprintf(stderr, \u0026#34;graal_create_isolate error\\n\u0026#34;); return 1; } char * configFileName = \u0026#34;freeze_coin_config.json\u0026#34;; // get amountToSend from cmd args and call transaction creation  long amountToSend = atol(argv[1]); char result[1024 * 16]; sendTx(thread, amountToSend, configFileName, result, sizeof(result)); // print out serialized result  printf(\u0026#34;%s\\n\u0026#34;, result); if (graal_detach_thread(thread) != 0) { fprintf(stderr, \u0026#34;graal_detach_thread error\\n\u0026#34;); return 1; } return 0; } We can compile this with our standard system tools and easily run our executable (set LD_LIBRARY_PATH=. on Linux).\n$ clang -Ic-examples -Lc-examples -lfreezecoin c-examples/freezecoin.c -o call_freezecoin $ otool -L call_freezecoin $ DYLD_LIBRARY_PATH=$GRAAL_HOME/jre/lib ./call_freezecoin 1000000000 5. Debugging Your Polyglot Ergo Application You can debug JS, Python and Ruby in IntelliJ, but if for some reason this doesn\u0026rsquo;t work for you or fit with your preferred editor, GraalVM offers another option.\nAll of the GraalVM languages (except for Java) are implemented using the common Truffle framework. Truffle allows for tooling like debuggers to be implemented once and be available for all supported languages.\nAs such we can run our program with the flag --inspect which will give us a link to open in Chrome and will pause the program in the debugger.\n$ ruby --polyglot --jvm --inspect --vm.cp=build/libs/appkit-examples-3.1.0-all.jar \\  ruby-examples/FreezeCoin.rb 1900000000 Debugger listening on port 9229. To start debugging, open the following URL in Chrome: chrome-devtools://devtools/bundled/js_app.html?ws=127.0.0.1:9229/30c7da1e-7558a47d09b ... From here we can set breakpoints and continue execution. When it breaks we’ll see values of the variables, can continue again until the next breakpoint, and do everything we\u0026rsquo;ve come to expect from debuggers.\nConclusions And with all of that said and done, we see just how easy it is to use Appkit to develop Ergo Applications. Appkit relies on the same exact core libraries which were used in implementing the Ergo consensus protocol. These libraries include the ErgoScript compiler, cryptography, byte code interpreter, data serialisers and the other core components. Using GraalVM we are able to reuse these tried and tested components in different application contexts without any modification or rewriting them ourselves.\nNo matter if you are using Java, JavaScript, Python or Ruby, you can take advantage of Appkit with GraalVM to drastically simplify the process of interacting with the Ergo blockchain while creating native-running (d)Apps.\nStay tuned. In future posts we will introduce you to other interesting potential applications powered by Appkit.\nReferences  Ergo Site Ergo Sources Ergo Appkit Ergo Appkit Examples GraalVM  ","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_03_top5/","subtitle":null,"title":"5 Ways Ergo Application Development Is Changed Forever Thanks To Appkit"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_12_03_top5/","permalink":"https://ergoplatform.org/en/news/2019_12_03_2/","subtitle":"Appkit: A Library for Polyglot Development of Ergo Applications","title":"5 Ways Ergo Application Development Is Changed Forever Thanks To Appkit and GraalVM"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_12_03_how_to_setup/","permalink":"https://ergoplatform.org/en/news/2019_12_03_1/","subtitle":"Simplified tutorial for new users","title":"How to set up and configure a full Ergo node"},{"contents":"This tutorial explains how to install and run a full Ergo node. It does not cover mining.\nNode security There are a few important aspects of node usage that your wallet and money\u0026rsquo;s safety depends on:\n An Ergo node requires storing security-critical parameters in the configuration file. You should never make this file public. An Ergo node provides a REST API for interacting with the built-in wallet. Sensitive API methods require a security token, which should never be sent over untrusted channels. Access to the Ergo REST API must be restricted to known hosts. In particular, the API must not be accessible from the Internet.  Prerequisites To run an Ergo node you need JRE version \u0026gt;= 8 to be installed. One way to install it is to use Oracle implementation of Java.\nThe next step is to download the latest Ergo client release jar file and create a node configuration file.\nNote that instead of downloading the jar, you can clone the repository and create the jar yourself using SBT by issuing the sbt assembly command.\nDenote by ergo_folder the folder where the jar is kept.\nRunning the node for the first time Create a configuration file ergo.conf with the following text in ergo_folder.\nergo { directory = ${ergo.directory}\u0026#34;/.ergo\u0026#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}\u0026#34;/wallet/keystore\u0026#34; } The parameter ${ergo.directory} points to the directory where the jar will be run from. Open a command prompt and cd to ergo_folder. Then issue the following command to run the node for the first time:\njava -jar ergo-\u0026lt;release\u0026gt;.jar --mainnet -c ergo.conf The node will start syncing immediately after this. Wait for a few minutes for the API to start and go to the next step.\nNote: You can use any name for the file instead of ergo.conf. All configuration parameters are to be passed through this file and you only need to rewrite parameters that you want to change from the default values. The above config file actually has the default values.\nCompute the hash of your secret First, select a secret to protect your API. Then go to http://127.0.0.1:9053/swagger#/utils/hashBlake2b and call the API to compute the hash of your secret. Refer to the image below.\nCopy the response containing the hash for use in the next step (see below image). In our example, the secret is hello whose hash corresponds to 324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf.\nIMPORTANT You must use a different and strong secret.\nUpdate config file with API key hash Edit the config file ergo.conf and paste the hash copied in the previous step. The file should look as follows:\nergo { directory = ${ergo.directory}\u0026#34;/.ergo\u0026#34; node { mining = false } wallet.secretStorage.secretDir = ${ergo.directory}\u0026#34;/wallet/keystore\u0026#34; } scorex { restApi { # Hex-encoded Blake2b256 hash of an API key.  # Should be 64-chars long Base16 string. # below is the hash of the string \u0026#39;hello\u0026#39; # replace with your actual hash  apiKeyHash = \u0026#34;324dcf027dd4a30a932c441f365a25e86b173defa4b8e58948253471b81b72cf\u0026#34; } } Initialize wallet Restart the node and go to http://127.0.0.1:9053/panel to access the panel. Then set the API key secret from the previous step. Note that you need to set the secret and not the hash from the config file. In our example, this is the string hello.\nFinally, click on initialize wallet:\nIn the pop-up that opens, you must enter a wallet password. The mnemonic password is optional. After you click send, the wallet will return a mnemonic sentence as shown below.\nYou must copy this sentence and save it in a safe place. This sentence will be needed to restore the wallet on a different computer.\nGet wallet addresses This is a test to ensure you have set up the node properly. It will return the current addresses in the wallet. In the panel at http://127.0.0.1:9053/panel click on the Wallet tab on the left and then on Get all wallet addresses to view the addresses currently maintained by the wallet. It should return at least one address if the node is set correctly.\nUse the Swagger UI A Swagger UI is available at http://127.0.0.1:9053/swagger. You had already used it earlier to compute the hash of your secret. You can also use this UI to make API calls for advanced operations that are not (yet) available in the panel. Some examples of this are:\n Creating non-standard transactions with registers and context variables. Creating transactions that issue tokens. Creating transactions that use certain boxes as inputs.  A future article will discuss each of these operations in detail.\nNote that most methods in the API are protected and you would need to use your secret (from earlier) to access these methods. The following images show the process of setting this secret in the Swagger UI.\nNavigate to the top of the page and click the \u0026ldquo;Authorize\u0026rdquo; button. Enter your secret in the form that pops-up as shown in the figure below. After the password is entered and you have clicked \u0026ldquo;Authorize\u0026rdquo;, you will be shown the popup below: Now navigate to http://127.0.0.1:9053/swagger#/wallet/walletAddresses and click on \u0026ldquo;Try it out\u0026rdquo;. You should see the same list of addresses as you saw earlier from the panel.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_12_02_how_to_setup/","subtitle":null,"title":"How to set up and configure a full Ergo node"},{"contents":"","link":"https://www.probit.com/app/exchange/ERG-BTC","permalink":"https://ergoplatform.org/en/news/2019_10_30/","subtitle":"We're happy to announce that ERGO ($ERG) is listed on Probit Exchange","title":"ERGO ($ERG) is listed on Probit Exchange"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.3","permalink":"https://ergoplatform.org/en/news/2019_10_29/","subtitle":"This release includes simplified wallet UI, improved memory footprint due to more efficient ErgoTree interpreter, and some bugfixes","title":"Ergo Mainnet 3.1.3 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.2","permalink":"https://ergoplatform.org/en/news/2019_10_14/","subtitle":"This release includes rebroadcasting of mempool transactions. API route to generate P2SH address disabled","title":"Ergo Mainnet 3.1.2 released"},{"contents":"","link":"https://twitter.com/Hotbit_news/status/1181492203035643904","permalink":"https://ergoplatform.org/en/news/2019_10_08_hotbit/","subtitle":"Deposits and trading open at: 2019-10-09 15:00（UTC+8）","title":"ERGO ($ERG) is listed on HOTBIT Exchange"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.1","permalink":"https://ergoplatform.org/en/news/2019_10_08/","subtitle":"New UI available(e.g. 127.0.0.1/panel). A simplified wallet UI will be added in next versions. New API methods to get wallet status and address from a script","title":"Ergo Mainnet 3.1.1 released"},{"contents":"","link":"https://github.com/bisq-network/bisq/releases/tag/v1.1.6","permalink":"https://ergoplatform.org/en/news/2019_09_16/","subtitle":"BISQ, the decentralized P2P exchange network, added support for ERG","title":"BISQ has officially added ERG"},{"contents":"","link":"https://p2pb2b.io/trade/ERG_BTC","permalink":"https://ergoplatform.org/en/news/2019_09_14/","subtitle":"We're happy to announce that ERGO ($ERG) is listed on P2PB2B Exchange","title":"ERGO ($ERG) is listed on P2PB2B Exchange"},{"contents":"What is Crowdfunding? Crowdfunding is a way of raising capital through the collective efforts of individuals. The campaigns are mostly started via the world wide web and allow projects and businesses to be funded by raising small amounts of money from a large number of people. One of the best known examples for successful crowdfunding startups is Oculus Rift, a virtual reality headset. The company Oculus VR initiated its campaign in 2012 and was only two years later acquired by Facebook for $2 billion total. Besides the usual startups, there are also a lot of blockchain projects which went the way of crowdfunding, for example, Ethereum, Tron and EOS. Today, numerous platforms exist that allow you to publish your campaign. Some of the bigger ones are Indiegogo, Kickstarter, and Gofundme, only to name a few. Crowdfunding has a lot of benefits: a wide reach, efficiency, and marketing aspects being the most convincing\u0026hellip; But for now, let\u0026rsquo;s get onto what\u0026rsquo;s really important!\nIntroducing Crowdfunding on Ergo A few days ago, on August 28th, core developer Kushti stated on the (Ergo forum)[www.ergoforum.org] that he managed to successfully write and implement code that allows users to start a crowdfunding campaign on top of the Ergo blockchain (as mentioned in the whitepaper page 6. This code even works with the current wallet API. Here is a quick guide on how to set up the wallet. In this article, you will learn how to do exactly that: crowdfunding on top of Ergo! It also takes you through the proposal of the first campaign ever, which is to fund the post-EIP1 crowdfunding script development. If you want to go into all the details, please read the following section, “The Script”. Otherwise, you can simply skip to reading the “How To Donate”, \u0026ldquo;How To Collect Donations\u0026rdquo;, and “Crowdfunding Project Proposal” sections below that.\nThe Script The simplest crowdfunding script, according to the ErgoScript White Paper (page 6), is “a script for the following crowdfunding situation: a project backer (with key backerPubKey) wishes to give money to a project (with key projectPubKey), but only if the project raises enough money (at least minToRaise) from other sources by a deadline (expressed in terms of HEIGHT). To give money to the project, the backer will create an output box protected by the following script. The script contains two conditions: one for the case the deadline has passed (enabling the backer to get the money back) and one for the case it succeeded (enabling the project to spend the money if the amount is at least minToRaise before the deadline).\nIn order to ensure enough money has been raised, the script will search the output collection for a box with a sufficient value going to the projectPubKey. To check where the value of the output box is going, the script will read the script protecting the output box and compare it to the script corresponding to proveDlog(projectPubKey); this script can be obtained byprojectPubKey.propBytes.\nAs currently the API does not support embedding of custom environment variables (only predefined ones like HEIGHT), the only way to compile the script is to replace such variables in the script from the white-paper with concrete values. For example, consider that a crowdfunding campaign is successful if it is raising 500 Ergs before block number 50,000. For backerPubKey and projectPubKey we can use PK() function which accepts only P2PK serialized keys at the moment. Then the modified script from the WhitePaper becomes the following:\n{ val backerPubKey = PK(\u0026#34;9h7DHKSDgE4uvP8313GVGdsEg3AvdAWSSTG7XZsLwBfeth4aePG\u0026#34;) val projectPubKey = PK(\u0026#34;9gBSqNT9LH9WjvWbyqEvFirMbYp4nfGHnoWdceKGu45AKiya3Fq\u0026#34;) val deadline = 50000 val minToRaise = 500L * 1000000000 val fundraisingFailure = HEIGHT \u0026gt;= deadline \u0026amp;\u0026amp; backerPubKey val enoughRaised = {(outBox: Box) =\u0026gt;outBox.value \u0026gt;= minToRaise \u0026amp;\u0026amp; outBox.propositionBytes == projectPubKey.propBytes } val fundraisingSuccess = HEIGHT \u0026lt; deadline \u0026amp;\u0026amp; projectPubKey \u0026amp;\u0026amp; OUTPUTS.exists(enoughRaised) fundraisingFailure || fundraisingSuccess } How to Donate First of all, JSON is not supporting multi-line strings, so you need to replace line breaks with \\n. Also, quotes are to be escaped, so use \u0026quot; instead of \u0026ldquo;. The resulting JSON will be sent to /script/p2sAddress. To donate to a project, first get your address from /wallet/addresses, take e.g. the first of them. Put the address into the backerPubKey, so a request to /script/p2sAddress will look like the following after this step:\n{ \u0026#34;source\u0026#34;: \u0026#34;{ val backerPubKey = PK(\\\u0026#34;9...\\\u0026#34;) val projectPubKey = PK(\\\u0026#34;9gBSqNT9LH9WjvWbyqEvFirMbYp4nfGHnoWdceKGu45AKiya3Fq\\\u0026#34;) val deadline = 50000 val minToRaise = 500L * 1000000000 val fundraisingFailure = HEIGHT \u0026gt;= deadline \u0026amp;\u0026amp; backerPubKey val enoughRaised = { (outBox: Box) =\u0026gt; outBox.value \u0026gt;= minToRaise \u0026amp;\u0026amp; outBox.propositionBytes == projectPubKey.propBytes } val fundraisingSuccess = HEIGHT \u0026lt; deadline \u0026amp;\u0026amp; projectPubKey \u0026amp;\u0026amp; OUTPUTS.exists(enoughRaised) fundraisingFailure || fundraisingSuccess }\u0026#34; } with your address instead of “9…”.\nSend the string to /script/p2sAddress to get a response like:\n{ \u0026#34;address\u0026#34;: \u0026#34;GB3kh2izpWKvyZfMboQwsEscjPaZcz9WrzGqZB4ZrkzRreiFMV6HZYWXGMK3rqCjDCoPgWGNzfnYSUhivW4a1VRYPE7uZXwKnBcqWcRkiuTx6QW55EcPcWeELUsumwdtKoFtWY583nWnKZff\u0026#34; } Copy address string (GB3… in our example) and send the money to it via /wallet/payment/send . A request to the API method to send 10 Ergs (10 Billion nanoErgs) will be like following:\n[ { \u0026#34;address\u0026#34;: \u0026#34;GB3kh2izpWKvyZfMboQwsEscjPaZcz9WrzGqZB4ZrkzRreiFMV6HZYWXGMK3rqCjDCoPgWGNzfnYSUhivW4a1VRYPE7uZXwKnBcqWcRkiuTx6QW55EcPcWeELUsumwdtKoFtWY583nWnKZff\u0026#34;, \u0026#34;value\u0026#34;: 10000000000 } ] That’s all!\nNow the wallet will automatically find the box on the blockchain, as it contains the public key which belongs to the wallet in the refund condition. The wallet then periodically checks whether the box is spendable by constructing a simplest transaction with the box as an input and just one output (to the same address). After refund height (50,000 in our example) the wallet will be able to spend the box and so the box value will be added to /wallet/balances. Please note that this will not be the case after EIP-1 3 implementation as the wallet will use narrow recognition patterns by then.\nHow to Collect Donations The wallet which is associated with the project public key will find incoming boxes on the blockchain. However, it will fail to make sure that boxes are spendable, as the wallet currently is using a simplest transaction for that, and the script is failing for such a spending transaction. Before /wallet/boxes/uncertain method being implemented, the only way for a project to find incoming boxes. Then /wallet/transaction/send with manually provided (in “inputsRaw”) serialized boxes (use /utxo/byIdBinary to get the serialized box by its identifier).\nKushti did that by himself and got the following transaction.\nPlease note that EIP-1 will break this workflow as well.\nKushti proposes to raise 500 Ergs before block 50,000 to develop command-line scripts (in Python) for organizing and participating in crowdfunding campaigns after EIP-1 implementation. Command-line scripts are more suitable than doing requests manually and also could be used for building graphic interfaces on top of them.\nThe treasury did provide half of the funds, so others need to contribute the missing 250 Erg collectively. In case of a campaign failure refunds will be given automatically. As collecting pledges is not trivial at the moment, Kushti will lead the project role, so please use the following key, which is controlled by him:\n9gBSqNT9LH9WjvWbyqEvFirMbYp4nfGHnoWdceKGu45AKiya3Fq\nIn order to donate any amount of money, please follow the “How To Donate” section above with replacing backerPubKey with your public key, and pledge amount with a proper value (please note that it is in nanoErgs, 1 Erg = 1.000.000.000 nanoErgs).\nAs always, if you have further questions, suggestions or want to participate in the movement, please join our social media channels or forum.\nt.me/ergoplatform | t.me/ergo_mining | www.ergoforum.org\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_09_06_crowdfund/","subtitle":null,"title":"Ergo and crowdfunding"},{"contents":"","link":"https://twitter.com/Hotbit_news/status/1169883351093694464","permalink":"https://ergoplatform.org/en/news/2019_09_06/","subtitle":"We're happy to announce that ERGO ($ERG) will be listed on Hotbit exchange","title":"Ergo will be listed on Hotbit exchange"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.1.0","permalink":"https://ergoplatform.org/en/news/2019_08_27/","subtitle":"This release is introducing an improved database layer - faster bootstrap, reduced storage size and memory footprint. Full resync is needed","title":"Ergo Mainnet 3.1.0 released"},{"contents":"","link":"https://twitter.com/VGATE2/status/1163718592505925632","permalink":"https://ergoplatform.org/en/news/2019_08_20_1/","subtitle":"We're happy to announce that ERGO ($ERG) is listed on Vgate Exchange","title":"ERGO ($ERG) is listed on Vgate Exchange"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.7","permalink":"https://ergoplatform.org/en/news/2019_08_20/","subtitle":"This release includes fixes and introduces new API methods. Details in the description of the release","title":"Ergo Mainnet 3.0.7 released"},{"contents":"This tutorial will provide you with the information needed to get your AMD cards mining ERGO on either Windows or Linux.\nDeveloper MH Samadani published his AMD Miner just three days after the official launch and is continuously updating it since. To keep track of his updates you can join the Ergo Mining Telegram Channel and search for #amdminer. You can download and look into the miner here.\nThe code is based on OpenCL and completely open source. If you are using Nvidia cards, you can find the CUDA miner here.\nPlease, be aware that it is unsafe to use any closed source miners. The mining specifics of ERGO require you to disclose your secret key to the miner so make sure who to trust before exposing any vulnerable data!\nThese are the reported Hashrates for AMD cards:\n rx570-8g: 22-24Mh/s rx580-8g: 23-25Mh/s rx Vega56: 24-26Mh/s  Before going any further I want to give credits to MH Samadani and his head developer Amin Moradi for providing the miner and the base for this tutorial.\nNow let\u0026rsquo;s get started!\nConfiguration Copy these files into the same folder as your executable file and add your seed string and your node\u0026rsquo;s address to config.json. In addition to that set keepPrehash: true in the same file.\n Miningkernel.cl Prehashkernel.cl Ocldecs.h Ocldefs.h Libcurl.dll( in windows) Config.json  Requirements for Linux 1. Install the AMDGPU-PRO driver by downloading the AMDGPU-PRO package for your specific Linux distribution from amd.com. Unpack this file and in a terminal window run: $ amdgpu-pro-install --opencl=legacy,pal --headless 2. Install OpenCL headers $ apt install libcurl4-openssl-dev 3. Install OpenSSL 1.02 $ apt install libssl-dev Requirements for Windows 1. You need at least one AMD GPU with its driver installed amd.com 2. Download and Install AMD APK from mhssadini\u0026rsquo;s github here 3. If not already available, build libcurl from sources with Visual Studio toolchain instruction 4. Download and install OpenSSL 1.0.2 here Building in Linux 1. Edit the ErgoOpenCL.cpp in the master directory and comment #define TEST or uncomment define TEST to either build the miner or tester. 2. Change the directory to ergoAMDminer/Ubuntu and run make. ./makefile 3. If everything was done correctly, you should now find ErgoOpenCL in ergoAMDminer/Ubuntu/. Go ahead and run it to start mining. ./ErgoOpenCL Pre-Built Version for Windows Download the github, head over to the win64 folder and execute either ErgoOpenCL_miner.exe or ErgoOpenCL_tester.exe. If everything was set up correctly (see requirements and configuration) it should start mining.\nBuilding in Windows Open ErgoOpenCL.sln Visual Studio. Add the OpenCL, LibCurl and OpenSSL libraries.\nInclude directories:\nAnd include additional directories:\nAdditional library directories:\nAdditional dependencies:\nNow, in the ErgoOpenCL.cpp file, comment #define TEST to build the miner or uncomment define TEST to build the tester.\nIf you have any additional questions, suggestions, want to send flowers to @mhs_sam to or simply feel like joining the community, head over to our telegram channels - Ergo Mining or Ergo Platform - and say hello.\nHappy mining!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_08_07_amd/","subtitle":null,"title":"Mining ERGO on AMD Cards"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.6","permalink":"https://ergoplatform.org/en/news/2019_08_06/","subtitle":"This release is introducing a filter for cumulative transaction input scripts complexity for the miners. Wallet, API methods and Swagger UI updated","title":"Ergo Mainnet 3.0.6 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.5","permalink":"https://ergoplatform.org/en/news/2019_07_30/","subtitle":"This release is introducing an improved box selector aka transaction assembler and memory footprint reduction thanks to optimized (de)serialization 🔥","title":"Ergo Mainnet 3.0.5 released"},{"contents":"In today\u0026rsquo;s article, we will have a closer look into the Ergo address formatting. In addition to that we are going to explain how they work specifically as well as what makes them preferable to other types of blockchain addresses.\nLet\u0026rsquo;s start at the very beginning.\nThe moment you install any cryptocurrency wallet you automatically create an address with it. Very loosely speaking you can compare a wallet to a traditional bank account and an address to the matching account number. It is precisely one of these alphanumeric addresses that\u0026rsquo;s needed to either send money from person A to person B, receive money or withdraw your mining rewards. If you want to get started using the Ergo wallet and dive deeper into its functions go check out the following link.\nNow, what exactly are addresses?\nAddresses are short strings that correspond to certain scripts and are used to protect a box (this post that core developer kushti published on our forum explains very well what a \u0026ldquo;box\u0026rdquo; is). Unlike a (hex-encoded) binary representation of a script, an Ergo address is using a Base58-encoding and therefore has some very useful characteristics to it which the binary representation do not offer:\n The integrity of an address can easily be checked via an integrated checksum (which is a \u0026ldquo;small-sized datum derived from a block of digital data for the purpose of detecting errors that may have been introduced during its transmission or storage\u0026rdquo;, according to Wikipedia). A prefix of the address is showing you the network and address type. In particular, the network prefix prevents you from mistakenly sending mainnet tokens to the testnet address. The address is using an encoding (namely, Base58 as mentioned) which is avoiding similarly looking characters and is friendly to double-clicking and also line-breaking in emails. An address is encoding network type, address type, checksum, and enough information to correspond with particular scripts.  Let\u0026rsquo;s look at the prefix byte which contains information about the network and address types:\nPossible network types are:\n Mainnet - 0x00 Testnet - 0x10  Address types are (semantics described below):\n 0x01 - Pay-to-PublicKey(P2PK) address 0x02 - Pay-to-Script-Hash(P2SH) 0x03 - Pay-to-Script(P2S)  For an address type, we form content bytes as follows:\n P2PK - serialized (compressed) public key P2SH - first 192 bits of the Blake2b256 hash of serialized script bytes P2S - serialized script (this is where mining rewards go!)  For example, sending 10 Ergs to a P2PK address usually means that a corresponding transaction will contain a box in which 10 Ergs are locked by a public key encoded in the P2PK address. Similarly, in case of a P2S address the box will be locked by a script encoded in the address. In the most complicated case of a P2SH script, the box will be protected by a special predefined script which is taking first 192 bits of Blake2b256 hash value for a script which should be shown by an input spending the box.\nHere is an example of how particular addresses are going to look on the testnet:\n 3 - P2PK (3WvsT2Gm4EpsM9Pg18PdY6XyhNNMqXDsvJTbbf6ihLvAmSb7u5RN) ? - P2SH (rbcrmKEYduUvADj9Ts3dSVSG27h54pgrq5fPuwB) ? - P2S (Ms7smJwLGbUAjuWQ)  And here is how they are looking on our mainnet:\n 9 - P2PK (9fRAWhdxEsTcdb8PhGNrZfwqa65zfkuYHAMmkQLcic1gdLSV5vA) ? - P2SH (8UApt8czfFVuTgQmMwtsRBZ4nfWquNiSwCWUjMg) ? - P2S (4MQyML64GnzMxZgm, BxKBaHkvrTvLZrDcZjcsxsF7aSsrN73ijeFZXtbj4CXZHHcvBtqSxQ)  In short summary:\n Prefix byte = network type + address type (for example, P2S script on the testnet starts with 0x13 before Base58) checksum = leftmost_4_bytes (blake2b256 (prefix byte || content bytes)) address = prefix byte || content bytes || checksum  If any of this sparked your interest, you are very welcome to join our community and ask further questions on our telegram channel and/or forum. See you there!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_07_24_ergo_address/","subtitle":null,"title":"Ergo Addresses"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.4","permalink":"https://ergoplatform.org/en/news/2019_07_19/","subtitle":"This release is introducing a timestamp bugfix in block candidate generation algorithm. Highly recommended for miners","title":"Ergo Mainnet 3.0.4 released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.3","permalink":"https://ergoplatform.org/en/news/2019_07_18/","subtitle":"This release includes fixes and introduces new API methods. Details in the description of the release","title":"Ergo Mainnet 3.0.3 released"},{"contents":"","link":"https://twitter.com/Magnum_Wallet/status/1148948899618598915","permalink":"https://ergoplatform.org/en/news/2019_07_11/","subtitle":"We're happy to announce that ERGO ($ERG) is integrated with Magnum Wallet","title":"ERG is available in Magnum Wallet"},{"contents":"Firstly, we would like to thank many enthusiasts, developers, miners, other folks, and our families for measureless help with Ergo development and launching. The launch finishes a few years period of initial research and development by the Team, and also starts a new epoch, where the core technology is mostly set in stone and gradual improvements in protocol implementations and infrastructure projects become the main focus.\nThe current core Ergo Core Team remains fully committed to the project (at least, while the Foundation Treasury enables that). With that in mind, let me give the light on current status of the project and future plans.\nCurrent status In the first place, let me remind some keypoints of Ergo:\n  It is still a conservative Proof-of-Work blockchain with a strictly limited coin supply, a Bitcoin-like transactional model, a cautiously chosen target delay between blocks, and so on. In that sense Ergo is similar to Bitcoin, and time has proven that this is the best choice for those who value decentralization and sound money.\n  Despite Bitcoin-like transactional model (with one-time unspent transaction outputs), Ergo supports enhanced contractual money possibilities without sacrificing security. We already have examples for crowdfunding, ICO, cold wallet contract, and so on. Also, Ergo provides best access to generic discrete log based zero-knowledge proofs, and thus it is better (in some cases, the only choice) for protocols to be built on top of it. For example, there is 2-out-of-3 multi-signature already done in the network, and this signature preserves zero-knowledge (so no third-party observer can ascertain which two parties actually signed the transaction input). In the same way, ring signatures (1-out-of-N signatures preserving zero-knowledge) are coming for free. Also please take a look at Ergomix, a non-interactive mixing scheme, and maybe the first practical non-interactive mixing proposal.\n  Ergo has native support for custom tokens. Also it has support for authenticated data structures which can be trusted (modification of a dataset happening outside the blockchain by a trusted party) or trustless (modifications are happening on-chain as defined by a contract, but only very compact dataset digest is stored in UTXO set anyway).\n  It has pool-resistant and (somewhat) ASIC-resistant Autolykos Proof-of-Work scheme, which is targeting top-level GPUs, with best performance being on GPUs with 8gb+ RAM.\n  For better decentralization in regards with possible full-nodes count decline with time, Ergo for first time supports stateless fully secure clients. Efficient SPV clients support is also done, but via NIPoPoW technology, not the FlyClient used in Grin.\n  No need for hot debates on changing block size and many other parameters. Just using block size as an example, a miner can simply start voting at the beginning of an epoch (consisting of 1,024 blocks), and if 50+% of miners within the epoch support a change (1% block size increase or decrease in block size), it will happen. For many aspects of the protocol, soft-fork updates are possible, if 90+% of mining power votes are for a soft fork. Here Ergo is finishing what Bitcoin, with its soft-forkability, and Ethereum, with its dynamic gas limit per block readjustment, have started.\n  All of these features are probably not very visible now, just one week after launch, but they will define unique Ergo characteristics in the long-term. Please note, for success in the long-term, you need to go from first principles. Ergo is doing that, and not in the tech only: please note that Ergo has well-defined social contract described in Section 2 of the whitepaper.\nFurther Ergo Core Team Duties While the reference node implementation is working more or less well, its interface could be confusing even for skilled users, and there is no infrastructure, such as wallets, frameworks to develop applications etc. Thus the core team will spend coming months on delivering needed frameworks and API improvements and supporting wallets and exchanges, some of which are already in-process. Also note that many components of the node are not efficient now, so performance of the node will be significantly increased in the observable future. At the same time, external teams continue to do security audits. The most critical parts of protocol design and reference implementation have already been audited, sometimes by more than one party.\nHardforking policy Ergo is trying to avoid hard-forks. Emission, proof-of-work, basics of transactional model and other core things should not be changed at all as any change about core parts of design means another chain. However, developers may propose hard-forks within first 12 months if (and only if):\n a hard-fork is about security fixes only. The only exception is about making cost of particular instructions adjustable via miners voting, which was planned but not delivered in the current mainnet. a hard-fork is supported by 90+% of miners. a hard-fork is not breaking old contracts, freezing or moving any funds.  Community Matters! Development should become more transparent and open to external contributors, with gradual switching to EPIPs (EPIP stands for Ergo Platform Improvement Proposal), formal documents appearing and discussed before implementation like Bitcoin and Ethereum are already using BIPs and EIPs, respectively.\nErgo is also in need of an ecosystem of frameworks and applications around it. A part of the treasury will be spent on grants for ecosystem developers. Details of the grant program will be announced later, however, you may contact the Ergo Core Team right now with any proposals. Also, the team would be happy to help with advice, needed API improvements, and so on. From an investor perspective, investing in projects on top of Ergo may be more valuable in comparison with other blockchains, considering the commitments to protocol stability made by the team.\nAlso, please spread the word about Ergo! We are a nascent blockchain getting it\u0026rsquo;s feet off the ground and are looking for contributors who are interested in writing documentation, articles, and other material.\nErgo and Ergo Data Initially, it was announced (couple of years ago) that two chains will be launched, Ergo and Ergo Data. Technology would be the same (or very similar), but parameters are different. The main idea behind Ergo Data is to serve needs of data-intensive applications, such as land registries, certificate directories etc.\nCurrently, Ergo Data plans are unclear. The network will be launched only in case users will show demand for it. Also, Ergo Data would most likely be a sidechain of Ergo. Also, it will not be launched soon in any case, and only after Ergo having established a solid infrastructure base. In case of Ergo Data chain being launched, EFYT holders at the moment of Ergo launch will get ErgoData tokens. A snapshot of EFYT holders at the moment of launch has already been done.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_07_09_after_launch/","subtitle":null,"title":"After-Launch Thoughts and Ergo Roadmap"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_07_09_after_launch/","permalink":"https://ergoplatform.org/en/news/2019_07_09/","subtitle":"Big thank you to all enthusiasts, developers, miners, other folks, and our families for measureless help with Ergo development and launching.","title":"After-Launch Thoughts and Ergo Roadmap"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.2","permalink":"https://ergoplatform.org/en/news/2019_07_04/","subtitle":"This release includes API improvements.","title":"Ergo Mainnet 3.0.2 released"},{"contents":"","link":"https://tidex.com/exchange/erg/btc","permalink":"https://ergoplatform.org/en/news/2019_07_02/","subtitle":"We're happy to announce that ERGO ($ERG) is listed on Tidex Exchange","title":"ERGO ($ERG) is listed on Tidex Exchange"},{"contents":"Spending mining reward This text is to help miners to withdraw funds mined.\nA lot of folks launched a node and also a miner, with pubkeyHex from the miner embedded in the node config. Now information on how to recognize the coins mined and withdraw them to another address.\nOn keys. A miner can see a lot of keys in different formats.\nFirst, mining software and also mining support in the node (namely, ergo.node.miningPubKeyHex setting in the config) are using a Base16-encoded \u0026ldquo;raw\u0026rdquo; public key, which is just an encoded serialized point on elliptic curve. This key is enough for a miner (which can avoid then supporting Base58, address forming etc).\nSecond, a node wallet shows Pay-To-Public-Key (P2PK) addresses, which are starting with \u0026ldquo;9\u0026rdquo;. P2PK adress contains not just elliptic curve point, but also network prefix and checksum, similarly to Bitcoin P2PK and P2PKH addresses.\nThird, there is minig/rewardAddress API method, which is intended for external tools generating block candidates. This API method shows something like 88dhgzEuTXaSfKEbxfa6vghvEGdBH39sn9h7As2Y2Z6SGd8bKXCXmRLY5JtU4g4RYBP4WcZWb3JwjXDK, which is a special script to pay a miner in encoded form.\nAnyway, if you put pubkeyHex from you miner into your node, everything is okay, just don\u0026rsquo;t worry about different keys seen.\nGetting you balance shown \u0026amp; withdrawals Probably you don\u0026rsquo;t see mined coins after wallet initialization, if its done on height after blocks mined. Please note, the node is not scanning blocks backwards, it is only scanning new blocks after the initialization. Thus in order to find mined coins, full blockchain rescan is needed atm (or, if you mine, launch another node on another machine, or on the same machine with different ports set in the config, namely, set new values to scorex.restApi.bindAddress and scorex.network.bindAddress fields; also please use version 3.0.1 as it is easier to configurate).\nIn order to spend rewards you need to follow the steps below: 1. Clear node state, if you\u0026rsquo;re going to stop working node. In order to clear the state of your node you need to stop the node and then remove all contents of .ergo directory (it could be hidden from you on Mac and Linux, try ls -a command in the directory you ran the node from).\n2. Restoring a local wallet from the seed-phrase used in the Autolykos miner Remember that mnemonic sentence you set in the config.json when configuring your Autolykos miner - now you need to restore build-in wallet from it. In order to restore your wallet start the node again and send a POST request to http://[your_node_ip]:9053/wallet/restore containing the application/json content-type body like:\n{ \u0026#34;pass\u0026#34;: \u0026#34;your_wallet_pass\u0026#34;, \u0026#34;mnemonic\u0026#34;: \u0026#34;mnemonic_sentense_from_your_miner\u0026#34;, \u0026#34;mnemonicPass\u0026#34;: \u0026#34;mnemonic_pass_if_set\u0026#34; } , where pass is a new unique pass to be used to encrypt wallet data on your local disk, and mnemonic is a mnemonic phrase you copied from your Autolykos miner config (config.json). Please especially pay your attention to mnemonicPass field - this is a password of your mnemonic phrase, it\u0026rsquo;s optional and you could have configured it when generating your mnemonic. So add this field to the request only in case your mnemonic is really protected with a pass, remove this field otherwise.\nDon\u0026rsquo;t forget to authorize your request setting correct api_key HTTP header corresponding to the apiKeyHash your configured in the node config file.\nATTENTION: In order to let the wallet scan all the blocks from the genesis you need to restore the wallet before your node would have started downloading full blocks (Check fullHeight in /info API method response - while it is null your node haven\u0026rsquo;t start downloading full blocks)\n3. Check your balance When your node got synced with the network check /wallet/balances API method. The response should look like:\n{ \u0026#34;height\u0026#34;: 3560, \u0026#34;balance\u0026#34;: 67500000000, \u0026#34;assets\u0026#34;: {} } Pay attention to the height field first - it should equal fullHeight displaying by /info API route. balance is a confirmed balance found by your wallet.\n4. Make a transaction spending your reward In order to withdraw a reward from your wallet, create a new payment transaction using /wallet/payment/send API route. In order to perform this operation send a POST request containing an application/json content-type body like:\n{ \u0026#34;address\u0026#34;: \u0026#34;your_address\u0026#34;, \u0026#34;value\u0026#34;: 10000000 } , where address is the address you want to move your funds to and value is how many nanoERGs you wish to move.\nWhen the request is sent the node would return transation id in response. You can use explorer to check when your transaction gets to the block.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_07_03_mining_withdrawal/","subtitle":null,"title":"Ergo Withdrawal"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_07_03_mining_withdrawal/","permalink":"https://ergoplatform.org/en/news/2019_07_03/","subtitle":"This guide will help miners to withdraw mined funds.","title":"Ergo Withdrawal Instructions"},{"contents":"","link":"https://explorer.ergoplatform.com","permalink":"https://ergoplatform.org/en/news/2019_07_01_1/","subtitle":"Ergo mainnet is launced. Check here - https://explorer.ergoplatform.com","title":"Ergo mainnet is launched"},{"contents":"","link":"https://explorer.ergoplatform.com","permalink":"https://ergoplatform.org/en/news/2019_07_01/","subtitle":"The Ergo explorer provides detailed information about addresses, blocks and transactions on the Ergo network","title":"Ergo explorer released"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v3.0.1","permalink":"https://ergoplatform.org/en/news/2019_07_01_2/","subtitle":"This release includes hard-coded proof-of-no-premine and genesis state root hash. Thanks to all who made it for mainnet launch","title":"Ergo Mainnet 3.0.1 released"},{"contents":"","link":"https://twitter.com/p2pb2b/status/1144642629361160194","permalink":"https://ergoplatform.org/en/news/2019_06_28_2/","subtitle":"Ergo native token (ERG) will be listed soon after the mainnet launch.","title":"Ergo will be listed on P2PB2B exchange"},{"contents":"Joining the Ergo main network at the very beginning In order to join the network at its very beginning and compete to mine the genesis block, you need to follow the steps described below. If you\u0026rsquo;re not going to participate in Ergo mining and just want to set up a full node, you need to follow steps 3 and 5.\nPreparations 1. Build mining software Check the guide first.\nBuild a miner according to its readme instruction (for Ubuntu) or using Windows manual.\nTry to run it like ./auto.out config.json with test config:\n{ \u0026#34;mnemonic\u0026#34;: \u0026#34;noise peasant subway frozen illegal pretty oak agent train valid wash title burst column yard decide move coin gas asset pretty hire happy fuel\u0026#34;, \u0026#34;node\u0026#34;: \u0026#34;http://159.203.36.162:9052\u0026#34;, \u0026#34;keepPrehash\u0026#34;: true } and see something like:\n2019-06-27 14:44:58,626 INFO [main thread] Using 1 GPU devices 2019-06-27 14:44:58,626 INFO [main thread] Using configuration file mine162.json 2019-06-27 14:44:58,628 INFO [main thread] Block getting URL: http://159.203.36.162:9052/mining/candidate 2019-06-27 14:44:58,628 INFO [main thread] Solution posting URL: http://159.203.36.162:9052/mining/solution 2019-06-27 14:44:58,629 INFO [main thread] Generated public key: pk = 0x03 F5214F2F6D87C714 4A2E12F8D4C4E110 1C59FF7D9AEABC11 77C4CB50FA8497E7 2019-06-27 14:44:58,714 INFO [main thread] Got new block in main thread, block data: { \u0026#34;MSG\u0026#34; : \u0026#34;3637B40440681781F92EDC92B33E623330F05705446168952CBD3720BA922442\u0026#34;, \u0026#34;B\u0026#34; : 3462030106355215694294694818737961234095984491840283822105474632310, \u0026#34;PK\u0026#34; : \u0026#34;03F5214F2F6D87C7144A2E12F8D4C4E1101C59FF7D9AEABC1177C4CB50FA8497E7\u0026#34; } 2019-06-27 14:44:58,956 INFO [GPU 0 miner] GPU 0 allocating memory 2019-06-27 14:44:58,964 INFO [GPU 0 miner] Preparing unfinalized hashes on GPU 0 2019-06-27 14:45:13,443 INFO [GPU 0 miner] GPU 0 read new block data 2019-06-27 14:48:02,298 INFO [main thread] Average hashrates: GPU0 24.8537 MH/s Total 24.8537 MH/s The above notifications show that your miner is built correctly.\n2. Generate mnemonic phrase for mining Run ./auto.out -G to generate a new mnemonic phrase if you don\u0026rsquo;t have one.\n$ ./auto.out -G 2019-06-28 12:08:32,915 INFO [main thread] !!!Generated new mnemonic, put it in your config.json file!!! job great stage urge elite purity surprise any cram matrix typical table panel honey curious enlist fault matrix !!!Generated new mnemonic, put it in your config.json file!!! 2019-06-28 12:08:32,918 INFO [main thread] Generated public key: pk = 0x03 61F8098779E5EC8C 2A851E3EF57C471E 9A6803F60666E93E EB0BDD67411439D0 In the example above your generated mnemonic phrase is job great stage urge elite purity surprise any cram matrix typical table panel honey curious enlist fault matrix while your public key is 0361F8098779E5EC8C2A851E3EF57C471E9A6803F60666E93EEB0BDD67411439D0. Save your mnemonic phrase (e.g. by writing down to a piece of paper) and keep it in secret at all times, anyone who have access to it will be able to steal your funds. Write down your public key, you will need it in the next steps.\n3. Configure and start your miner Create a settings.json config file with the following content (don\u0026rsquo;t forget to replace sections in \u0026lt;\u0026gt; braces):\n{ \u0026#34;mnemonic\u0026#34;: \u0026#34;\u0026lt;mnemonic generated at step 2\u0026gt;\u0026#34;, \u0026#34;node\u0026#34;: \u0026#34;http://\u0026lt;ip address of your node\u0026gt;:9053\u0026#34;, \u0026#34;keepPrehash\u0026#34;: true } and run a miner like ./auto.out settings.json. It should initialize and start requesting a node for the block candidate.\n2019-06-27 15:14:02,267 INFO [main thread] Using 1 GPU devices 2019-06-27 15:14:02,267 INFO [main thread] Using configuration file mainnet-conf.json 2019-06-27 15:14:02,269 INFO [main thread] Block getting URL: http://\u0026lt;ip address of your node\u0026gt;:9053/mining/candidate 2019-06-27 15:14:02,269 INFO [main thread] Solution posting URL: http://\u0026lt;ip address of your node\u0026gt;:9053/mining/solution 2019-06-27 15:14:02,269 INFO [main thread] Generated public key: pk = 0x02 F611D5F6AAB70C05 4A530C6420395B3C 4521642DC7125A93 49AAA2D9BB89D7AF 2019-06-28 12:21:36,035 ERROR [main thread] CURL: Couldn\u0026#39;t connect to server 2019-06-28 12:21:36,835 INFO [main thread] Waiting for block data to be published by node... 2019-06-28 12:21:36,876 ERROR [main thread] CURL: Couldn\u0026#39;t connect to server 2019-06-28 12:21:37,676 INFO [main thread] Waiting for block data to be published by node... 2019-06-28 12:21:37,718 ERROR [main thread] CURL: Couldn\u0026#39;t connect to server No more actions are required with the miner.\n4. Configure and run your full node Check guide first.\nCreate a settings.conf config file with the following content (don\u0026rsquo;t forget to replace sections in \u0026lt;\u0026gt; braces):\nergo { node { mining = true miningPubKeyHex = \u0026#34;\u0026lt;your public key from step 2\u0026gt;\u0026#34; } chain { initialDifficultyHex=\u0026#34;011765000000\u0026#34; } } scorex { network { nodeName = \u0026#34;\u0026lt;some name to identify your node\u0026gt;\u0026#34; } restApi { # you may wish to configure an apiKeyHash to use your wallet. Check https://ergoplatform.org/en/blog/2019_06_04_wallet-documentation/ for wallet documentation.  apiKeyHash = \u0026#34;1111\u0026#34; } } Download the latest mainnet release from here and run it like nohup java -jar -Xmx3G -Dlogback.stdout.level=DEBUG ergo-3.0.1.jar --mainnet -c settings.conf and you if you see similar to the below:\n17:02:11.449 INFO [main] o.e.settings.ErgoSettings$ - Running in mainnet network mode 17:02:12.262 INFO [main] org.ergoplatform.ErgoApp - Entering coordinated network bootstrap procedure .. 17:02:12.933 INFO [main] o.e.BootstrapController - Wrong response format, retrying in 10s 17:02:22.933 INFO [main] o.e.BootstrapController - Wrong response format, retrying in 10s You node is already configured correctly and no more action is required with it.\n5. Wait for the mainnet launch After these steps you\u0026rsquo;re ready to participate in Ergo mining and should just wait. Your miner is waiting for block candidate from your node, while your node is waiting for the proof-of-no-premine that will be broadcasted by the Ergo Development Team according to the main network launch schedule. The proof‐of‐no‐premine will contain headlines from the media (The Guardian, Vedomosti, Xinhua), as well as the latest block identifiers from Bitcoin and Ethereum. When the launch time comes, we\u0026rsquo;ll distribute the no-premine proof and the mining will start.\nTo ensure that your node is mining, you may check your node log. It should stop to write logs from BootstrapController and write Boot settings received. Starting the node, so the logs file will looks like:\n17:21:39.417 INFO [main] o.e.BootstrapController - Wrong response format, retrying in 10s 17:21:49.437 INFO [main] o.e.BootstrapController - Wrong response format, retrying in 10s 17:21:59.500 INFO [main] org.ergoplatform.ErgoApp - Boot settings received. Starting the node .. 17:21:59.554 INFO [ctor.default-dispatcher-3] s.c.n.NetworkController - Declared address: None 17:21:59.558 INFO [ctor.default-dispatcher-3] s.c.n.NetworkController - Registering handlers for List((1,GetPeers message), (2,Peers message)) 17:21:59.559 INFO [ctor.default-dispatcher-3] s.c.n.NetworkController - Successfully bound to the port 9030 17:21:59.565 INFO [ctor.default-dispatcher-4] o.e.n.state.ErgoState$ - Generating genesis UTXO state 17:21:59.568 INFO [ctor.default-dispatcher-2] o.e.local.ErgoMiner - Trying to use key from wallet for mining 17:21:59.583 INFO [ctor.default-dispatcher-3] s.c.u.NetworkTimeProvider - New offset adjusted: 2 17:21:59.585 WARN [ctor.default-dispatcher-3] o.e.n.ErgoReadersHolder - Got GetReaders request in state (None,None,None,None) 17:21:59.598 INFO [ctor.default-dispatcher-2] s.c.n.NetworkController - Registering handlers for List((55,Inv), (22,RequestModifier), (33,Modifier), (65,Sync)) 17:21:59.729 INFO [ctor.default-dispatcher-4] s.c.a.a.b.VersionedIODBAVLStorage - Update storage to version ByteArrayWrapper[6813BCA7232C6E156FB6229ECF165D157640A8576A5B320506E4C1B66011253402]: 14 elements to insert, 1 elements to remove 17:21:59.846 INFO [ctor.default-dispatcher-4] o.e.n.state.ErgoState$ - Genesis UTXO state generated with hex digest 6813bca7232c6e156fb6229ecf165d157640a8576a5b320506e4c1b66011253402 At the same time your miner should write you something like:\n2019-06-28 12:21:36,035 ERROR [main thread] CURL: Couldn\u0026#39;t connect to server 2019-06-28 12:21:36,835 INFO [main thread] Waiting for block data to be published by node... 2019-06-28 12:21:36,876 ERROR [main thread] CURL: Couldn\u0026#39;t connect to server 2019-06-28 12:21:37,676 INFO [main thread] Waiting for block data to be published by node... 2019-06-27 15:26:20,328 INFO [main thread] Got new block in main thread, block data: { \u0026#34;MSG\u0026#34; : \u0026#34;0777078E22BB64C771DE8A8D3B1E454847A91024D98AB86949091C8019FA7453\u0026#34;, \u0026#34;B\u0026#34; : 964934076977634961863091541739065898773646368992290869855043026179318012, \u0026#34;PK\u0026#34; : \u0026#34;02F611D5F6AAB70C054A530C6420395B3C4521642DC7125A9349AAA2D9BB89D7AF\u0026#34; } 2019-06-27 14:44:58,956 INFO [GPU 0 miner] GPU 0 allocating memory 2019-06-27 14:44:58,964 INFO [GPU 0 miner] Preparing unfinalized hashes on GPU 0 2019-06-27 14:45:13,443 INFO [GPU 0 miner] GPU 0 read new block data 2019-06-27 14:48:02,298 INFO [main thread] Average hashrates: GPU0 24.8537 MH/s Total 24.8537 MH/s 2019-06-27 15:27:11,033 INFO [GPU 0 miner] GPU 0 found and trying to POST a solution: ","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_06_28_mainnet-bootstrap/","subtitle":null,"title":"Joining the Ergo main network at the very beginning"},{"contents":"","link":"https://ergoplatform.org/en/blog/2019_06_28_mainnet-bootstrap/","permalink":"https://ergoplatform.org/en/news/2019_06_28_3/","subtitle":"In order to join the network at its very beginning and compete to mine the genesis block, you need to follow the steps included in this guide.","title":"Joining the Ergo main network at the very beginning"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.2.0","permalink":"https://ergoplatform.org/en/news/2019-06-27/","subtitle":"Sigma-State language updated, new API methods","title":"Testnet 2.2.0 released"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1143824003632685056","permalink":"https://ergoplatform.org/en/news/2019-06_26/","subtitle":"Instructions on how to join mainnet right after launch is coming shortly.","title":"Mainnet launch - Monday, July 1, 10:00 AM UTC"},{"contents":"","link":"https://t.me/ergo_mining","permalink":"https://ergoplatform.org/en/news/2019-06-24/","subtitle":"Both CPU and GPU miners are welcome to join","title":"Ergo Mining Telegram group is now open"},{"contents":"","link":"https://twitter.com/Tidex_Exchange/status/1139282057643905024","permalink":"https://ergoplatform.org/en/news/2019_06_1/","subtitle":"Ergo native token (ERG) will be listed right after the mainnet launch.","title":"EFYT (Ergo First Year Token) is listed on Tidex Exchange"},{"contents":"","link":"https://twitter.com/ergoplatformorg/status/1139164264168591362","permalink":"https://ergoplatform.org/en/news/2019_06_13_2/","subtitle":"Due to delays with exchange listings and new issues found we've decided to postpone the mainnet launch till June 28. Thank you for your patience and continued support!","title":"Mainnet launch postponed"},{"contents":"","link":"https://badcryptopodcast.com/2019/06/13/crypto-for-good-276/","permalink":"https://ergoplatform.org/en/news/2019_06_13/","subtitle":"Episode 276: Crypto for Good with The Giving Block","title":"The Bad Crypto Podcast featuring Ergo"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.1.2","permalink":"https://ergoplatform.org/en/news/2019_06_12/","subtitle":"Support of coordinated network bootstrapping. Fixes of multiple genesis processing and network byte in addresses.","title":"Testnet 2.1.2 released"},{"contents":"","link":"https://www.youtube.com/watch?v=bsqcyLT8ddY","permalink":"https://ergoplatform.org/en/news/2019_06_11/","subtitle":"Bitcoin | The Next Evolution of Money by DataDash","title":"Interview with Ergo, a platform who's building the framework for contractual money"},{"contents":"","link":"https://twitter.com/SwftCoin/status/1136293239219113986","permalink":"https://ergoplatform.org/en/news/2019_06_05/","subtitle":"ERG will be listed soon after mainnet launch and will be available for payment and swap with over 170 crypto!","title":"Agreement with SWFT Blockchain"},{"contents":"","link":"https://bitcointalk.org/index.php?topic=5150971","permalink":"https://ergoplatform.org/en/news/2019-06-05-1/","subtitle":"Following up the PRE-ANN thread on Bitcointalk which was started almost two years ago, the Ergo team would like to announce the upcoming launch of Ergo, a resilient platform for contractual money.","title":"New Bitcointalk thread"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.1.0","permalink":"https://ergoplatform.org/en/news/2019-06-05-2/","subtitle":"Voting for soft-forkability feature implemented, Sigma-State language updated. More details in the description of the release.","title":"Testnet 2.1.0 released"},{"contents":"An Ergo node provides a built-in wallet for storing private keys and signing transactions. The following describes how to set up and protect your Ergo wallet.\nThe wallet uses the BIP39 standard to generate a seed from a mnemonic sentence, which is then used to generate the private keys according to the BIP32 standard  (Hierarchical Deterministic Wallets). You can use your own mnemonic sentence composed of the words from one of these wordists if you want to. The allowed sentence lengths are 12, 15, 18, 21, 24 representing respectively, 128, 160, 192, 224, 256 bits of security. In order to initialize a wallet with such a mnemonic, you should use the wallet/restore API endpoint. However, it is far more secure to use the mneomnic generated by the wallet.\nAt this stage, all interactions with the wallet can only be done through the node\u0026rsquo;s REST API. Please ensure that you have set an API key in your node before performing the next steps.\nConfiguring the wallet The wallet is configured through the node configuration file. Below are the configuration parameters worth paying attention to when configuring wallet for the first time:\n ergo.wallet.seedStrengthBits - Bit-length of a seed in case it will be generated by the node. Note: the stronger the seed the longer the mnemonic sentence length is. Options: 128, 160, 192, 224, 256 ergo.wallet.secretStorage.secretDir - Directory where secret will be stored in encrypted form ergo.wallet.mnemonicPhraseLanguage - Language to be used in mnemonic sentence. Options: \u0026quot;chinese_simplified\u0026quot;, \u0026quot;chinese_traditional\u0026quot;, \u0026quot;english\u0026quot;, \u0026quot;french\u0026quot;, \u0026quot;italian\u0026quot;, \u0026quot;japanese\u0026quot;, \u0026quot;korean\u0026quot;, \u0026quot;spanish\u0026quot;  Using the wallet for the first time The wallet needs to be initialized via the REST API when running the node for the first time. Two options are available here:\n Initialize it from scratch (seed will be generated by the node) by making a POST request to /wallet/init with data body: {\u0026quot;pass\u0026quot;: \u0026quot;123\u0026quot;, \u0026quot;mnemonicPass\u0026quot;: \u0026quot;abc\u0026quot;}. Don\u0026rsquo;t forget to save the mnemonic phrase that the node responds with. (Note: The parameter mnemonicPass in request body is optional and is used for protecting the mnemonic phrase). Restore the wallet from an existing seed. You will have to provide your mnemonic phrase When using this option. This is done by making a POST request to /wallet/restore with data body: {\u0026quot;pass\u0026quot;: \u0026quot;123\u0026quot;, \u0026quot;mnemonic\u0026quot;: \u0026quot;abandon abandon ...\u0026quot;, \u0026quot;mnemonicPass\u0026quot;: \u0026quot;abc\u0026quot;} (Note: the mnemonicPass field is required only in case your mnemonic phrase was protected by an additional password at creation).  Unlocking the wallet After initialization and before every use the wallet needs to be unlocked by making a POST request to /wallet/unlock with data body: {\u0026quot;pass\u0026quot;: \u0026quot;123\u0026quot;}. (Note: use the password you had chosen at initialization stage)\nYou must perform this step every time the node is restarted or the wallet is locked. In particular, the wallet must be unlocked for the following operations:\n Using internal miner Signing transactions Tracking boxes  Locking the wallet A wallet is automatically locked after some time, which means that all currently loaded secrets are flushed from the memory. You can also use the REST API to lock the wallet by making a GET request to /wallet/lock. It is recommended to lock the wallet when it is not in use. After locking, you will need to unlock the wallet to use it again.\nManaging keys A wallet implements BIP32 (\u0026ldquo;Hierarchical deterministic wallets\u0026rdquo;). When the wallet is initialized the only root key is created. In order to derive additional key pair corresponding to a specific derivation path (method: POST, request body: {\u0026quot;derivationPath\u0026quot;: \u0026quot;m/1/2\u0026quot;}) the /wallet/deriveKey API route can be used. In order to simply create additional key pair use a /wallet/deriveNextKey API route (method: GET).\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_06_04_wallet-documentation/","subtitle":null,"title":"Wallet documentation"},{"contents":"","link":"https://ergoplatform.org/docs/whitepaper_Ergo_cn.pdf","permalink":"https://ergoplatform.org/en/news/2019-06-03/","subtitle":"We continue to reach out to the Chinese crypto community. Chinese website coming soon.","title":"Ergo whitepaper(Chinese)"},{"contents":"","link":"https://ergoplatform.org/blog/2019_05_29-exchange/","permalink":"https://ergoplatform.org/en/news/2019-05-30/","subtitle":"A Local Exchange Trading System (LETS) is aimed at developing local economy and is usually used by people of a locality in the vicinity of each other.","title":"A Trustless Local Exchange Trading System on top of Ergo"},{"contents":"A Local Exchange Trading System (LETS) is aimed at developing local economy and is usually used by people of a locality in the vicinity of each other. For a brief overview of LETS see this link, which also describes an ErgoScript implementation of a committee managed LETS. We call such a system a managed or permissioned, since it depends on a committee of trusted members to enroll new members into the LETS. Here we describe a trustless LETS, i.e., one where there is no management committee needed for enrolment.\nOverview LETS involves several parties that agree to use some form of \u0026ldquo;local currency\u0026rdquo;, usually pegged to the country\u0026rsquo;s main currency at a 1:1 rate. Assume that our LETS is based in a European country where the currency is Euros, and the exchange is done in \u0026ldquo;local Euros\u0026rdquo;, which are considered to be equivalent to national Euros.\nEach user in LETS has an account, which contains the LETS balance of that user (in Local Euros). On joining, each user has a balance of zero. The balance is stored in a (possibly decentralized) ledger. An interesting feature of LETS is that a user with zero balance can also \u0026ldquo;withdraw\u0026rdquo; money, but only for paying another LETS user. At any time the sum of LETS balances of all the users is zero.\nAs an example, Alice with zero balance wishes to purchase one liter of milk for 2 Euros from Bob who is also a member of LETS with zero balance. She transfers 2 Euros from her account to Bob\u0026rsquo;s, making her balance -2 and Bob\u0026rsquo;s +2. Bob can then transfer some or all of his balance to another LETS user in exchange for goods or services.\nTrustless LETS Since we desire a trustless LETS, we cannot depend on any trusted group of people to admit users. Note that we will still have a committee to perform some tasks such as setting up the LETS parameters (local currency, the maximum number of members, etc) and consuming any joining fee.\nWe will only assume a trusted pricing oracle that gives the current rate of euros to ergs identified by some global id (rateTokenID) and a singleton box containing exactly one token with this id. A singleton box, described here, is a box containing a singleton token, i.e., a token with only one quantity in existence. This box also contains the rate of ergs to euros at any given period of time. The rate is updated by spending this box and creating another singleton box with the new rate.\nAt any instance, our LETS is uniquely defined by a global token box that contains some membership tokens with id letsTokenID. This box defines the LETS parameters such as the location, the currency unit, rateTokenID, etc. The token box is initially started with, say, 10000 membership tokens. Users can spend this box and create their individual LETS boxes as outputs of the transaction, such that each such output has exactly one membership token and the balance membership tokens are put in a newly created token box.\nA LETS box represents a LETS member and must be used in every transaction. For simplicity, this article restricts all LETS transaction to involve exactly two members, one being the sender and the other the receiver, such that the sender transfers some positive amount of the LETS currency (local euros) to the receiver. Such a transaction consumes the member\u0026rsquo;s boxes and recreates them as output with the updated balance.\nThe Basic Variant To prevent spam and DDoS attacks, we require at least some minimum number of ergs (minErgsToJoin) to be locked in the newly created member\u0026rsquo;s box. The ergs will be locked until at least minWithdrawTime number of blocks have been mined. A box is allowed to have a negative LETS balance upto the amount that can be covered by the locked ergs (using the rate at the time of trade).\n// a tokenBox stores the membership tokens and has this script val tokenBox = OUTPUTS(0) // the first output must also be a tokenBox // first output contains remaining LETS tokens  def isLets(b:Box) = { // returns true if b is a LETS box  // A LETS box must have exactly 1 membership token in tokens(0)  b.tokens(0)._1 == letsTokenID \u0026amp;\u0026amp; b.tokens(0)._2 == 1 \u0026amp;\u0026amp; blake2b256(b.propositionBytes) == memberBoxScriptHash \u0026amp;\u0026amp; SELF.R4[Long].get == 0 \u0026amp;\u0026amp; // start the box with zero LETS balance  b.value \u0026gt;= minErgsToJoin \u0026amp;\u0026amp; // the box must contain some minimum ergs  b.R6[Long].get \u0026lt;= HEIGHT // store the creation height in R6 } // how many lets boxes creared in the tx val numLetsBoxes = OUTPUTS.filter({(b:Box) =\u0026gt; isLets(b)}).size // In the transaction following is preserved for the token box ... tokenBox.tokens(0)._1 == SELF.tokens(0)._1 \u0026amp;\u0026amp; // token id tokenBox.tokens(0)._2 == SELF.tokens(0)._2 - numLetsBoxes \u0026amp;\u0026amp; // quantity tokenBox.propositionBytes == SELF.propositionBytes // script A LETS member\u0026rsquo;s box is protected by the script below, whose hash memberBoxScriptHash is used above. The script requires exactly one (sender, receiver) pair per transaction.\nval validRateOracle = CONTEXT.dataInputs(0).tokens(0)._1 == rateTokenID val rate = CONTEXT.dataInputs(0).R4[Int].get val inBalance = SELF.R4[Long].get // LETS balance of current input val pubKey = SELF.R5[SigmaProp].get // owner of the current input val createdAt = SELF.R6[Long].get // height at which current input was mined  val index = getVar[Int](0).get // index of the corresponding output val out = OUTPUTS(index) val outBalance = out.R4[Long].get // LETS balance of the output  // A LETS box is one that has the same script as the current box val isMemberBox = {(b:Box) =\u0026gt; b.propositionBytes == SELF.propositionBytes} val letsInputs = INPUTS.filter(isMemberBox) // all LETS input boxes val letsOutputs = OUTPUTS.filter(isMemberBox) // all LETS output boxes  // The current input belongs to the receiver if its LETS balance increases // There may be some ergs in receiver\u0026#39;s input box. We need to ensure that // the receiver\u0026#39;s output box also contains the same amount of ergs as input val receiver = outBalance \u0026gt; inBalance \u0026amp;\u0026amp; out.value == SELF.value val getBalance = {(b:Box) =\u0026gt; b.R4[Long].get} // returns LETS balance of a box  val letsBalIn = letsInputs.map(getBalance).fold(0L, {(l:Long, r:Long) =\u0026gt; l + r}) val letsBalOut = letsOutputs.map(getBalance).fold(0L, {(l:Long, r:Long) =\u0026gt; l + r}) // sender box can contain less amount of ergs (sender may withdraw ergs provided // that any negative LETS balance of sender in out is backed by sufficient ergs) val correctErgs = out.value \u0026gt;= -outBalance * rate \u0026amp;\u0026amp; ( out.value \u0026gt;= SELF.value || SELF.R6[Long].get + minWithdrawTime \u0026gt; HEIGHT ) // for the receiver, we don\u0026#39;t touch the erg balance, // since a receiver is not actively involved in the transaction  inBalance != outBalance \u0026amp;\u0026amp; // some transaction should occur; balance must change SELF.tokens(0)._1 == letsTokenID \u0026amp;\u0026amp; // the current input has the right token out.tokens(0)._1 == letsTokenID \u0026amp;\u0026amp; // corresponding output has the right token validRateOracle \u0026amp;\u0026amp; // oracle providing rate has the correct \u0026#34;rate token\u0026#34; letsBalIn == letsBalOut \u0026amp;\u0026amp; // total LETS balance is preserved in the transaction letsInputs.size == 2 \u0026amp;\u0026amp; letsOutputs.size == 2 \u0026amp;\u0026amp; // only two LETS inputs, outputs out.propositionBytes == SELF.propositionBytes \u0026amp;\u0026amp; // out is a LETS box ... out.R5[SigmaProp].get == pubKey \u0026amp;\u0026amp; // ... with the right pub key out.R6[Long].get == SELF.R6[Long].get \u0026amp;\u0026amp; // ... and creation height (receiver || // either current input belongs to receiver ...  (pubKey \u0026amp;\u0026amp; correctErgs) // ... or out has correct ergs and tx has signature ) The transaction spending a box with the above script requires:\n The sum of the LETS balance of inputs and outputs is preserved There are two LETS inputs and two LETS outputs The public keys (stored in R5) is preserved in the corresponding output The creation height (stored in R6) be preserved in the corresponding output  We say that some public key is the receiver if the LETS balance of its output is higher than that of its input.\nThe last condition requires that either the input and output boxes belong to the receiver (so that the ergs are preserved), or, in case they belong to the sender, a signature is provided and the output is backed by the required number of ergs if its LETS balance is negative. Furthermore, it requires that the sender\u0026rsquo;s ergs balance cannot be reduced until at least minWithdrawTime number of blocks have been mined after the ergs were locked.\nCompared to the managed LETS, the above system has the following differences:\n No membership record: Unlike the managed LETS, We don\u0026rsquo;t store any membership information here. Multiple-boxes: A person can create multiple membership boxes, which is permitted. We only require that any negative balance be backed by the corresponding number of ergs locked in it.  LETS-1: Zero Sum, Collateral The above is the basic variant, which we call LETS-1. It has the following features:\n Time-locked Joining-Fee: To prevent spam attacks, a member has to pay a certain minimum fee in ergs at the time of joining. This fee is refundable but only after a predefined number of blocks. Zero Sum: The sum of the LETS balances of all member boxes is zero. Member boxes are allowed to have a negative balance as long as it is within a certain limit. Collateral: For the sender\u0026rsquo;s output, ergs are used as collateral to cover negative LETS balance at the current exchange rate.  The following are some variations of LETS-1.\nLETS-2: Zero Sum, No collateral This is a slight variation of LETS-1 as follows:\n Non-refundable joining fee: Similar to LETS-1, a joining fee is needed to prevent spam attacks. However, unlike LETS-1, this fee is non-refundable and must be sent to some predefined management committee. Zero Sum: As in LETS-1.  LETS-3: Positive-Sum, Collateral The above two variants require the total LETS balance to be always zero. Here we consider a positive value for this sum. In particular, this variant has the following properties:\n Time-locked Joining Fee: As in LETS-1. Positive Sum: The LETS balance of every member must always be non-negative. This ensures that the sum of the LETS balances of all member boxes is positive. The initial LETS balance is set to a positive value based on the joining fee at the current rate, capped to some maximum value. Collateral: Any reduction in ergs balance of the sender must be accompanied by a reduction of the corresponding LETS balance at the current exchange rate.  We can also allow topping up the LETS balance during a transaction by adding the equivalent amount of ergs.\nLETS-4: Positive-Sum, No collateral This is similar to LETS-3 but with some small variations:\n Non-refundable Joining Fee: As in LETS-2 Positive-Sum: As in LETS-3  The following table summarizes the variants:\n    Zero Sum Positive Sum     Collateral LETS-1 LETS-3   No collateral LETS-2 LETS-4    We considered LETS transactions involving a single sender-receiver pair. More advanced models can allow multiple senders and receivers, and need not be in pairs.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_05_29-exchange/","subtitle":null,"title":"A Trustless Local Exchange Trading System"},{"contents":"Overview Ergo’s native token is called Erg and its emission schedule may be of keen interest to users and miners of the platform. Ergs also have some unique characteristics which are highlighted in this post. Most basically and leaving out technical details, Ergo has a strictly limited supply, an 8‐year emission schedule and a declining rate of emission over these 8 years. All tokens are mined through an original Asic and Pool‐resistant Proof‐of‐Work (“PoW”) algorithm called Autolykos. Therefore, there are 0 Ergs in existence at launch of mainnet as there was no ICO nor pre‐mine. At the end of 8 years, the final Erg supply will be 97,739,925 Ergs. The Ergo block interval is 2 minutes and for the first 2 years, each block will release a total of 75 Ergs to be shared between the miners and the Treasury (Treasury discussed below). But starting at year 2, the rate of emission will fall by 3.0 Ergs and thereafter further decline every 3 months by an additional 3.0 Ergs, which will result in an end to emission 8 years after launch. There will be no additional inflation and the Erg monetary base will remain fixed. The Emission Chart below illustrates this.\nThe Ergo Treasury To fund development, promotion, events, to swap Ergo’s Ergo First Year Tokens (“EFYT”, further discussed below) into Ergs and to fund other activities which may advance the platform, Ergo has in place a Treasury which will receive 4.43% of the Ergs released during emission. During the first 2 years post‐mainnet launch, the Treasury will receive 7.5 Ergs per block. Given that the block reward for each block is 75 Ergs total, the Treasury’s allocation of Ergs is equivalent to 10% of the total block reward over the first 2 years and leaves miners with a block reward of 67.5 Ergs per block. After 2 years, the Treasury will continue to receive the part of the block reward that exceeds 67.5 Erg, however, this will be 0 after year 2.5 when the block reward becomes 66 Ergs per block. Readers familiar with some other PoW protocols with a Treasury, such as ZCash, may find this to be similar, however, it should be noted that the amount of Ergs going to the Treasury comprise a total of only 4,330,791.5, or 4.43% of the total monetary base, and is completed in just 2.5 years. This compares with ZCash’s Treasury, which was 10% of the ZCash total monetary base and 20% of all issued ZCash coins during the first 4 years. With Ergo, it is hoped that by 1 year post‐mainnet launch, Ergo will have achieved a high level of decentralization with a diverse developer, miner and user base. For the first year, the Treasury will be used for swapping of the EFYT on the Waves platform for Erg. For the remaining 1.5 years, a community voting mechanism will be put in place to determine how Treasury funds are spent.\nThe Ergo Emission Chart and Code The code for the emission schedule can be found here\nThe Ergo First Year Token (“EFYT”) EFYT was airdropped and distributed on Waves DEX starting with a 100,000 EFYT airdrop 2 years ago in May, 2017. EFYT served the dual purposes of helping to build an early community of stake holders and enthusiasts for Ergo and of raising a small amount of funds for the platform before launch to fund development, promotion etc. EFYT is strictly a Waves token and is not the same as an Erg, which is the Ergo mainnet native token mined after Ergo’s mainnet launch.\nEFYT will be swapped with a fraction of the Ergs mined within the first 1 year post mainnet launch. The planned mechanism for executing the swap is first, a new payment gateway will be set up on Waves for Ergo’s mainnet token, Erg. More on Waves payment gateways can be found here. After the gateway is set up, as the Ergo Treasury receives Ergs from the mining reward, the Treasury will deposit these Ergs to Waves via the gateway, at which time, the Treasury will make a bid in the market at fixed price of 1.00 ERG / 1.00 EFYT and owners of EFYT can then swap their EFYTs for Ergs and do as they wish with their Ergs including holding them on Waves, trading on Waves or transferring their Ergs out of Waves via the gateway to their own wallet for use elsewhere. All EFYT purchased by the Treasury in this process will be burned.\nThe current distribution of EFYT can be found here. It should be noted that the max supply of EFYT is 1,970,945.0. This is 10% of the first year of Ergo token emission and the same number of Ergs that the Treasury will receive, meaning that the Treasury will have received 1,970,945.0 Ergs during year 1, sufficient to swap the max supply of EFYT for Erg.\nHow can Ergo Issue the Entire Erg Supply in only 8 years whereas other PoW blockchains all have much longer emission schedules? Other than Ergo, few, if any, PoW protocols have such a short emission schedule as 8 years and it is worth mentioning what makes this possible for Ergo. Firstly, to briefly compare with just a few prominent PoW and recently issued PoW tokens, Erg supply is 100% issued after 8 years, with no long tail of emission, whereas emission of:\n Bitcoin is approximately 75% issued after 8 years with a long tail of emission to follow; ZCash and Ravencoin follow the same emission schedule as Bitcoin; Beam will be 75% issued after 8 years and has a long tail of emission; Grin inflation extends out indefinitely  Ergo’s short emission schedule is made possible through its new economic model, namely, the storage rent fee component of its protocol. Miners will have an additional source of income and a paper on that is available here. In summary, miners are able to deduct a storage rent fee every 4 years denominated in Erg from an unspent box (similar to a UTXO in Bitcoin) in exchange for the cost of keeping such box in state which resides in high cost memory. Therefore, miners will be highly incentivized to secure the network even in the absence of a block reward subsidy and this will lead to a more stable mining reward than just relying on transaction fees alone which miners will also receive. Other benefits from having the storage rent fee include prevention of “state bloat”, building of an economy around state (users must pay to keep unspent boxes in miners’ memory for the long‐term) and a gradual return of any lost coins back into circulation. Note that in Ergo, miners can use on‐chain voting to gradually change many key parameters including the storage rent fee, block size and maximum computational cost of a block.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_05_20-curve/","subtitle":null,"title":"The Ergo Emission Schedule"},{"contents":"","link":"https://ergoplatform.org/blog/2019_05_20-curve/","permalink":"https://ergoplatform.org/en/news/2019-05-20/","subtitle":"Ergo’s native token is called Erg and its emission schedule may be of keen interest to users and miners of the platform.","title":"The Ergo Emission Schedule"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.0.5","permalink":"https://ergoplatform.org/en/news/2019-05-17/","subtitle":"Wallet persistence added. Stateful validation of transactions via API.","title":"Testnet 2.0.5 released"},{"contents":"","link":"/docs/whitepaper.pdf","permalink":"https://ergoplatform.org/en/news/2019-05-15-whitepaper/","subtitle":"A deep general-purpose overview of the Ergo platform.","title":"Ergo whitepaper"},{"contents":"Step 1: Tools Visual Studio\nChoose free community version, you will need to select desktop development with C++ package during install.\nCUDA toolkit Choose your system version, install with default options, it will update your graphics driver to a compatible version.\nCurl\nGeneric version without SSL, binary won`t work. Choose generic source, zip and click on show mirrors. Download and unpack.\nOpenSSL 1.0.2\nDownload and install, select the OpenSSL binaries (/bin) directory during install.\nAutolykos GPU miner\nClick on clone or download and download zip and unpack.\nStep 2: Building libcurl Open the command line, go to c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\vc\\Auxiliary\\Build\\ and run this script: vcvarsall.bat x64\nOpen the command line, go to unpacked Curl directory, then cd winbuild and run this command: nmake /f Makefile.vc mode=dll MACHINE=x64\nAfter a successful build, go to Curl directory, \\curl\\builds\\libcurl-vc-x64-release-dll-ipv6-sspi-winssl\\bin and copy libcurl.dll to \\Autolykos\\secp256k1 directory.\nStep 3: Building miner Open the command line, go to c:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\vc\\Auxiliary\\Build\\ and run this script: vcvars64.bat\nOpen command line and go to unpacked Autolykos GPU miner directory, then cd secp256k1 and edit winbuild.cmd file, change OPENSSL_DIR, LIBCURL_DIR to your OpenSSL and Curl main directories. You can change CUDA_COMPUTE_ARCH to GPU code architecture you want.\nRun winbuild.cmd and build your miner. After succesful build you should discover miner.exe in the same directory.\nStep 4: Mining Before you can mine, you have to configure your node, wallet and miner\nAfter your node is synced, wallet is configured and unlocked, you have to create mining configuration file config.json with following structure: { \u0026quot;seed\u0026quot; : \u0026quot;YourSeedString\u0026quot;, \u0026quot;node\u0026quot; : \u0026quot;https://127.0.0.1:9052\u0026quot;, \u0026quot;keepPrehash\u0026quot; : true } in the \\Autolykos\\secp256k1 directory.\nOpen the command line and go to \\Autolykos\\secp256k1 directory. Run miner.exe config.json\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_05_07_mining/","subtitle":null,"title":"How to mine Ergo on Windows(x64)"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/news/2019-05-07-release/","subtitle":"Due to delays in (mostly) testing and the security audit, we've decided to postpone the mainnet launch until June 20.","title":"Release postponed"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/foundation/","subtitle":"Foundation page","title":"Foundation"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/legal/","subtitle":"Legal page","title":"Legal"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/privacy/","subtitle":"Privacy page","title":"Privacy"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/use_cases/","subtitle":"Use Cases page","title":"Use Cases"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/wallets/","subtitle":"Wallets page","title":"Wallets"},{"contents":"","link":"https://ergoplatform.org/docs/teaser.pdf","permalink":"https://ergoplatform.org/en/news/2019-04-24-teaser/","subtitle":"High-level overview of the vision, consensus, clients, survivability, economy, and applicability.","title":"Ergo teaser"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/software/","subtitle":"Software page","title":"Software"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/basics/","subtitle":"Basics page","title":"Basics"},{"contents":"A local exchange trading system (LETS) is a local mutual credit association which members are allowed to create common credit money individually, with all the deals in the system written into a common ledger. As an example, assume that Alice with zero balance is willing to buy a liter of raw milk from Bob. First, they agree on a price, for example, assume that the price is about 2 Euro (as Alice and Bob are living in Ireland). After the deal being written into a ledger, Alice\u0026rsquo;s balance becomes -2 (minus two) Euro, and Bob\u0026rsquo;s balance becomes 2 Euro. Then Bob may spend his 2 Euro, for example, on home-made beer from Charlie. Often, such systems impose limits on negative balances, and sometimes even on positive ones, in order to promote exchange in the community.\nHistorically, such systems become popular during crisis times. The first system was established by Michael Linton in a Canadian town stuck in depression back in 1981. Local exchange trading systems were extremely popular during 1998-2002 Argentine Great Depression. Most LETS groups range from 50 to 250 members, with paper-based credit notes and ledger maintained by a core committee. However, paper-based LETS currencies have shown some problems, such as counterfeit notes, possible rogue behavior of system managers, and so on. Therefore, blockchain-based LETS could be superior to the old systems. More information on LETS could be found in \u0026ldquo;The Ecology of Money\u0026rdquo; book (by Richard Douthwaite) and Wikipedia.\nIn this article we show how LETS could be implemented on top of Ergo. To the best of our knowledge, this is the first implementation of such kind of community currency on top of a blockchain. Our reference implementation is simple and consists of two contracts, namely, a management contract and an exchange contract. We skip Ergo preliminaries, so please read the ICO article and ErgoScript tutorials(basic and advanced) for starters. Nevertheless, we are going to introduce a couple of new terms in following sentences. If a token is issued with amount equal to one, we call it the singleton token. Similarly, a box which contains the singleton token is called the singleton box.\nThe management contract is controlling a singleton box which holds members of the LETS system. The contract enables the adding of new members at the pace of one member per one transaction. The box is not storing members, but only a small digest of authenticated data structure built on top of the members' directory. A member is associated with a singleton token issued in a transaction which is adding the member to the directory. The transaction creates a new member\u0026rsquo;s box which contains the member\u0026rsquo;s singleton token. The member\u0026rsquo;s box is protected by the exchange contract. Also, the newly created member\u0026rsquo;s box has initial balance written down into the R4 register, and the balance is equal to zero in our example. The transaction creating a new member must provide a proof of correctness for directory transformation.\nThe management contract box is controlled usually by a committee, and the committee could evolve over time. To support that, we allow committee logic to reside in the register R5. For example, assume that a new committee member has been added along with a new LETS member, the input management contract box is requiring 2-out-of-3 signatures, and the output box requires 3-out-of-4 signatures. In this case contents of the R5 register in the input and the output box would differ.\nThe management contract code in ErgoScript with comments is provided below. Please note that \u0026ldquo;userContractHash\u0026rdquo; is about exchange contract hash.\nval selfOut = OUTPUTS(0) // Management script  val managementScript = selfOut.R5[SigmaProp].get // The management script template is replicating self, and management script is satisfied  val scriptCorrect = (selfOut.propositionBytes == SELF.propositionBytes) \u0026amp;\u0026amp; managementScript // A spending transaction is creating boxes for directory, user, fee.  val outsSizeCorrect = OUTPUTS.size == 3 // Checks that the management label token is replicating self  val outTokenCorrect = (selfOut.tokens.size == 1) \u0026amp;\u0026amp; (selfOut.tokens(0)._1 == letsToken) // Checks that new token is issued, and its amount is correct  // OUTPUTS(0) tokens already checked via outtokenCorrect  val issuedTokenId = INPUTS(0).id val userOut = OUTPUTS(1) val correctTokenAmounts = (userOut.tokens.size == 1 \u0026amp;\u0026amp; userOut.tokens(0)._1 == issuedTokenId \u0026amp;\u0026amp; userOut.tokens(0)._2 == 1 \u0026amp;\u0026amp; OUTPUTS(2).tokens.size == 0 \u0026amp;\u0026amp; outTokenCorrect) // Checks that the new user has been created with the zero balance  val zeroUserBalance = userOut.R4[Long].get == 0 val properUserScript = blake2b256(userOut.propositionBytes) == userContractHash // Checks that the new token identifier has been added to the directory  val selfTree = SELF.R4[AvlTree].get val toAdd: Coll[(Coll[Byte], Coll[Byte])] = Coll((issuedTokenId, Coll[Byte]())) val proof = getVar[Coll[Byte]](1).get val modifiedTree = selfTree.insert(toAdd, proof).get val expectedTree = selfOut.R4[AvlTree].get val treeCorrect = modifiedTree == expectedTree correctTokenAmounts \u0026amp;\u0026amp; scriptCorrect \u0026amp;\u0026amp; treeCorrect \u0026amp;\u0026amp; zeroUserBalance \u0026amp;\u0026amp; properUserScript correctTokenAmounts \u0026amp;\u0026amp; scriptCorrect \u0026amp;\u0026amp; treeCorrect \u0026amp;\u0026amp; zeroUserBalance \u0026amp;\u0026amp; properUserScript correctTokenAmounts \u0026amp;\u0026amp; scriptCorrect \u0026amp;\u0026amp; treeCorrect \u0026amp;\u0026amp; zeroUserBalance \u0026amp;\u0026amp; properUserScript The exchange contract script is fairly straightforward and provided below along with comments describing its logic. In the contract, it is assumed that a spending transaction for an exchange contract box is receiving at least two inputs, and the first two inputs should be protected by the exchange contract script and contain LETS member tokens. To check that singleton member tokens in the inputs do indeed belong to the LETS system, a spending transaction provides the management contract box as the first read-only data input, and also should provide a proof that the member tokens do belong to the directory authenticated via the R4 register of the management contract box. \u0026ldquo;letsToken\u0026rdquo; in the script is about the singleton token of the management box.\n// Minimal balance allowed for LETS trader  val minBalance = -20000 val lookupProof = getVar[Coll[Byte]](1).get // The read-only box which contains directory of LETS members  val treeHolderBox = CONTEXT.dataInputs(0) val properLetsToken = treeHolderBox.tokens(0)._1 == letsToken val membersTree = treeHolderBox.R4[AvlTree].get // A spending transaction is taking two boxes of LETS members willing to make a deal,  // and returns boxes with modified balances.  val participant0 = INPUTS(0) val participant1 = INPUTS(1) val participantOut0 = OUTPUTS(0) val participantOut1 = OUTPUTS(1) //Check that members do indeed belong to the LETS  val token0 = participant0.tokens(0)._1 val token1 = participant1.tokens(0)._1 val memberTokens = Coll(token0, token1) val membersExist = membersTree.getMany(memberTokens, lookupProof).forall({ (o: Option[Coll[Byte]]) =\u0026gt; o.isDefined }) // Check that LETS member balance changes during the deal are correct  val initialBalance0 = participant0.R4[Long].get val initialBalance1 = participant1.R4[Long].get val finishBalance0 = participantOut0.R4[Long].get val finishBalance1 = participantOut1.R4[Long].get val diff0 = finishBalance0 - initialBalance0 val diff1 = finishBalance1 - initialBalance1 val diffCorrect = diff0 == -diff1 val balancesCorrect = (finishBalance0 \u0026gt; minBalance) \u0026amp;\u0026amp; (finishBalance1 \u0026gt; minBalance) \u0026amp;\u0026amp; diffCorrect // Check that member boxes save their scripts.  // todo: optimization could be made here  val script0Saved = participantOut0.propositionBytes == participant0.propositionBytes val script1Saved = participantOut1.propositionBytes == participant1.propositionBytes val scriptsSaved = script0Saved \u0026amp;\u0026amp; script1Saved // Member-specific box protection  val selfPubKey = SELF.R5[SigmaProp].get selfPubKey \u0026amp;\u0026amp; properLetsToken \u0026amp;\u0026amp; membersExist \u0026amp;\u0026amp; diffCorrect \u0026amp;\u0026amp; scriptsSaved Note that both contracts could be modified in many ways to get new systems with different properties. So hopefully some day this article will be continued!\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_04_22-lets/","subtitle":null,"title":"A Local Exchange Trading System On Top Of Ergo"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/news/","subtitle":"News page","title":"News"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/faq/","subtitle":"Frequently asked questions page","title":"Faq"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/404/","subtitle":null,"title":"404"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/contribute/","subtitle":"Contribute page","title":"Contribute"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/documents/","subtitle":"Documents page","title":"Documents"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/blog/","subtitle":"Blog page","title":"Blog"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/exchanges/","subtitle":null,"title":"Exchanges"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/hall_of_fame/","subtitle":"Hall of Fame page","title":"Hall of Fame"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/about/","subtitle":"About page","title":"About"},{"contents":"This article describes a full featured ICO (Initial Coin Offering) implemented in ErgoScript. The example covers several important and novel features of the Ergo Platform and shows how it can support complex contracts with tiny amount of code.\nPart 1. Preliminaries An important design decision in a cryptocurrency protocol is specifying what a spending transaction actually spends. There are two possibilities here. The first a UTXO-based model, as in Bitcoin, where a transaction spends one-time asset containers (called as \u0026lsquo;coins\u0026rsquo; or UTXOs in Bitcoin) and creates new ones. The other is an account-based model, as in Nxt, Ethereum or Waves, where a transaction transfers some amount of asset from an existing long-living account to another, possibly new, long-living account, with possible side-effects on the way, such as contract execution in Waves or Ethereum. In this regard, Ergo is similar to Bitcoin, because it uses the UTXO-based approach, where one-time containers called boxes are being spent. Interestingly, an Ergo transaction can also have data-inputs which are not being spent, but rather used to provide some information from the current set of unspent boxes.\nIt is not trivial to create an ICO on top of an UTXO based model, because, in contrast to account-based models, there is no explicit persistent storage here. However, Ergo brings a spending transaction into the execution context of a script. With this small change it becomes possible to express dependencies between transaction outputs and inputs. In turn, by setting dependencies we can execute even arbitrarily complex Turing-complete programs on top of blockchain (see the \u0026ldquo;Self-reproducing Coins as Universal Turing Machine\u0026rdquo; paper). In this article we will define a concrete scenario of a multi-stage contract using an ICO, where we have three stages (funding, token issuance, withdrawal).\nNow imagine an ICO for thousands of participants. Unlike Ethereum, Ergo does not provide possibility to store large sets of data and carry them over throughout contract execution. Rather, it allows to store only about 40-bytes header of a data structure, represented as key -\u0026gt; value dictionary, authenticated similarly to Merkle tree. To access some elements in the dictionary, or to modify it, a spending transaction which is triggering protecting script execution should provide lookup or modification proofs. This gives possibility for a contract to authenticate potentially huge datasets without requiring much memory to store contract state. However, storing space in the state (of active contracts) would mean bigger transactions, but this problem is easier from scalability point of view, and scalability is a top priority for Ergo.\nPart 2. The ICO Contract There could be many possible scenarios associated with an Initial Coin Offering (ICO). In this article we consider an ICO that wants to collect at least a certain amount of funds (in Ergs) to start the project. Once the funding threshold is crossed and funding period ends, the project is kickstarted and ICO tokens are issued by the project based on the total funding collected. In the withdraw phase, which extends forever, the investors withdraw ICO tokens based on the amount they had invested during the funding period. The contract steps are briefly described below with details provided further:\n First, funding epoch takes place. It starts with a project\u0026rsquo;s box authenticating an empty dictionary. The dictionary is intended for holding (investor, balance) pairs, where investor is a script protecting the box containing withdrawn tokens. For the balance, we assume that 1 token is equal to 1 Ergo during the ICO. During the funding epoch, it is only possible to put Ergs into the project\u0026rsquo;s box. A funding transaction spends the project\u0026rsquo;s box and creates a new project box with updated information. For that, a spending transaction for the project\u0026rsquo;s box also has other inputs which hold investor withdrawing scripts. Investor scripts and input values should be added to the tree of the new box. There could be many chained funding transactions. Second, the funding period finishes, after which the tree holding the investors data becomes read-only. An authenticated tree could have different modification operations allowed individually: inserts, deletes, updates, or all the operations could be disallowed (so the tree could be in the read-only mode). Also, this transaction creates tokens of the ICO project which will be withdrawn in the next stage. The project can withdraw Ergs at this stage. Third, investors withdraw their ICO tokens. For that, a spending transaction creates outputs with guarding conditions and token values taken from the tree. The withdrawn pairs are also cleared from the tree. There could be many chained spending transactions.  These three stages should be linked together in the logical order. A seqience of boxes are used to achieve these goals.\nPart 3. The ICO Contract Details Now it is the time to provide details and ErgoScript code of the ICO contract stages.\nThe Funding Stage In the funding stage, which comes first, we assume that initially a project creates a box committing to an empty dictionary (stored in the register R5) with some guarding script described below. This stage lasts at least till height 2,000. More concretely, the first transaction with height of 2,000 or more should change the output box\u0026rsquo;s script as described in the next section (transactions at lower heights must output a box with the same script).\nThe project\u0026rsquo;s box checks that it is always first input and output of a transaction. The other inputs are considered investors' inputs. An investor\u0026rsquo;s input contains the hash of a script in register R4. This hash represents the withdraw script that will be used later on in the withdraw phase. The hashes as well as the monetary values of all investing inputs should be added to the dictionary. The spending transaction provides a proof that investor data are indeed added to the dictionary, and the proof is checked in the contract.\nIt is not checked in the funding sub-contract that the dictionary allows only insertions, and not updating existing values or removals (it is not hard to add an explicit check though).\nThe spending transaction should pay a fee, otherwise, it is unlikely that it would be included in a block. Thus, the funding contract checks that the spending transaction has two outputs (one for itself, another to pay fee), the fee is to be no more than a certain limit (just one nanoErg in our example), and the guarding proposition should e such that only a miner can spend the output (we use just a variable \u0026ldquo;feeProp\u0026rdquo; from compilation environment in our example without providing any details). This \u0026ldquo;feeProp\u0026rdquo; corresponds to a standard, though not required by protocol.\nThe code below enforces the conditions described above. Please note that the \u0026ldquo;nextStageScriptHash\u0026rdquo; environment variable contains hash of the issuance stage serialized script.\nval selfIndexIsZero = INPUTS(0).id == SELF.id val proof = getVar[Coll[Byte]](1).get val inputsCount = INPUTS.size val toAdd: Coll[(Coll[Byte], Coll[Byte])] = INPUTS.slice(1, inputsCount).map({ (b: Box) =\u0026gt; val pk = b.R4[Coll[Byte]].get val value = longToByteArray(b.value) (pk, value) }) val modifiedTree = SELF.R5[AvlTree].get.insert(toAdd, proof).get val expectedTree = OUTPUTS(0).R5[AvlTree].get val properTreeModification = modifiedTree == expectedTree val outputsCount = OUTPUTS.size == 2 val selfOutputCorrect = if(HEIGHT \u0026lt; 2000) { OUTPUTS(0).propositionBytes == SELF.propositionBytes } else { blake2b256(OUTPUTS(0).propositionBytes) == nextStageScriptHash } val feeOutputCorrect = (OUTPUTS(1).value \u0026lt;= 1) \u0026amp;\u0026amp; (OUTPUTS(1).propositionBytes == feeBytes) val outputsCorrect = outputsCount \u0026amp;\u0026amp; feeOutputCorrect \u0026amp;\u0026amp; selfOutputCorrect selfIndexIsZero \u0026amp;\u0026amp; outputsCorrect \u0026amp;\u0026amp; properTreeModification The Issuance Stage This stage has only one spending transaction to get to the next stage (the withdrawal stage). The spending transactions makes the following modifications. Firstly, the it changes the list of allowed operations on the dictionary from \u0026ldquo;inserts only\u0026rdquo; to \u0026ldquo;removals only\u0026rdquo;, as the next stage (withdrawal) is only dealing with removing entries from the dictionary.\nSecondly, the contract checks that the proper amount of ICO tokens are issued. In Ergo, it is allowed to issue one new kind of token per transaction, and the identifier of the token should be equal to the (unique) identifier of the first input box. The issuance sub-contract checks that a new token has been issued, and the amount of it is equal to the amount of nanoErgs collected by the ICO at till now.\nThirdly, the contract checks that a spending transaction is indeed re-creating the box with the guard script corresponding to the next stage, the withdrawal stage.\nFinally, the project should withdraw collected Ergs, and of course, each spending transaction should pay a fee. Thus, the sub-contract checks that the spending transaction has indeed 3 outputs (one each for the project tokens box, the Ergs wirhdrawal box, and the fee box), and that the first output and output is carrying the tokens issued. As we do not specify project money withdrawal details, we require a project signature on the spending transaction.\nval openTree = SELF.R5[AvlTree].get val closedTree = OUTPUTS(0).R5[AvlTree].get val digestPreserved = openTree.digest == closedTree.digest val keyLengthPreserved = openTree.keyLength == closedTree.keyLength val valueLengthPreserved = openTree.valueLengthOpt == closedTree.valueLengthOpt val treeIsClosed = closedTree.enabledOperations == 4 val tokenId: Coll[Byte] = INPUTS(0).id val tokensIssued = OUTPUTS(0).tokens(0)._2 val outputsCountCorrect = OUTPUTS.size == 3 val secondOutputNoTokens = OUTPUTS(0).tokens.size == 1 \u0026amp;\u0026amp; OUTPUTS(1).tokens.size == 0 \u0026amp;\u0026amp; OUTPUTS(2).tokens.size == 0 val correctTokensIssued = SELF.value == tokensIssued val correctTokenId = OUTPUTS(0).R4[Coll[Byte]].get == tokenId \u0026amp;\u0026amp; OUTPUTS(0).tokens(0)._1 == tokenId val valuePreserved = outputsCountCorrect \u0026amp;\u0026amp; secondOutputNoTokens \u0026amp;\u0026amp; correctTokensIssued \u0026amp;\u0026amp; correctTokenId val stateChanged = blake2b256(OUTPUTS(0).propositionBytes) == nextStageScriptHash val treeIsCorrect = digestPreserved \u0026amp;\u0026amp; valueLengthPreserved \u0026amp;\u0026amp; keyLengthPreserved \u0026amp;\u0026amp; treeIsClosed projectPubKey \u0026amp;\u0026amp; treeIsCorrect \u0026amp;\u0026amp; valuePreserved \u0026amp;\u0026amp; stateChanged The Withdrawal Stage At this stage, investors are allowed to withdraw project tokens protected by a predefined guard script (whose hash is stored in the dictionary). Lets say withdraw is done in batches of size N. A withdrawing transaction, thus, has N + 2 outputs, where the first output carrys over the withdrawal sub-contract and balance tokens, the last output pays the fee and the remaining N outputs have guarding scripts and token values according to the dictionary. The contract requires two proofs for the dictionary elements: one proving that values to be withdrawn are indeed in the dictionary, and the second proving that the resulting dictionary does not have the withdrawn values. The sub-contract is below.\nval removeProof = getVar[Coll[Byte]](2).get val lookupProof = getVar[Coll[Byte]](3).get val withdrawIndexes = getVar[Coll[Int]](4).get val out0 = OUTPUTS(0) val tokenId: Coll[Byte] = SELF.R4[Coll[Byte]].get val withdrawals = withdrawIndexes.map({(idx: Int) =\u0026gt; val b = OUTPUTS(idx) if(b.tokens(0)._1 == tokenId) { (blake2b256(b.propositionBytes), b.tokens(0)._2) } else { (blake2b256(b.propositionBytes), 0L) } }) val withdrawValues = withdrawals.map({(t: (Coll[Byte], Long)) =\u0026gt; t._2}) val withdrawTotal = withdrawValues.fold(0L, { (l1: Long, l2: Long) =\u0026gt; l1 + l2 }) val toRemove = withdrawals.map({(t: (Coll[Byte], Long)) =\u0026gt; t._1}) val initialTree = SELF.R5[AvlTree].get val removedValues = initialTree.getMany(toRemove, lookupProof).map({(o: Option[Coll[Byte]]) =\u0026gt; byteArrayToLong(o.get)}) val valuesCorrect = removedValues == withdrawValues val modifiedTree = initialTree.remove(toRemove, removeProof).get val expectedTree = out0.R5[AvlTree].get val selfTokensCorrect = SELF.tokens(0)._1 == tokenId val selfOutTokensAmount = SELF.tokens(0)._2 val soutTokensCorrect = out0.tokens(0)._1 == tokenId val soutTokensAmount = out0.tokens(0)._2 val tokensPreserved = selfTokensCorrect \u0026amp;\u0026amp; soutTokensCorrect \u0026amp;\u0026amp; (soutTokensAmount + withdrawTotal == selfOutTokensAmount) val properTreeModification = modifiedTree == expectedTree val selfOutputCorrect = out0.propositionBytes == SELF.propositionBytes properTreeModification \u0026amp;\u0026amp; valuesCorrect \u0026amp;\u0026amp; selfOutputCorrect \u0026amp;\u0026amp; tokensPreserved Possible Enhancements Please note that there are many nuances our example contract is ignoring. For example, anyone listening to the blockchain is allowed to execute the contract and construct proper spending transactions during funding and withdrawal stages. In the real-world, additional signature from the project or a trusted arbiter may be used.\nAlso, there is no self-destruction case considered in the withdrawal contract, so it will live until being destroyed by miners via storage rent mechanism, potentially for decades or even centuries. For the funding stage, it would be reasonable to have an additional input from the project with the value equal to the value of the fee output. And so on.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_04_10-ico-example/","subtitle":null,"title":"An ICO Example On Top Of Ergo"},{"contents":"","link":"https://github.com/ergoplatform/ergo/wiki/Mining","permalink":"https://ergoplatform.org/en/news/2019-04-03-ergo-mining-tutorial/","subtitle":"Mining is the process of adding new blocks into the Ergo blockchain by performing resource-intensive computations.","title":"Ergo mining tutorial"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.0.3","permalink":"https://ergoplatform.org/en/news/2019-04-02-testnet-2.0.3/","subtitle":"Testnet 2.0.3 released with various bug fixes and GPU mining support.","title":"Testnet 2.0.3 released"},{"contents":"","link":"/en/blog/2019_03_19-qa/","permalink":"https://ergoplatform.org/en/news/2019-03-19/","subtitle":"Transcript of Q\u0026A session with Alex Chepurnoy and Dmitry Meshkov","title":"Q\u0026A session transcript. Mainnet launch is planned for May 26"},{"contents":"First, we have a major announcement - Ergo mainnet launch is planned for May 26 if no security vulnerabilities will be found during audit process!\nWhat are the vision about scaling and adoption? About scaling, the main approach is to avoid bloat without compromising functionality. E.g. persistent updateable storage is possible, with updates to be checked by a blockchain contract, but only digest of authenticated data structure (and some additional bytes, less than 40 bytes anyway) are stored in the UTXO set dependless on data set size. Storage rent is helping to remove dust from the UTXO set. Then light clients: in Ergo you can have full-node guarantees without storing UTXO set, if you do not mine. That\u0026rsquo;s about much improved boostrapping and block validation times. With such improvements, it is possible to raise TPS without compromising classic blockchain assumptions and guarantees. Ok, but do you want concrete numbers? I don\u0026rsquo;t have them, as parameters like block size etc are not set in stone, rather, miners can adjust them. So if a miner is experiencing low full block validation time (as hardware is getting better with time, as well as software), he may propose or vote to increase block size.\nOn adoption, we expect following people to come: 1. People valuing social contract among the system and its users. E.g. people dissatisfied with Ethereum forking. Ergo will not have hard-forks to update functionality, while it will be possible for community to upgrade the protocol in many aspects. 2. Because of (1) at least, and also limited supply, Ergo would be good as store-of-value asset (demurrage cost is small if you just store a coin in the system). 3. People who need for safe, simple, and and efficient financial applications. Ergo\u0026rsquo;s Smart Money concept is much simpler that Ethereum\u0026rsquo;s Smart Contracts, while powerful enough for most financial applications of the people not having very specific skills to develop Solidity contracts, or bunch of money to hire proficient devs. 4. Not ready to predict anything about big companies, but some businesses already expressing interest to do some tokens and contracts on top of Ergo. To early to announce anything though.\nIs there an example or usecase? We have many examples, contracts: oracles, crowdfunding, atomic cross-chains and single-chain (token-to-token) swaps, mixing, etc. Basic things are covered in the ErgoScript tutorial for developers.\nA document with more complex examples (cold wallets, mixing, Rock-Paper-Scissors game) will be published soon. Further, we\u0026rsquo;ll show examples of ICO scenarios and a LETS system.\nPlease also take a look at the targeted microcredit contract example from \u0026ldquo;Smart contracts for the people\u0026rdquo; blogpost.\nDo you have intentions to build a native off-chain solution like lightning network? And what is your vision on community-driven approaches? Yes, we hope that they will occur at some point. Our goal now is to provide as flexible protocol as possible to make their implementation easy. Suprisely, we already have community members that are working on sidechain implementation on top of Ergo, but this work is in the early stage. We support any activity from our community, including sidechains)\nWhat blockchain project is similar to ERGO? In some aspects, Bitcoin (soft-forkability, but we\u0026rsquo;re going much further), Coda (if it\u0026rsquo;s the real thing, I need to check still; light client), Grin (FlyClient is similar to PoPoWs), ZCash (Equihash is similar to our PoW, but our params are stricter and our PoW is pool-resistant). Can not name anything like our language! So, in general, the Ergo is very unique.\nWhat is ErgoData and what are its practical use cases? And how long after Mainnet is it going to be implemented? ErgoData was planned to be a blockchain with the same technology under the hood, but different parameters to address needs of data-oriented applications. Now we\u0026rsquo;re totally focused to launching the single chain and applications on top of it. I think ErgoData could come 2 or 3 years after, if there will be demand for such applications, and also based on applications limitations(especially, data-intensive) on top of Ergo may have. Supposedly, it will be a sidechain. Now there\u0026rsquo;s good progress in this area, so supposedly by then we may have unconditionally good sidechains.\nWhen can we start mining? and can we mine with cpu? For sure you can start mining with CPU right now. Just set up a full node (check this guide) with mining = true config settings, and your node will start mining after the initial synchronization. Example config may be found here\nBut we are not on mainnet yet? So we can only mine testnet coins? Yes, you can only mine testnet coins now. GPU miner will be definitely available before mainnet(probably this or next week).\nWill there be a manual on how to setup a wallet? Wallet is one more thing that should be updated before mainnet launch, we take advice about it\u0026rsquo;s secure setup and so on. For now you can only set up seed phrase as a plain text in your config file section 2 in set up post\nWhat are the minimum requirements to run a node? It all depends on your node regime. We haven\u0026rsquo;t measured it precisely, we turn our full nodes on droplets with 4 Gb memory, 2 CPU, 80 Gb SSD drive, but it is like recommended config, not a minimum one.\nAre you planning any cooperation with other platforms (Waves for example)? What kind of? We\u0026rsquo;re planning to be listed on Waves DEX (this will significantly simplify EFYT/ERG swap), no other cooperation with platforms is planned.\nDo you have plans to add an option to generate ERC721 alike tokens? Tokens that can\u0026rsquo;t be splitted. You can issue one token per transaction for free, so it is not a problem to issue a huge amount of tokens (with 1 max supply). There is no standard to unite them into a class of similar tokens (no standard way to check, that token aa\u0026hellip;aa is of the same class of tokens as token aa...bb), but probably such kind of a standard will occur in the future.\nIs there an option to broadcast a batch of transactions at the same time? Ideally them to be included in same block. There is no API method to broadcast batch of transactions at the same time, but nothing stops you from broadcasting them one by one with no delays. So the should not be a problem to broadcast as many transactions as you wish simultaneously.Regarding Ideally them to be included in same block - it is possible to write some kind of a contract, that ensures that some batch of transactions were included in a single block (or where none of them was included), however, we haven\u0026rsquo;t tried it yet. In addition this may require a miner with modifier rules of collecting transactions from mempool.\nIs there an option to send transaction with 0 value asset? So the token is in the transaction, but it\u0026rsquo;s amount is 0? No, that\u0026rsquo;s not possible\nIs there an option to send \u0026ldquo;sponsored\u0026rdquo; transaction? The transaction which fee is paid by a custom token. It might be done using the exchange example, so you can create a contract that buys your token for Ergo, and when a sender is going to send a token - he sells required amount of token and makes a transfer of the remaining amount of tokens inside one transaction.\nSo there is no way to transfer 0.0000001 of token? Every output in Ergo should have some amount of Erg in it. Transaction fee may be 0, but you should put some Erg amount to every output created.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2019_03_19-qa/","subtitle":null,"title":"Q\u0026A with Alex Chepurnoy and Dmitry Meshkov"},{"contents":"","link":"https://github.com/ergoplatform/ergo/wiki/Set-up-a-full-node","permalink":"https://ergoplatform.org/en/news/2019-03-17-how-to-set-up-full-node/","subtitle":"Tutorial explaining how to install and configure Ergo node.","title":"How to set up and configure full Ergo node"},{"contents":"","link":"https://github.com/ergoplatform/ergo/releases/tag/v2.0.0","permalink":"https://ergoplatform.org/en/news/2019-03-14/","subtitle":"The super big step towards Ergo Platform launch! All the major features are implemented, just optimization, testing and security audit remain. It should be binary compatible with the mainnet, time to integrate and write your DApps!","title":"Testnet 2.0 is live! Smart contracts language updated"},{"contents":"","link":"https://ergoplatform.org/docs/ErgoScript.pdf","permalink":"https://ergoplatform.org/en/news/2019-03-12/","subtitle":"Paper published, we would be happy to get feedback!","title":"ErgoScript, a Cryptocurrency Scripting Language Supporting Noninteractive Zero-Knowledge Proofs"},{"contents":"A lot of blockchain-related news these days are saying us that a bank X or a corporation Y is going to use a \u0026ldquo;blockchain\u0026rdquo; to \u0026ldquo;reduce costs\u0026rdquo;. Basically it means that just another buzzword is considered by big banksters as just another tool to extract value from everywhere in a more efficient way, and also to save on cutting job positions.\nWhile I am avoiding to say anything about \u0026ldquo;Satoshi\u0026rsquo;s vision\u0026rdquo; (nothing but speculations could be dug there after his exodus), a broad view I witnessed in the early years around online forums users is that a cryptocurrency should provide tools to enrich the ordinary people behind their small businesses providing no much above making ends meet, not depersonalized big financial capital. The tools of a cryptocurrency in the eyes of the original broad community vision should allow people to do economic activity dependless on business size, geographic location, interest rates set by big players, and so on. The tools should allow people to do contracts (no paper contracts, but digital, self-enforcing, and reasonably smart contracts) dependless on differences in jurisdictions, traditions, followed business practices etc.\nI hope Ergo would be useful here. Thousands of small cooperatives and individual entrepreneurs are more important to healthy and sustainable wealth growth around the globe than a couple of corporations hiding profits in offshore heavens.\nAs an example, let\u0026rsquo;s consider a cooperative federation (such as Radical Routes) willing to provide financial help to an entrepreneur thousands kilometers away (say, in Rojava).\nWe need to assume some details now. In the first place, assume that there are four cooperatives in the network. They collectively lock 10,000 Ergs (in equal parts, so 2,500 Ergs each) in a contract, which says the following:\n The cooperatives are associated with public keys pubkeyA, pubkeyB, pubkeyC, pubkeyD. The entrepreneur is associated with a public key businessKey. The cooperatives are locking money in a coin protected by a funding contract, then doing due diligence and vote on whether to fund the entrepreneur or not. All the contract fund (10,000 Ergs) is going to the entrepreneur if 3 votes out of 4 are for that. Technically, the voting is done via 3-out-of-4 threshold signature. If voting is not successful (3 out of 4 signatures are not collected) before the block number 1,000, any cooperative (actually, anyone) can submit withdraw transaction, which is returning 2,500 Ergs (at least) to every cooperative. Further, the funding contract will also be called the voting contract. The investments could be spent on three goals, with some strict bounds. Namely, the entrepreneur must spend at least 5,000 Ergs on equipment, at least 2,000 Ergs on construction of a building needed, other funds the entrepreneur may spend arbitrarily. To be sure that equipment money will be spent on equipment, the cooperative federation is using public keys of known equipment sellers in the area of the entrepreneur. For example, consider that there are equipment sellers with public keys pubkeyTool1, pubkeyTool2, pubkeyTool3, pubkeyTool4 in the area. Technically, the transfer is organized as a collective signature of one equipment sellers (thus ring signature from equipment sellers ring AND entrepreneur\u0026rsquo;s signature) Similarly, assume that there are 3 builders in the are cooperative federation is recognizing, associated with public keys pubkeyConstr1, pubkeyConstr2, and pubkeyConstr3. Similarly to the voting contract, if equipment and construction contracts are not co-signed before block number 5000, the federation cooperatives could withdraw funds.  There are different ways to define contracts in Ergo. A script in the low-level language, ErgoTree, is describing a (single) logical condition on whether a coin could be spent according it, and also a spending proof provided by a spending transaction. Internally, the condition is represented as a typed syntax tree thus the name. The structure is allowing us to do ahead-of-time cost analysis etc. Higher-level language called ErgoScript allows to have more traditional and readable description, use variables and break logic into subroutines.\nLet\u0026rsquo;s start with the main contract defined in (1-3) above:\n{ val votingSuccess = atLeast(3, Array(pubkeyA, pubkeyB, pubkeyC, pubkeyD)) val properSpending = OUTPUTS(0).value \u0026gt;= 5000L \u0026amp;\u0026amp; blake2b256(OUTPUTS(0).propositionBytes) == spendingContract1Hash \u0026amp;\u0026amp; OUTPUTS(1).value \u0026gt;= 2000L \u0026amp;\u0026amp; blake2b256(OUTPUTS(1).propositionBytes) == spendingContract2Hash val withdrawCondition = HEIGHT \u0026gt;= 1000L \u0026amp;\u0026amp; OUTPUTS(0).value \u0026gt;= 2500L \u0026amp;\u0026amp; OUTPUTS(0).propositionBytes == pubkeyA.propBytes \u0026amp;\u0026amp; OUTPUTS(1).value \u0026gt;= 2500L \u0026amp;\u0026amp; OUTPUTS(1).propositionBytes == pubkeyB.propBytes \u0026amp;\u0026amp; OUTPUTS(2).value \u0026gt;= 2500L \u0026amp;\u0026amp; OUTPUTS(2).propositionBytes == pubkeyC.propBytes \u0026amp;\u0026amp; OUTPUTS(3).value \u0026gt;= 2500L \u0026amp;\u0026amp; OUTPUTS(3).propositionBytes == pubkeyD.propBytes (votingSuccess \u0026amp;\u0026amp; properSpending) || withdrawCondition } This script in the ErgoScript is to be compiled into a syntax tree (which is to be written into the blockchain in a serialized form) by binding it with concrete values for variables (pubkeyA, pubkeyB, pubkeyC, pubkeyD, spendingContract1Hash, spendingContract2Hash). spendingContract1Hash is a hash of (serialized) equipment spending script which will be provided below, spendingContract2Hash is a hash of construction spending script.\nThe equipment spending script is below:\n{ val spendingSuccess = (pubkeyTool1 || pubkeyTool2 || pubkeyTool3 || pubkeyTool4) \u0026amp;\u0026amp; businessKey val withdrawCondition = HEIGHT \u0026gt; 5000L \u0026amp;\u0026amp; OUTPUTS(0).value \u0026gt;= 1250L \u0026amp;\u0026amp; OUTPUTS(0).propositionBytes == pubkeyA.propBytes \u0026amp;\u0026amp; OUTPUTS(1).value \u0026gt;= 1250L \u0026amp;\u0026amp; OUTPUTS(1).propositionBytes == pubkeyB.propBytes \u0026amp;\u0026amp; OUTPUTS(2).value \u0026gt;= 1250L \u0026amp;\u0026amp; OUTPUTS(2).propositionBytes == pubkeyC.propBytes \u0026amp;\u0026amp; OUTPUTS(3).value \u0026gt;= 1250L \u0026amp;\u0026amp; OUTPUTS(3).propositionBytes == pubkeyD.propBytes spendingSuccess || withdrawCondition } And the construction script is:\n{ val spendingSuccess = (pubkeyConstr1 || pubkeyConstr2 || pubkeyConstr3) \u0026amp;\u0026amp; businessKey val withdrawCondition = HEIGHT \u0026gt; 5000L \u0026amp;\u0026amp; OUTPUTS(0).value \u0026gt;= 500L \u0026amp;\u0026amp; OUTPUTS(0).propositionBytes == pubkeyA.propBytes \u0026amp;\u0026amp; OUTPUTS(1).value \u0026gt;= 500L \u0026amp;\u0026amp; OUTPUTS(1).propositionBytes == pubkeyB.propBytes \u0026amp;\u0026amp; OUTPUTS(2).value \u0026gt;= 500L \u0026amp;\u0026amp; OUTPUTS(2).propositionBytes == pubkeyC.propBytes \u0026amp;\u0026amp; OUTPUTS(3).value \u0026gt;= 500L \u0026amp;\u0026amp; OUTPUTS(3).propositionBytes == pubkeyD.propBytes spendingSuccess || withdrawCondition } Now assume that the cooperative federation has created a coin protected by the voting contract. Below is how the entrepreneur can do his business:\n Create a transaction which consumes the coin and create at least three coins, one with equipment spending contract, another with construction spending contract, third is creating a coin protected by entrepreneur\u0026rsquo;s public key. Send the transaction to the cooperatives, wait for the transaction with the threshold-signed input being published on the blockchain. Consider a contract with an equipment seller, co-sign a spending transaction. Consider a contract with a builder, co-sign a spending transaction.  The entrepreneur can easily run away without doing any business, but with no more than 3,000 Ergs. This can be fixed, e.g. this money could be made spendable only after block number 5,000, and before that money could be withdrawn by the cooperatives. For equipment and construction spendings, the entrepreneur is working along with some, presumably already reputable, business. Thus the investor is reducing its risks.\nYou can find code and example transactions online. Please note that we have more examples of complex signature schemes, multi-step contracts (with on-the-go execution paths revealing, like MAST in Bitcoin, but with cycles allowed), oracles, crowdfunding and so on. Please check our examples repository.\n","link":null,"permalink":"https://ergoplatform.org/en/blog/2018_10_19-smart-contracts/","subtitle":null,"title":"Smart Contracts for the People"},{"contents":"","link":"https://www.biki.com/en_US/trade","permalink":"https://ergoplatform.org/en/exchanges/2021-13-03-1-biki/","subtitle":null,"title":"Biki.com"},{"contents":"","link":"https://www.bitmart.com/trade/en?layout=basic\u0026symbol=ERG_USDT","permalink":"https://ergoplatform.org/en/exchanges/2021-13-03-bitmart/","subtitle":null,"title":"bitmart"},{"contents":"","link":null,"permalink":"https://ergoplatform.org/en/search/","subtitle":"Search page","title":"Search"},{"contents":"","link":"https://tradeogre.com/exchange/BTC-ERG","permalink":"https://ergoplatform.org/en/exchanges/2021-13-03-2-tradeogre/","subtitle":null,"title":"TradeOgre"}]